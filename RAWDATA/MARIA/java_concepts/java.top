# =============================================================================
# This topic contains general information about various Java concepts.
# =============================================================================
topic: ~java keep repeat [java how what when tab]


#! how to make a for loop
#! how to create a for loop
#! how to use a for loop
u: ([how what] * for loop)
The most basic type of <code>for</code> loop is called and arithmetically controlled for loop. This type of loop usually follows this type of structure:
<div class="mlcode">
for (int i = 0; i &lt NUM_TIMES_TO_RUN_LOOP; i++)
{
&emsp;//Preform some action.
}
</div>
<ul id="choices">
<li>Could you give me an example?</li>
<li>Are there more advanced ways to use for loops?</li>
<li>What about for each loops?</li>
^feedback_options()
</ul>
<div class="feedback-info" data-feedback-type="answer"></div>
	#! Could you give me an example?
	a: (example)
	For example, the following code will print out the numbers 0 through 9:
	<div class="mlcode">
	for (int i = 0; i &lt 10; i++)
	{
	&emsp;System.out.println(i);
	}
	</div>
	<ul id="choices">
	^feedback_options()
	</ul>
	<div class="feedback-info" data-feedback-type="example"></div>

	#! Are there more advanced ways to use for loops?
	a: (advanced * for * loops)
	Yes! <code>for</code> loops can also be much more complicated. You can put any statements in the three parts of the <code>for</code> loop you want. Notice how the following <code>for</code> loop is designed to go to the end of a linked list:
	<div class="mlcode">
	for (Node cur = node; cur.next != null; cur = cur.next)
	{
	&emsp;System.out.println(cur.data);
	}
	</div>
	This loop will traverse a linked list, printing out the data in each node, as it goes.
	<ul id="choices">
	^feedback_options()
	</ul>
	<div class="feedback-info" data-feedback-type="answer"></div>

	#! What about for each loops?
	a: (for each)
	^reuse(FOR_EACH)


#! how to make a for each loop
#! how to create a for each loop
#! how to use a for each loop
u: FOR_EACH ([how what] * for each loop)
A for each loop is a special kind of loop that is related to the <code>for</code> loop. For each loops are much more specialized than their normal <code>for</code> loop counterparts. They can only be used to iterate over a list or collection. For each loops are structured like this:
<div class="mlcode">
for (/*Type of thing in list*/ /*Name*/ : /*Name of a list or collection*/)
{
&emsp;//Do something.
}
</div>
<ul id="choices">
<li>Could you give me an example?</li>
^feedback_options()
</ul>
<div class="feedback-info" data-feedback-type="answer"></div>
	#! Could you give me an example?
	a: (example)
	For example, say you wanted to add every String from <code>listOne</code> into <code>listTwo</code>. You could do that using a for each loop like this:
	<div class="mlcode">
	for (String str : listOne)
	{
	&emsp;listTwo.add(str);
	}
	</div>
	Note that the Object stored in <code>str</code> changes with every iteration of the loop. In the first iteration, it holds the first element in <code>listOne</code>. In the second iteration, it holds the second element. So, <code>str</code> is a name for "every" element in <code>listOne</code>.
	<ul id="choices">
	^feedback_options()
	</ul>
	<div class="feedback-info" data-feedback-type="example"></div>


#! what is an object
u: (what * object)
In Java, an Object is a data type that can be created in classes and can have methods called on it. String is an Object type that you will frequently interact with. Note that unlike <code>int</code> variables, you can call methods on String variables, like <code>substring()</code>. All Object types you make through the creation of your own classes are subclasses of the Java Object class. More info on the Java Object class can be found <a href=https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html>in the Java documentation</a>.
<ul id="choices">
^feedback_options()
</ul>
<div class="feedback-info" data-feedback-type="answer"></div>


#! how to use the ternary operator
#! what is the ternary operator
u: ([what how when] * ternary {operator})
In Java, the ternary operator is a way to condense an if-then-else statement into one convenient line. If you have this if-else structure:
<div class="mlcode">
\if ( /*condition*/ )
{
&emsp;/*some action*/
}
else
{
&emsp;/*some other action*/
}
</div>
You can translate it into this line:
<div class="mlcode">
/*condition*/ ? /*some action*/ : /*some other action*/
</div>
The question mark and colon together are the ternary operator. You can think of it as asking if the condition is true and if it is, it will do the first thing. Otherwise, it will do what's after the colon.
<ul id="choices">
^feedback_options()
</ul>
<div class="feedback-info" data-feedback-type="answer"></div>


#! what is a generic class
u: (what is * generic {class})
In Java, generic classes are classes that deal specifically with one type of Object. A great example is the List class. Usually, you'll want a List of one specific type of Object, like Strings. Because you are able to specify that the List class only contains Strings, you can then call String methods directly on List items without needing a cast.
<ul id="choices">
^feedback_options()
</ul>
<div class="feedback-info" data-feedback-type="answer"></div>


#! how to make a generic class
u: (how * [make create] * generic class)
Creating a generic class is very similar to creating a regular class. In the class header, you'll want to include some angle brackets, like this:
<div class="mlcode">
public class GenericClass&ltT&gt
{
&emsp;//Some code.
}
</div>
The thing in the angle brackets can be anything. It is a placeholder for some Object that will be specified when a <code>GenericClass</code> Object is instantiated. You can then use this placeholder type later in your code. For example, you can create fields of type <code>T</code> and you can make methods return <code>T</code>. 
<ul id="choices">
<li>Tell me more!</li>
^feedback_options()
</ul>
<div class="feedback-info" data-feedback-type="answer"></div>
	a: (tell me more)
	You can restrict the type of Objects that <code>T</code> can be by using <code>extends</code> and <code>super</code>. If use said <code>T extends SomeClass</code> instead of just <code>T</code>, then your class could only be used with classes that extend (or are subclasses of) <code>SomeClass</code>. Using <code>super</code> does the "opposite", requiring a class that is a superclass of the specified class.
	<ul id="choices">
	^feedback_options()
	</ul>
	<div class="feedback-info" data-feedback-type="answer"></div>


#! what is a wrapper class
u: WHAT_WRAPPER (what is * wrapper {class})
In Java, wrapper classes are Object types that correspond to each of the primitive data types (there is <code>Integer</code> for <code>int</code>, <code>Boolean</code> for <code>boolean</code>, etc.). The main point of wrapper classes is to allow you use primitive types in places you can usually only use Objects. For example, if you wanted to create a List of <code>int</code>s, you can't because you can only create Lists of Objects. But, you can create a List of Integer Objects! Java also uses a special magic trick called auto-boxing to automatically convert primitive types to their wrapper Objects when necessary. So, saying <code>Integer i = 6;</code> is fine. You don't need to say <code>new Integer(6)</code>.
<ul id="choices">
<li>What is autoboxing?</li>
^feedback_options()
</ul>
<div class="feedback-info" data-feedback-type="answer"></div>
	#! What is autoboxing?
	a: (what * autoboxing)
	^reuse(AUTOBOXING)


#! what is autoboxing
u: AUTOBOXING (what is [autoboxing autobox auto-box auto-boxing])
Auto-boxing is a cool feature of Java that automatically converts primitive types to their wrapper Object equivalent and vice versa when necessary. So, you can use Integers and <code>int</code>s interchangeably.
<ul id="choices">
^feedback_options()
</ul>
<div class="feedback-info" data-feedback-type="answer"></div>


#! what is casting
u: CASTING (what is * [cast casting])
In Java, casting is when you forcibly change the type of a variable. For example, if I wanted Java to perverse the decimal when I was dividing 2 <code>int</code>s, I could use this line:
<div class="mlcode">
int i1 = 2;
int i2 = 4;
double result = (double)i1 / (double)i2;
</div>
The <code>(double)</code> (which is the cast) tells Java that even though <code>i1</code> and <code>i2</code> are <code>int</code>s, I want Java to pretend they're <code>double</code>s and go from there. Using a cast is you saying you are smarter than Java so, before you use one, make sure you are in fact smarter than Java. Be sure that your cast will not cause any problems.
<ul id="choices">
^feedback_options()
</ul>
<div class="feedback-info" data-feedback-type="answer"></div>


#! how to cast a variable 
u: ([how what] * [is to] * cast)
^reuse(CASTING)


#! what is an abstract class
u: ABSTRACT_CLASS (what is * abstract class)
An abstract class is similar to an interface in that not every method needs to have a body. So, some of the methods in an abstract class can just be headers (like <code>public abstract void method();</code>). Note that abstract classes cannot be instantiated (you can't create new Objects of that class). This makes sense because they're not finished! They still need to have some of their methods defined! You'll want to make a class abstract when some of the methods (but not all) will need to be implemented by a subclass. All abstract methods in an abstract class should have the word <code>abstract</code> in their header and should have a semicolon after their parentheses.
<ul id="choices">
^feedback_options()
</ul>
<div class="feedback-info" data-feedback-type="answer"></div>


#! what is an abstract method 
u: (what is * abstract method)
An abstract method is like a method you could find in an interface. It has no body (no curly braces). Instead, it looks like this:
<div class="mlcode">
public abstract void method();
</div>
Note the word <code>abstract</code> and the semicolon at the end. Both of these are required!
<ul id="choices">
^feedback_options()
</ul>
<div class="feedback-info" data-feedback-type="answer"></div>


#! how do i use a switch statement
u: SWITCH (switch statement)
A switch statement is a special way to combine a lot of if statements and else-if statements together. First you'll need one variable that can have many values, like an <code>int</code> or a String. Then, you'll want a bunch of different things that can happen based on the value of that variable. Then, put it together like this:
<div class="mlcode">
int i = Random.generator().nextInt(1, 10); // i is a value from 1 to 10
switch(i) {
&emsp;case 1: // if i == 1
&emsp;&emsp;System.out.println("Hi");
&emsp;&emsp;break;
&emsp;&emsp;case 2: // else if i == 2
&emsp;&emsp;System.out.println("Hello");
&emsp;&emsp;break;
&emsp;default: // else (if i is anything other than 1 or 2)
&emsp;&emsp;System.out.println("Hey!");
&emsp;&emsp;break;
}
</div>
Make sure to include <code>break</code>s at the end of each case.
<ul id="choices">
<li>What if I don't include a break?</li>
^feedback_options()
</ul>
<div class="feedback-info" data-feedback-type="answer"></div>
	#! What if I don't include a break?
	a: (what * include * break)
	If you don't include the <code>break</code>s, the code will still compile, but something weird will happen. Once a case is selected, all of the code in that case will be run. Then, all of the code in the next case will also be run. This will continue all the way to the end of the <code>switch</code> statement. For example, look at this code:
	<div class="mlcode">
	int i = 1;
	switch(i)
	{
	&emsp;case 1: System.out.println("1");
	&emsp;case 2: System.out.println("2");
	&emsp;default: System.out.println("3");
	}
	</div>
	The output will be:
	<div class="mlcode">
	1
	2
	3
	</div>
	Execution will "fall through" all remaining cases. You can sometimes use this affect to your advantage. For example, think about how you could use this to make a simple countdown clock that will countdown from any number between 1 and 10!
	<ul id="choices">
	^feedback_options()
	</ul>
	<div class="feedback-info" data-feedback-type="answer"></div>


#! what is an interface
u: WHAT_INTERFACE (what is * interface)
An interface is like a class but it only contains method headers and not the actual code that will go into the methods. Usually you'll want to make an interface if many classes will have the same methods and do the same things but the different classes will do the same things in different ways. A great example is the <code>List</code> interface. Both the <code>ArrayList</code> class and the <code>LinkedList</code> class implement this interface so they both have methods like <code>add()</code> and <code>remove()</code> but because the different Lists have different structures, they implement the methods in different ways.
<ul id="choices">
<li>Could you give me an example?</li>
^feedback_options()
</ul>
<div class="feedback-info" data-feedback-type="answer"></div>
	#! Could you give me an example?
	a: (example)
	An interface should get its own class that looks like this:
	<div class="mlcode">
	public interface InterfaceName
	{
	&emsp;public void methodHeader();
	&emsp;//more methods...
	}
	</div>
	<ul id="choices">
	^feedback_options()
	</ul>
	<div class="feedback-info" data-feedback-type="example"></div>


#! what is a superclass
#! what is a super class
u: (what is * [superclass "super class" parent])
A superclass is the class that another class inherits some functionality functionality from. In Java, every class has a superclass. The superclass is usually a more generic class that has less functionality. For example, the Pet class may be the superclass of Fish. In this case, Fish is a more specific class that has more unique functionality (like swimming) and Pet is a more generic class that has features universal to all pets (like moving or interacting with their owner).
<ul id="choices">
<li>How do I know which class is the superclass is?</li>
<li>When could I use a superclass?</li>
<li>What do you mean by "inherits functionality"?</li>
^feedback_options()
</ul>
<div class="feedback-info" data-feedback-type="answer"></div>
	#! How do I know which class is the superclass is?
	a: (which class * superclass)
	In Java, if you are in a class, you can find out the superclass by scrolling to the top of the file and looking at the class declaration line:
	<div class="mlcode">
	public class Fish extends Pet
	</div>
	The superclass is the class that comes after the word <code>extends</code>. If there is no <code>extends</code>, then the class uses the default superclass: <code>Object</code>.
	<ul id="choices">
	^feedback_options()
	</ul>
	<div class="feedback-info" data-feedback-type="answer"></div>

	#! When could I use a superclass?
	a: (when * use * superclass)
	If you are working on two different classes that share a lot of functionality (they have some of the same methods), then you can take the methods that are the same and move them to a super class that both of your classes inherit from. That way, both of the classes can still use the methods and you only have to write them once, in one place.
	<ul id="choices">
	^feedback_options()
	</ul>
	<div class="feedback-info" data-feedback-type="answer"></div>

	#! What do you mean by "inherits functionality"?
	a: (~emomisunderstand)
	^reuse(WHAT_INHERITANCE)


#! what does super means
#! what does super do
#! how to use super
u: ([what how] * super)
In Java, the <code>super</code> keyword can be used to access methods or constructors from the super class. For example, look at the following classes:
<div class="mlcode">
public class Parent
{
&emsp;private int number;
   
&emsp;public Parent()
&emsp;{
&emsp;&emsp;number = 5;
&emsp;}
   
&emsp;public method()
&emsp;{
&emsp;&emsp;number = 10;
&emsp;}
}

public class Child
{
&emsp;public Child()
&emsp;{
&emsp;&emsp;super(); //Calls constructor in Parent. number is set equal to 5.	
&emsp;&emsp;super.method(); //Calls method() in Parent. number is set equal to 10.	   
&emsp;}
}
</div>
Remember that a call to <code>super()</code> must be the very first line in a subclass's constructor.
<ul id="choices">
^feedback_options()
</ul>
<div class="feedback-info" data-feedback-type="answer"></div>


#! what is a subclass
#! what is a child class
#! what does a subclass do
u: WHAT_SUBCLASS (what [is do] * [subclass "sub class" child])
A subclass is a class that inherits functionality from another class. A subclass is usually a more specific type of thing than its super class that has more specific functionality. For example, I may create a class called Pet. This is a very generic class that does things any pet can do. For example, it can speak and love its owner so it might have methods like <code>speak()</code> and <code>love()</code>. Then, I might create a subclass of Pet that is a specific type of pet. Say I create a class called Dog. Dogs will have specific functionality that general pets do not. For example, I might implement a <code>fetch()</code> method.
<ul id="choices">
<li>How do I know if a class is a subclass?</li>
<li>What do you mean by "inherits functionality"?</li>
^feedback_options()
</ul>
<div class="feedback-info" data-feedback-type="answer"></div>
	#! How do I know if a class is a subclass?
	a: (how * know * subclass)
	In Java, if you are in a class, you can find out if it is a subclass by scrolling to the top of the file and looking at the class declaration line:
	<div class="mlcode">
	public class Fish extends Pet
	</div>
	If you see the word <code>extends</code>, then you are in a subclass and it is a subclass of the class to the right of the word <code>extends</code>. If there is no <code>extends</code>, then the class is a subclass of <code>Object</code> by default.
	<ul id="choices">
	^feedback_options()
	</ul>
	<div class="feedback-info" data-feedback-type="answer"></div>

	#! What do you mean by "inherits functionality"?
	a: (~emomisunderstand)
	^reuse(WHAT_INHERITANCE)


#! what is this
#! what does this do
u: (what * this)
In Java, the <code>this</code> keyword is used to reference the object that called the method you are in. For example, if I write this in one class:
<div class="mlcode">
HarvesterJeroo dave = new HavesterJeroo();
dave.hopAndPick();
</div>
And I declared the <code>hopAndPick</code> in a Jeroo subclass called HarvesterJeroo like this:
<div class="mlcode">
public void hopAndPick() {
&emsp;this.hop();
&emsp;this.pick();
}
</div>
Then, the <code>this</code> in <code>hopAndPick()</code> refers to <code>dave</code> because I called the <code>hopAndPick()</code> method on <code>dave</code>. Again, <code>this</code> refers to the object that called the method.
<ul id="choices">
^feedback_options()
</ul>
<div class="feedback-info" data-feedback-type="answer"></div>


#! what is inheritance
u: WHAT_INHERITANCE (what is inheritance)
Inheritance occurs when one class extends another. This means the new class is a child of the other class. Children classes can access data and methods from their parent.
<ul id="choices">
<li>When is it useful?</li>
^feedback_options()
</ul>
<div class="feedback-info" data-feedback-type="answer"></div>
	#! When is it useful?
	a: (when * useful)
	It can be used when multiple classes share some functions. For example, a Truck object and a Minivan object may share features. You could group these common features into another class, the Car class, and make both children of the Car class.
	<ul id="choices">
	^feedback_options()
	</ul>
	<div class="feedback-info" data-feedback-type="answer"></div>
	

#! how does inheritance work
u: (how * inheritance work)
^reuse(WHAT_INHERITANCE)


#! what are pointers
u: WHAT_POINTER (what * pointers)
Say you create a new object: 
<div class="mlcode">
Object obj1 = new Object();
</div>
There are really 2 parts to this line. First, we create a new object (the right side of the equals sign). This object is separate from the variable <code>obj1</code>. Java has an internal name for it that is probably not "obj1". The other part is creating a variable called <code>obj1</code> that will store a reference or "pointer" to the newly created object. In this way, the variable <code>obj1</code> is not an object itself, but a pointer to the real object. Now if we do this:
<div class="mlcode">
Object obj2 = obj1;
</div>
We are not creating a new object here. Rather, we are making a new variable called <code>obj2</code> that will also point to the object that <code>obj1</code> points to.
<ul id="choices">
^feedback_options()
</ul>
<div class="feedback-info" data-feedback-type="answer"></div>

	
#! how do object references work
u: ([what how] * object reference)
^reuse(WHAT_POINTER)


#! what does file contains tab characters mean
#! tab characters
u: (tab [characters character])
If Web-CAT is giving you an issue with tab characters, look at the line where Web-CAT gave you the error. Remove all the space before the start of the line and then add spaces back until the indentation is correct.
<ul id="choices">
<li>That didn't fix my problem.</li>
^feedback_options()
</ul>
<div class="feedback-info" data-feedback-type="answer"></div>
	#! That didn't fix my problem.
	a: (fix * problem)
	This error can also be caused by having tabs in a String. If there is a string on the line Web-CAT is highlighting, go through and delete all the whitespace between the words and the replace them with spaces. Or, if you need the tabs, you can replace the whitespace with "\t". That will show up as a tab when you print out the string.
	<ul id="choices">
	^feedback_options()
	</ul>
	<div class="feedback-info" data-feedback-type="answer"></div> 


#! which data structures use length and which use size?
u: WHEN_USE_SIZE_LENGTH ([which what why] * data structures * use * length * and * size)
Arrays use <code>length</code> (with no parentheses), Strings use <code>length()</code>, and most other things like Lists and Maps use <code>size()</code>.
<ul id="choices">
<li>What is the difference between size and length?</li>
^feedback_options()
</ul>
<div class="feedback-info" data-feedback-type="answer"></div>
	#! What is the difference between size and length?
	a: (difference)
	^reuse(DIFF_SIZE_LENGTH)


#! when do i use length and when do i use size
u: (when * use * length * and * size)
^reuse(WHEN_USE_SIZE_LENGTH)


#! What data structures do you use size for and what data structures do you use length for?
u: ([which what why] * data structures * use * size * and * length)
^reuse(WHEN_USE_SIZE_LENGTH)


#! when should i use size and when should i use length
u: (when * use * size * and * length)
^reuse(WHEN_USE_SIZE_LENGTH)


#! what is the difference between size and length?
u: DIFF_SIZE_LENGTH (what * difference * between * [size length] * [size length])
The difference between size and length is subtle but it has to do with whether or not the Object can change its length/size. Arrays and strings cannot change their \length (if you change the length of a string it actually throws the original String away and creates a new, longer String) so they have a constant <i>length</i>. On the other hand, the size of a List can change. You can add and remove elements from a List or a Map. So they don't have a constant length, they have a current <i>size</i>.
<ul id="choices">
^feedback_options()
</ul>
<div class="feedback-info" data-feedback-type="answer"></div>

