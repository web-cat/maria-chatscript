# =============================================================================
# This topic contains information about Java Lists (ArrayList, LinkedList, 
#  List)
# =============================================================================
topic: ~lists keep repeat [java list ~arraylist ~linkedlist]


#! what is the difference between an ArrayList and a List?
u: DIFF_LIST_AND_ARRAYLIST (what * difference between *~2 [list ~arraylist] * [list ~arraylist])
An ArrayList is a specific kind of a List. A List is the general idea of a list (an ordered collection of things). You cannot actually create a List object (literally, Java will give you an error if you try). The List class simply defines all of the things a List should be able to do. Then, specific kinds of Lists actually implement those features. That's where ArrayList comes in. It uses an array to actually implement all of the functionality of a List.
<ul id="choices">
<li>How do you use Lists?</li>
<li>How does an ArrayList work?</li>
</ul>
	a: (how * use * list)
	^reuse(HOW_USE_LIST)

	a: (how * work)
	^reuse(HOW_ARRAYLIST_WORK)


#! how do arraylists work?
u: HOW_ARRAYLIST_WORK (how * ~arraylist * work)
An ArrayList is built using an array to store elements. When an element is added, it is put in the last empty index of the array. When an element is removed, all the other elements are moved down to fill in the hole so that the indexes remain consistent. And, because arrays have a fixed amount of space, if you try to add too many elements to an ArrayList, it will need to make a bigger array to hold them all. It will then copy over all the elements from the old array to the new array.


#! what is the difference between an LinkedList and a List?
u: DIFF_LIST_AND_LINKEDLIST (what * difference between *~2 [list ~linkedlist] * [list ~linkedlist])
An LinkedList is a specific kind of a List. A List is the general idea of a list (an ordered collection of things). You cannot actually create a List object (literally, Java will give you an error if you try). The List class simply defines all of the things a List should be able to do. Then, specific kinds of Lists actually implement those features. That's where LinkedList comes in. It uses an object pointers to actually implement all of the functionality of a List.
<ul id="choices">
<li>How do you use Lists?</li>
<li>How does an LinkedList work?</li>
</ul>
	a: (how * use * list)
	^reuse(HOW_USE_LIST)

	a: (how * work)
	^reuse(HOW_LINKEDLIST_WORK)


#! how does a linkedlist work?
u: HOW_LINKEDLIST_WORK (how * [~linkedlist] * work)
An LinkedList is built using object pointers. Each element in the List is stored in an Object that functions like a box. This Object contains both the element at that index and a pointer to the "box" that holds the next element. Basically each element in the List tells us where to find the next element in memory. This type of List can easily add and remove elements because there is no fixed order or size based on an array. We can simply move pointers around or delete them when we need to change the order of elements in the list.


#! what is an arraylist?
u: (what is * ~arraylist)
An ArrayList is a specific kind of List that you can instantiate. A List is a data structure that stores a collection of things, with each element stored at an index in the List (starting at index 0). They are very similar to arrays, but you can change their size so they are a bit more versatile. 
<ul id="choices">
<li>How do you use Lists?</li>
<li>What is the difference between a List and an ArrayList?</li>
</ul>
	a: (how * use * list)
	^reuse(HOW_USE_LIST)

	a: (what * difference between * [list ~arraylist] * [list ~arraylist])
	^reuse(DIFF_LIST_AND_ARRAYLIST)


#! how do you use an arraylist?
u: (how * use * ~arraylist)
You'll use ArrayLists in the same way you use generic Lists.
^refine()
	a: ()
	^reuse(HOW_USE_LIST)


#! what is an linkedlist?
u: (what is * ~linkedlist)
An LinkedList is a specific kind of List that you can instantiate. A List is a data structure that stores a collection of things, with each element stored at an index in the List (starting at index 0). They are very similar to arrays, but you can change their size so they are a bit more versatile. 
<ul id="choices">
<li>How do you use Lists?</li>
<li>What is the difference between a List and an LinkedList?</li>
</ul>
	a: (how * use * list)
	^reuse(HOW_USE_LIST)

	a: (what * difference between * [list ~linkedlist] * [list ~linkedlist])
	^reuse(DIFF_LIST_AND_LINKEDLIST)


#! how do you use an linkedlist?
u: (how * use * ~linkedlist)
You'll use LinkedLists in the same way you use generic Lists.
^refine()
	a: ()
	^reuse(HOW_USE_LIST)


#! what is a list?
u: WHAT_LIST (what is * list)
A List is a data structure that stores a collection of things, with each element stored at an index in the List (starting at index 0). They are very similar to arrays, but you can change their size so they are a bit more versatile. 
<ul id="choices">
<li>How do you use Lists?</li>
<li>What is the difference between a List and an ArrayList?</li>
<li>What is the difference between a List and an LinkedList?</li>
</ul>
	a: (how * use * list)
	^reuse(HOW_USE_LIST)

	a: (what * difference between * [list ~arraylist] * [list ~arraylist])
	^reuse(DIFF_LIST_AND_ARRAYLIST)

	a: (what * difference between * [list ~linkedlist] * [list ~linkedlist])
	^reuse(DIFF_LIST_AND_LINKEDLIST)


#! how do you use a list?
u: HOW_USE_LIST (how * use * list)
The four most important methods when using Lists are <code>add(/*element*/)</code>, <code>remove(/*index or element*/)</code>, <code>get(/*index*/)</code>, and <code>size()</code>. You use <code>add()</code> to add things to the \end (the highest index) of the List, you can use <code>remove()</code> to remove things from your List, you can use <code>get()</code> to get the thing at a certain index, and you can use <code>size()</code> to get the number of things in the List. Each element in the List is stored at an index in the List (starting at 0).
^refine()
	a: LIST_EXAMPLES ()
	<ul id="choices">
	<li>Show me an example of creating a List.</li>
	<li>Show me an example of the add() method.</li>
	<li>Show me an example of the remove() method.</li>
	<li>Show me an example of the get() method.</li>
	<li>Show me an example of the size() method.</li>
	<li>When should I use a List?</li>
	</ul>
		b: (example * create)
		Before you can create a List, you need to decide what you're going to put in your List. Note that you can only store Objects in a List (no ints or doubles!). Here's how I would create an array of Strings:
		<div class="mlcode">
		ArrayList&lt;String&gt; names = new ArrayList&lt;String&gt;();
		</div>
		By putting String in the less than and greater than signs, I'm telling Java that I want to store Strings in my List.
		<ul id="choices">
		<li>What if I want a List of ints or doubles?</li>
		<li>Why did you say ArrayList instead of List?</li>
		<li>I want to see a another example.</li>
		</ul>
			c: ANOTHER_LIST_EXAMPLE (another example)
			What other example would you like to see?
			^refine()
				d: ()
				^reuse(LIST_EXAMPLES)

			c: (list * [ints doubles])
			If you want a List of a primitive type (like ints, doubles, or booleans), you'll need to use wrapper classes. There's <code>Integer</code> for ints, <code>Double</code> for doubles, and <code>Boolean</code> for booleans.
			<ul id="choices">
			<li>Give me an example.</li>
			<li>What's a wrapper class?</li>
			</ul>
				d: (example)
				Let's say I want to make a List of ints. I would do that like this:
				<div class="mlcode">
				ArrayList&lt;Integer&gt; grades = new ArrayList&lt;Integer&gt;();
				</div>
				I can add and get ints from it like normal:
				<div class="mlcode">
				grades.add(99);
				int myGrade = grades.get(0);
				</div>
				<ul id="choices">
				<li>What's a wrapper class?</li>
				<li>I want to see a another List example.</li>
				</ul>

				d: (what * wrapper)
				^reuse(~java.WHAT_WRAPPER)

				d: (example)
				^reuse(ANOTHER_LIST_EXAMPLE)

			c: (why * arraylist)
			^reuse(DIFF_LIST_AND_ARRAYLIST)

		b: (example * add)
		You use the <code>add(/*element*/)</code> method to add things to the end of your List. Let's say I have a List of Strings called <code>list</code>. I can add to it like this:
		<div class="mlcode">
		list.add("a");  // list = ["a"]
		list.add("b");  // list = ["a", "b"]
		list.add("c");  // list = ["a", "b", "c"]
		</div>
		In this example, "a" is at the start of the List and "c" is at the end. 
		<ul id="choices">
		<li>I want to see a another example.</li>
		</ul>
			c: ANOTHER_LIST_EXAMPLE (another example)
			What other example would you like to see?
			^refine()
				d: ()
				^reuse(LIST_EXAMPLES)

		b: (example * remove)
		The <code>remove(/*index or thing*/)</code> method can be used in 2 ways. You can use it to remove a certain thing from the list or you can use it to remove the thing at a certain index in the list. Let's say I have the list <code>["a", "b", "c"]</code>. Then, I can use remove like this:
		<div class="mlcode">
		list.remove(0);    // list = ["b", "c"]
		list.remove("b");  // list = ["c"]
		</div>
		Remember that the indexes of a list start at 0, so when I say <code>remove(0)</code>, it will remove the first thing from the List. 
		<ul id="choices">
		<li>I want to see a another example.</li>
		</ul>
			c: ANOTHER_LIST_EXAMPLE (another example)
			What other example would you like to see?
			^refine()
				d: ()
				^reuse(LIST_EXAMPLES)

		b: (example * get)
		The <code>get(/*index*/)</code> method can be used to get the element at the specified index in the List. For example, let's say I have the list <code>["a", "b", "c"]</code>. Them I can use get like this:
		<div class="mlcode">
		list.get(0);  // returns "a"
		String str = list.get(1);  // str = "b"
		</div>
		Remember that the indexes of a list start at 0, so when I say <code>get(0)</code>, it will get the first thing from the List. 
		<ul id="choices">
		<li>I want to see a another example.</li>
		</ul>
			c: ANOTHER_LIST_EXAMPLE (another example)
			What other example would you like to see?
			^refine()
				d: ()
				^reuse(LIST_EXAMPLES)

		b: (example * size)
		The <code>size()</code> method will get the number of things in the List. For example, let's say I have the list <code>["a", "b", "c"]</code>, then <code>list.size() = 3</code>. This method is helpful for making an iterative for loop to go through the List. 
		<ul id="choices">
		<li>I want to see a another example.</li>
		</ul>
			c: ANOTHER_LIST_EXAMPLE (another example)
			What other example would you like to see?
			^refine()
				d: ()
				^reuse(LIST_EXAMPLES)

		b: (when * use)
		You should use a List when you need to store things in a certain order, but you do not know hoe many things you'll need to store. Lists are better than arrays because they do not have a fixed size. (However, they also take up more memory.)