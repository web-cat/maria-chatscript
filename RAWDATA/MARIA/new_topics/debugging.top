concept: ~debug [debugger debugging debug debuger debuging]
topic: ~debugging keep repeat [~debug]

# =============================================================================
# This topic contains information about debugging programs and using debuggers. 
# =============================================================================


#! how do i use a debugger
#! how can i use the debugger
#! how to use a debugger
u: HOW_USE (how * use * ~debug)
Don't be intimidated by using a debugger. It's much easier than you think. Trust me, I had to learn to use one at one point.
<ul id="choices">
<li>Ok, go on.</li>
</ul>
	a: REAL_START_HOW_USE (~yes)
	The first step to using a debugger is setting breakpoints. You can set a breakpoint in most IDEs by simply clicking (or double clicking) on (or near) the line numbers. You should see a circle of some kind when you do that. You can even do this in Greenfoot!
	<ul id="choices">
	<li>Ok, go on.</li>
	</ul>
		b: (~yes)
		If you are debugging a specific error, you should probably set your breakpoint on the line that's causing the error or a line above it.
		<ul id="choices">
		<li>Ok, go on.</li>
		</ul>
			c: (~yes)
			Once you have your breakpoints setup, you can run your code in debug mode. This is usually done by hitting a bug-shaped button near the normal run button. In Greenfoot, it is done by just hitting "Run".
			<ul id="choices">
			<li>Ok, go on.</li>
			</ul>
				d: (~yes)
				Then, your code will run up until the line where you set the breakpoint. Once it stops running, you will see a list of the variables that are visible at that point in the code. There are also places where you can write expressions and evaluate them.
				<ul id="choices">
				<li>Ok, go on.</li>
				</ul>
					e: (~yes)
					If you are done looking at the variables from the line where set the breakpoint, you can either Step Over, Step Into, Resume, or Terminate.
					<ul id="choices">
					<li>Ok, go on.</li>
					</ul>
						f: (~yes)
						Step Over is just a normal step to the next line. Step Into means that if a function is called on the current line, you will step into that function. Resume means that the code will keep running until the next breakpoint or until it finishes. Terminate means that the code will just running, closing the debugger.
	

#! what is the debugger used for
#! what are debuggers for
u: WHAT_FOR (what * ~debug * for)
The debugger is a powerful tool, much more powerful than PRINT statements. If you ever run into a problem that you don't know how to solve, the first thing you should do is use the debugger.
<ul id="choices">
<li>How do I use it?</li>
</ul>
	a: (how * use * [it ~debug])
	^reuse(HOW_USE)

	
#! why would i need to use a debugger
#! why should i use the debugger
#! why should i use a debugger
u: (why * [need use] * ~debug)
^reuse(WHAT_FOR)