concept: ~debug [debugger debugging debug debuger debuging]
topic: ~debugging keep repeat [~debug]

# =============================================================================
# This topic contains information about debugging programs and using debuggers. 
# =============================================================================


#! how do i use a debugger
#! how can i use the debugger
#! how to use a debugger
u: HOW_USE (how * use * ~debug)
Don't be intimidated by using a debugger. It's much easier than you think. Trust me, I had to learn to use one at one point.
<ul id="choices">
<li>Ok, go on.</li>
</ul>
	a: REAL_START_HOW_USE (~yes)
	The first step to using a debugger is setting breakpoints. You can set a breakpoint in most IDEs by simply clicking (or double clicking) on (or near) the line numbers. You should see a circle of some kind when you do that. You can even do this in Greenfoot!
	<ul id="choices">
	<li>Ok, go on.</li>
	</ul>
		b: (~yes)
		If you are debugging a specific error, you should probably set your breakpoint on the line that's causing the error or a line above it.
		<ul id="choices">
		<li>Ok, go on.</li>
		</ul>
			c: (~yes)
			Once you have your breakpoints setup, you can run your code in debug mode. This is usually done by hitting a bug-shaped button near the normal run button. In Greenfoot, it is done by just hitting "Run".
			<ul id="choices">
			<li>Ok, go on.</li>
			</ul>
				d: (~yes)
				Then, your code will run up until the line where you set the breakpoint. Once it stops running, you will see a list of the variables that are visible at that point in the code. There are also places where you can write expressions and evaluate them.
				<ul id="choices">
				<li>Ok, go on.</li>
				</ul>
					e: (~yes)
					If you are done looking at the variables from the line where set the breakpoint, you can either Step Over, Step Into, Resume, or Terminate.
					<ul id="choices">
					<li>Ok, go on.</li>
					</ul>
						f: (~yes)
						Step Over is just a normal step to the next line. Step Into means that if a function is called on the current line, you will step into that function. Resume means that the code will keep running until the next breakpoint or until it finishes. Terminate means that the code will just running, closing the debugger.
	

#! what is the debugger used for
#! what are debuggers for
u: WHAT_FOR (what * ~debug * for)
The debugger is a powerful tool, much more powerful than PRINT statements. If you ever run into a problem that you don't know how to solve, the first thing you should do is use the debugger.
<ul id="choices">
<li>How do I use it?</li>
</ul>
	a: (how * use * [it ~debug])
	^reuse(HOW_USE)

	
#! why would i need to use a debugger
#! why should i use the debugger
#! why should i use a debugger
u: (why * [need use] * ~debug)
^reuse(WHAT_FOR)

#! my code doesn't work
#! my code won't work
#! why won't my code work
u: (code * ["does not" "will not" "won't" "doesn't" "isn't" "not"] [work working])
That's very unfortunate. There's many things that could be causing that. What's the issue? (You can select an option or type your own.)
<ul id="choices">
<li>I'm getting an exception when I run my code.</li>
<li>My code won't compile!</li>
<li>My tests are failing.</li>
<li>My code isn't doing the right thing.</li>
</ul>

	a: (exception)
	^reuse(~commonexceptions.EXP_HELP)
	
	a: ([no "won't" not] compile)
	Often times, the complier error will tell you what is wrong. Read the complier error message carefully and see if you can figure it out from there. Otherwise, tell me what error you're getting.
		
		b: ()
		^input(what is %originalinput error)
	
	a: (test * falling)
	Ok. That's unfortunate. First, is the test failing because of an exception or because of a failed assertion?
	<ul id="choices">
	<li>Exception.</li>
	<li>Failed assertion.</li>
	
		b: (exception)
		That's great! So, testing is actually supposed to help you find bugs, like ones that cause exceptions. You've found a bug! Now, you just need to fix it. First, you'll want to isolate the problem as much as possible. Look at the error you're getting. If you see multiple non-test method you wrote in the error message, you may want to write another test for the method highest up on the list.
		<ul id="choices">
		<li>Ok.</li>
		<li>I figured it out.</li>
		</ul>
			c: (~yes)
			Awesome. Now that you've isolated the problem, you just need to figure out what's causing it. You can use <code>System.out.println( /* some variable */ );</code> to help you figure out what is going wrong. Print out a lot of variables and see where the variable's values go wrong. Other than that, you can also ask me about the exception you are getting.  
				d: (~yes)
				Hope that helped.
			
			c: ()
			Ok, I'll stop my explanation.
	
		b: (assertion)
		First make sure that you are expecting the right value. Go through your test and make sure you correctly calculated all the expected values. 
		<ul id="choices">
		<li>Ok, what next?</li>
		<li>I figured it out.</li>
		</ul>
			c: (~yes)
			Awesome. Now, look at the error message and see where it's happening. Look in that method and use <code>System.out.println( /* some variable */ );</code> to print out the variables in your method to see what is going wrong. You can also add those print statements to other methods called by the one that's giving the wrong result.
				d: (~yes)
				Hope that helped.
			
			c: ()
			Ok, I'll stop my explanation.