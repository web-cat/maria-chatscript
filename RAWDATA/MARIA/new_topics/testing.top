concept: ~turnin (code solution program "my program" "my solution" "my code" "the program" "the solution" "the code")
topic: ~testing keep repeat [test testing coverage]

# =============================================================================
# This topic contains help for testing.
# =============================================================================


t: Testing is fun, right? Well, I like it. 
	a: (["me too" same ~yes])
	That's great. Feel free to ask me questions, though, if you do need some help.
	
	a: ([~no "i hate it" "not me"])
	Haha, well if you're ever sad about testing, just think about how much testing my creators had to do! I do not envy them....

	
#! how do i test my code
u: HOW_TEST (how * test ~turnin)
Testing is a tricky process. To start, you should have one test class for each regular class you have and at least one test method for each regular method you have.


#! how do i make tests for my code
#! how to i write tests
#! how can i make tests for my solution
u: (how * [write make] tests * ~turnin)
^reuse(HOW_TEST)


#! what do i name my test class
#! how do i name my test class
u: ([how what] * name * test class)
If your normal class is called <code>SomeClass</code>, you should name your test class <code>SomeClassTest</code>. Make sure the word "Test" is at the end.
<ul id="choices">
<li>How do I create a test class?</li>
<ul>
	#! How do I create a test class?
	a: (how * [make create] * test class)
	^reuse(CREATE_TEST_CLASS)


#! how to make a test class
#! how do i create a test class
u: CREATE_TEST_CLASS (how * [make create] * test class)
If you're using Greenfoot, simply right-click on on the class you want to make a test class for and click on the option that says "Create test class". Otherwise simply create a new class. Make sure to import all of the necessary things.


#! how to write a test method
#! how do i make a test method
#! how do i test a method
#! how to create a test method
u: (how * [write create make] * test method)
First, go to your test class. Then make a new method that looks like this:
<div class="mlcode">
public void testMethod() {
nbsp;   //Part 1: Set up a situation to test.
nbsp;   //Part 2: Call the method you are testing.
nbsp;   //Part 3: Make assertions about what should happen.
}
</div>
<ul id="choices">
<li>Ok, go on.</li>
</ul>
	a: (~yes)
	Great, now that you've got that done, you'll want to look at the method you're testing. Pick one situation that you want to test. For example, this is the method I'm testing:
	<div class="mlcode">
	public void method(boolean go, Jerro jeroo) {
	nbsp;   \if (jeroo.getGridX() == 2) {
	nbsp;       jeroo.hop();
	nbsp;   }
	}
	</div>
	This method has two situations to test: when the Jeroo hops and when it doesn't.
	</div>
	<ul id="choices">
	<li>Ok, go on.</li>
	</ul>
		b: (~yes)
		First let's test a situation when the Jeroo will hop. For the Jeroo to hop, its x-coordinate must be 2. So, let's make that happen. In the test, we want our Jeroo to be at x = 2. In order for it to be anywhere, we need to create it.
		<div class="mlcode">
		public void testMethod() {
		nbsp;   //Part 1: Set up a situation to test.
		nbsp;   Jerro jeroo = new Jeroo();
		nbsp;   //Part 2: Call the method you are testing.
		nbsp;   //Part 3: Make assertions about what should happen.
		}
		</div>
		<ul id="choices">
		<li>Ok, go on.</li>
		</ul>
			c: (~yes)
			Next, we need to create a world for this Jeroo live in. We'll also add him to the world.
			<div class="mlcode">
			public void testMethod() {
			nbsp;   //Part 1: Set up a situation to test.
			nbsp;   Jerro jeroo = new Jeroo();
			nbsp;   World world = new World();
			nbsp;   //Part 2: Call the method you are testing.
			nbsp;   //Part 3: Make assertions about what should happen.
			}
			</div>
			<ul id="choices">
			<li>Ok, go on.</li>
			</ul>


u: (how * test * if)
\<code>if</code> statements are the trickiest things to test, especially if they have a lot of conditions. The important thing to remember is that you need every condition in the <code>if</code> statement to be the "decider" or the thing that causes the whole <code>if</code> statement to be true or false. When you're dealing with ands, each condition must be false while the rest are true for it to be the "decider" because, one false condition can make the whole <code>if</code> statement false when you're dealing with ands. When you're dealing with ors, you want each condition to be true while the rest are false, because a single true condition can make an <code>if</code> statement true when you're dealing with ors. This is where the N part of Web-CAT's N+1 possibilities comes from. Then, in addition to that, you need the +1. This is the case where no single condition is the decider. When using ands, it's when the whole <code>if</code> statement is true and when using ors, it's when the whole <code>if</code> statement is false.
<p>Would you like an example?

	a: (~yes)
	Ok so suppose you have this ugly <code>if</code> statement to test:
<pre>if (int1 == 2 && int2 < 5 && str1.equals("foo"))
{
	//Do some action.
}
</pre>
	<p>There are 3 conditions so, to fully test this, you need 3+1 = 4 tests.
	<p>Lets start with the +1 test. This is easy. Because its a bunch of ands, the +1 test is one where the whole <code>if</code> statement is true. So, we want to make sure int1 is 2, int2 is 3, and str1 is "foo". All the conditions will be true and the "some action" will be done.
	<p>Next, we need to handle the 3 cases. Our first one will be where the first condition is the "decider". So, we want int1 to not be  2, but int2 to be less than 5 and str1 to be "foo". Remember, we want the first condition to be false, but the rest to be true. Then, we want a test where the second condition is the "decider." So, int1 must be 2 and str1 is "foo", but int2 is 6. Then, we want the last condition to be the decider. So, we can make int1 be 2 and int2 be 3, but str1 needs to "not foo".
	
	a: (~no)
	Fair enough.

u: (how * test * for)
Testing a <code>for</code> loop is very simple. Just make a test where the <code>for</code> loop runs any number of times.

u: (how * test * while)
Testing a <code>while</code> loop is fairly simple. You want to have one test where the loop runs any number of times and one test where it doesn't run at all (the loop is skipped).

u: (how * test)
Make sure to test all <code>if</code> statements, <code>while</code> loops, and <code>for</code> loops. Basically, whenever a decision is made in your code, you need to test to see what happens if that decision is made or not. If you don't have any decisions, you still need to make one test: a test that makes sure whatever was supposed to happen does actually happen.