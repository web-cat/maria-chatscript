# =============================================================================
# This topic contains explanations for every Java compile-time exception. It
#  is mainly used by explain links. Most of these were auto-generated.
# =============================================================================
topic: ~compiletime_exceptions keep repeat [how when why get what exception error]

u: PAREN_EXPECTED (parenexpected) 
<!-- macro JDisplay errormessages.paren1.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// oops missing \[ \] in attempt to define an array literal</span>
<span class="k">new </span><span class="class">String </span><span class="fence1"> \{</span> <span class="string">"x"</span><span class="op">, </span><span class="string">"y"</span> <span class="fence1"> \}</span><span class="sc">;</span></pre><!-- /generated by JDisplay -->
instead <!-- macro JDisplay errormessages.paren2.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// how to create string array literal</span>
<span class="k">new </span><span class="class">String</span><span class="fence1"> \[</span><span class="fence1"> \]</span> <span class="fence1"> \{</span> <span class="string">"x"</span><span class="op">, </span><span class="string">"y"</span> <span class="fence1"> \}</span><span class="sc">;</span></pre><!-- /generated by JDisplay -->
See <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/balancing.html">balancing</a>.

u: ( ["(" parentheses parenthesis] expected )
^reuse(PAREN_EXPECTED)

u: DOT_EXPECTED (dotexpected) 
You must import either a <span class="package">packagename.*</span> or <span class="package">packagename</span>.
<span class="class">Classname</span>. You can’t just <span class="k">import</span> <span class="package">packagename</span> or
<span class="k">import</span> <span class="class">Classname</span>. You
don’t import classes in the same package as the current class. In other
words, the thing you import will always contain at least one <span class="charliteral">.</span>. You don’t use <span class="k">import</span>
for code not in any package. You have to put such classes on the classpath.
Whenever you have more than one class, it is a good idea to assign every class
to an explicit package with a <span class="k">package</span> statement.
In summary, you import fully qualified classes, with package and classname
separated by a dot. You don’t import classes without packages.

u: (["." dot period] expected) 
^reuse(DOT_EXPECTED)

u: DOT_CLASS_EXPECTED (dotclassexpected) 
You wrote <span class="k">int</span> <span class="var">i</span> where you meant just plain <span class="var">i</span>.

u: ([".class" "dot class"] expected)
^reuse(DOT_CLASS_EXPECTED)

u: SEMICOLON_EXPECTED (semicolonexpected) 
\<ul><li>Usually this is just a missing semicolon,</li>
<li>sometimes it can be caused by <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/balancing.html">unbalanced</a> \(\) on the previous line.</li>
<li>sometimes it can be cause by junk on the previous line. This junk might
be far to the right off the screen.</li>
<li>Sometimes it is caused by spelling the keyword <span class="k">if</span> incorrectly nearby.</li>
<li>Sometimes it is a missing <span class="op">+</span> concatenation
operator. C programmers often make this one on multi-line Strings since the
concatenation operator is implied in C.</li></ul>

u: ([";" semicolon "semi colon"] expected) 
^reuse(SEMICOLON_EXPECTED)

u: EQUALS_EXPECTED (equalexpected) 
Look for a <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/balancing.html">stray \}</a> just before
where it is complaining.

u: (["=" equals "equals sign" equal] expected)
^reuse(EQUALS_EXPECTED)

u: BRACKET_EXPECTED (bracketexpected)
Likely you wrote \[ i,j \] instead of \[ i \]\[ j \].

u: ([\[ bracket brace] expected) 
^reuse(BRACKET_EXPECTED)

u: ALREADY_DEFINED (alreadydefined) 
You tried to define a variable with the same name twice. Make sure you don't have two variables with the same name.

u: (already defined)
^reuse(ALREADY_DEFINED)

u: AMBIGUOUS (ambiguous) 
<!-- macro JDisplay errormessages.ambiguousclassimport.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// Ambiguous Class import.</span>
<span class="commentslashslash">// If you were to use SomeClass, which one did you mean?</span>
<span class="k">import </span><span class="package">x</span><span class="op">.</span><span class="package">y</span><span class="op">.</span><span class="class">SomeClass</span><span class="sc">;</span>
<span class="k">import </span><span class="package">a</span><span class="op">.</span><span class="package">b</span><span class="op">.</span><span class="class">SomeClass</span><span class="sc">;</span></pre><!-- /generated by JDisplay -->
can 
<!-- macro JDisplay errormessages.unambiguousclassimport.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// Ambiguous Class import for x.y.SomeClass and a.b.SomeClass</span>
<span class="commentslashslash">// but the compiler won't mind unless you actually use SomeClass.</span>
<span class="k">import </span><span class="package">x</span><span class="op">.</span><span class="package">y</span><span class="op">.*</span><span class="sc">;</span>
<span class="k">import </span><span class="package">a</span><span class="op">.</span><span class="package">b</span><span class="op">.*</span><span class="sc">;</span></pre><!-- /generated by JDisplay -->
Some compilers may complain about the clash in SomeClass, even if you never
reference it. And, of course, all references to <span class="class">SomeClass</span> should be disambiguated to either <span class="package">x.y.</span><span class="class">SomeClass</span> or <span class="package">a.b.</span><span class="class">SomeClass</span>. Alternatively, you
can throw out all the imports and fully qualify all classes in x.y and a.b.
This approach makes code easier to maintain because it is easier to find the
code that implements the class when it is fully qualified. In your own
classes, try to use globally unique class names. Even if the computer
understands the ambiguity, humans often become confused.
<div class="see"><a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/import.html">import</a></div>

u: (ambiguous class)
^reuse(AMBIGUOUS)

u: ARRAY_NOT_INTIALIZED ([arraynotinitialised arraynotinitialized]) 
You forgot to initialize an array with <span class="k">new int</span> \[ 5 \].

u: (array * not * [initialised initialized])
^reuse(ARRAY_NOT_INTIALIZED)

u: ATTEMPT_TO_REFERENCE (attemptoreference) 
You're missing the parentheses after a method name.

u: (attempt to reference)
^reuse(ATTEMPT_TO_REFERENCE)

u: ATTEMPT_TO_RENAME (attemptorename) 
Your jar is in use by some running Applet or application. Shut it down to build and sign the jar.

u: (attempt to rename)
^reuse(ATTEMPT_TO_RENAME)

u: BAD_CLASS_FILE (badclassfile) Check that the package statement and the class statement have
names that are precisely correct including case and that this file is in a
directory that precisely matches the package name and the source file name that
precisely matches the class name followed by <span class="ext">.java</span>.

u: (bad class file)
^reuse(BAD_CLASS_FILE)

u: BLANK_FINAL (blankfinal) 
Check that your <span class="k">final</span> variable is
indeed so initialized (you give it a starting value). If it is, remove the <span class="k">final</span>,
to bypass a bug in the Javac 1.1 compiler.

u: (blank final)
^reuse(BLANK_FINAL)

u: BOOLEAN_DEREFERENCED (booleandereferenced) 
You need an extra layers of parentheses around your casting.

u: (boolean dereferenced)
^reuse(BOOLEAN_DEREFERENCED)

u: BOUND_MISMATCH (boundmismatch) 
You forget to implement <span class="interface">Comparable</span> on the class X you are sorting.

u: (bound mismatch)
^reuse(BOUND_MISMATCH)

u: CANT_ACCESS_CLASS (cantaccessclass) 
\<ul><li>You forgot to make the class <span class="k">public</span>.</li>
<li>In JBuilder, check the properties for your project. Your root
directories should be plain <span class="file">C:\</span> not
<!-- macro Path \{J&colon;\com\mindprod\thepackage\ \} --><!-- generated --><span class="path"><span class="drive">J&colon;</span>\<span class="dir">com</span>\<span class="dir">mindprod</span>\<span class="dir">thepackage</span>\</span><!-- /generated by Path --></li></ul>

u: (can’t access class)
^reuse(CANT_ACCESS_CLASS)

u: CANT_BE_APPLIED (cantbeapplied) 
You wrote <span class="var">x</span>.<span class="method">setVisible \(\)</span>
instead of <span class="var">x</span>. <span class="method">setVisible \(
<span class="k">true</span> \)</span>, or similar parameter mismatch.
Check the types of parameters and arguments for an exact match. Whenever you
see <span class="quoted">cannot be applied</span> check the Javadoc to make
sure the signature of the method you are calling matches the types of the
arguments. The problem often is you are sure a method must logically have to
exist that does not.
<blockquote class="atheist">It ain’t what you don’t know that gets you into trouble.
It’s what you know for sure that just ain’t so.<br/>
~ <span class="said">Mark Twain</span>
<!-- macro Born 1835-11-30 1910-04-21 --><!-- generated --><span class="unobtrusive"> \(<span class="birthdate">1835-11-30</span> <span class="deathdate">1910-04-21</span> age:<span class="age">74</span> \)</span><!-- /generated by Born --></blockquote>

u: (can not be applied)
^reuse(CANT_BE_APPLIED)

u: CANT_BE_DEREFERENCED (cantbedereferenced) 
You need extra layers of parentheses around your casting. or
perhaps you may have written something like <span class="java">i.toString \(\)</span> where i is an <span class="k">int</span>
rather than an object with methods. You need to write something like 
<!-- macro Qualified Integer.toString class --><!-- generated --><span class="qualified"><span class="class">Integer</span>.<span class="method">toString</span></span><!-- /generated by Qualified --> \( <span class="var">i</span> \) instead. <span class="k">int</span>s can’t have any
instance methods. They can be parameters to either static or instance methods
though.

u: (can’t be dereferenced)
^reuse(CANT_BE_DEREFERENCED)

u: CANT_BE_INSTANTIATED (cantbeinstantiated) 
You are missing the default constructor for your Applet. See <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/gotchas.html#CONSTRUCTORS">The Case of the Disappearing
Constructors</a>.

u: (can’t be instantiated) 
^reuse(CANT_BE_INSTANTIATED)

u: CANT_CONVERT (cantconvert) 
This error often comes up in the context of the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/clone.html">clone</a> method which, without covariance, returns an
<span class="interface">Object</span> reference not the specific type of the
<span class="interface">Object</span> cloned as you might
<!-- macro Spell naively --><!-- generated -->naïvely<!-- /generated by Spell -->
expect. You tried to use a general <span class="interface">Object</span>
reference in a context that requires something more specific. Sometimes all
you need is a cast.

u: (can’t convert from object to)
^reuse(CANT_CONVERT)

u: CANT_DETERMINE_APPLICATION_HOME (cantdetermineapplicationhome) 
Uninstall all Java <!-- macro Acronym JDKs --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/jdk.html">JDKs</a> \(<span class="means"><span class="ac">J</span>ava <span class="ac">D</span>evelopment <span class="ac">K</span>its</span> \)<!-- /generated by Acronym --> and
<!-- macro Acronym JREs --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/jre.html">JREs</a> \(<span class="means"><span class="ac">J</span>ava <span class="ac">R</span>untime <span class="ac">E</span>nvironments</span> \)<!-- /generated by Acronym -->
with the Control Panel. Use Microsoft’s RegClean. Tidy up the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/registry.html">registry</a> with <span class="exe">regedit</span>. Reinstall just the latest <!-- macro Acronym JDK --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/jdk.html">JDK</a> \(<span class="means"><span class="ac">J</span>ava <span class="ac">D</span>evelopment <span class="ac">K</span>it</span> \)<!-- /generated by Acronym -->.

u: (can’t determine application home) 
^reuse(CANT_DETERMINE_APPLICATION_HOME)

u: CANNOT_FIND_SYMBOL (cannotfindsymbol) 
You used a variable name you did not define. Perhaps you forgot the
declaration. Perhaps you declared it inside a block/loop and you tried to use
it outside the block/loop. You must move the declaration to an encompassing
outer block that encloses all the references. Perhaps you spelled the
variable slightly differently in declaration and reference. Watch your caps
and double letters carefully. Perhaps you left out or mistyped the
corresponding <span class="k">import</span> or <span class="k">static import</span>.
<p><span class="quoted">Cannot find symbol constructor <var>XXX</var></span>,
means you likely you did an explicit <var>XXX</var> \(\) to call the superclass
constructor first thing in your constructor instead of using <span class="k">super \(\)</span>.</p>
<p><span class="quoted">Cannot find symbol method <var>XXX</var></span>,
where <var>XXX</var> is your class’s superclass constructor means you
likely you did an explicit <var>XXX</var> \(\) to call the superclass
constructor first thing in your constructor instead of using <span class="k">super \(\)</span>.</p>
<p>Possible causes of the error for constructors and methods:</p>
<ul><li>Wrong syntax for calling: constructor: <span class="k">new</span>
<span class="class">X</span> \(\), instance: <span class="var">x</span>.
<span class="method">someMethod</span> \(\), static:
<!-- macro Qualified SomeClass.someMethod class --><!-- generated --><span class="qualified"><span class="class">SomeClass</span>.<span class="method">someMethod</span></span><!-- /generated by Qualified -->
 \(\).</li>
<li>The method you want is <span class="k">protected</span> or
<span class="k">private</span>.</li>
<li>You left out a parm.</li>
<li>You added an extra parm.</li>
<li>You have the parms in the wrong order.</li>
<li>You have the type of a parm wrong, e.g. it wants a <span class="class">File</span>, but you gave it a String.</li>
<li>Symbols are case-sensitive. You have a mismatch.</li>
<li>Confused package. <span class="exe">Javac.exe</span> is looking in the
wrong package or class, e.g. <span class="package">java.util</span>.<span class="interface">List</span> vs
<!-- macro Qualified java.awt.List class --><!-- generated --><span class="qualified"><span class="package">java</span>.<span class="package">awt</span>.<span class="class">List</span></span><!-- /generated by Qualified --><!-- macro Qualified \{awt.List \} --><!-- generated --><span class="qualified"><span class="package">awt</span>.<span class="class">List</span></span><!-- /generated by Qualified -->. Use fully qualified references to rule
that out.</li>
<li>The referenced class did not compile because it has a syntax
error.</li>
<li>The needed class/jar files are not on the classpath.</li>
<li>Cannot find symbol method <span class="method">sort</span> \(<span class="package">java.util</span>.<span class="class">ArrayList</span>&lt;Xxx&gt; \)
could mean you have not implemented <span class="interface">Comparator</span> on the class you are trying to sort.</li>
<li>There is some other syntax error, than the compiler interprets its
strange way as an undefined symbol.</li></ul>Using the <span class="bat">-verbose</span> option on <span class="exe">javac.exe</span> will give you hints to help resolve this error.

u: (can not find symbol)
^reuse(CANNOT_FIND_SYMBOL)

u: CANT_INSTANTIATE_ABSTRACT (cantinstantiateabstract) 
You're missing a method to fulfill an interface implementation. Make sure all interface and abstract methods are implemented.

u: (can’t instantiate abstract class)
^reuse(CANT_INSTANTIATE_ABSTRACT)

u: CANT_MAKE_STATIC_REF (cantmakestaticref)
Using an instance variable in a static method. Only static variables can be used in static methods.

u: (can’t make static reference)
^reuse(CANT_MAKE_STATIC_REF)

u: CANT_OVERRIDE([cantoveride cantoverride]) 
You can override a default or protected method with a
<span class="k">public</span> one, but not the reverse.

u: (can not override)
^reuse(CANT_OVERRIDE)

u: CANT_OVERRIDE_2 (cantoveride2) 
Overridden methods cannot add any throws clauses not in the
base method they are overriding.

u: (can not override)
^reuse(CANT_OVERRIDE_2)

u: CANT_OVERRIDE_3 (cantoveride3) 
When you override an existing method, you must use exactly the
same method signature including return type. Perhaps you did not realise you
were overriding a method. In <!-- macro Java 1.5+ --><!-- generated -->Java version <span class="version">1.5</span> or later<!-- /generated by Java -->,
you may return a subclass of the base return type.

u: (can not override)
^reuse(CANT_OVERRIDE_3)

u: CANNOT_RESOLVE_CONSTRUCTOR (cannotresolveconstructor) 
If a subclasses constructor does not call one of the constructors of the
superclass as the very first thing, java inserts a call to the default
constructor for you <span class="java">super \(\)</span>. If you have not
defined that null constructor, you will get an error. The usual way to fix it
is by inserting some sort of <span class="java">super \( parm \);</span> as the
first statement of your subclass constructor.

u: (can not resolve constructor)
^reuse(CANNOT_RESOLVE_CONSTRUCTOR)

u: CANNOT_RESOLVE_SYMBOL (cannotresolvesymbol) 
\<ul><li>No such variable or method. Perhaps it exists, but not in the current
<a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/scope.html">scope</a>, e.g. you are trying to use a
variable defined inside a loop outside that loop.</li>
<li>Possibly you are trying to use a constructor without <span class="k">new</span> as if it were an ordinary method.</li>
<li>You left off the \(\) on your method call.</li>
<li>If the error message is pointing to code that uses the standard
classes, chances are you either misspelled it, or forgot to import the
class, or misspelled the import. If it is pointing to one of your methods
or variables chances are you misspelled it either in the definition or
reference. Java is picky. You must get upper-lower case precisely correct
too.</li>
<li>If the code is pointing to one of your classes that is clearly there,
perhaps you forgot to put C&colon;\ on the classpath — the mother of all
packages where com is in <span class="package">com.mindprod.thispackage</span> lives. If you are not using
packages, perhaps you forgot to put. on your classpath. A symptom of this
is you can compile successfully if you rebuild everything, but not if you
just recompile the changed modules.</li>
<li>You are using a method of the object when the reference is to an
interface that does not contain that method. Either cast to specific
object, or change the reference to a specific object reference, e. g.
<!-- macro JDisplay errormessages.example2.javafrag --><!-- generated --><iframe class="jdisplay" height="375" src="snippet/iframe/errormessages.example2.javafrag.htm" width="563"></iframe><!-- /generated by JDisplay -->
<span class="method">addNever</span> is a method of <span class="class">MultiFilter</span>, but not of <span class="interface">FileNameFilter</span>.</li>
<li>Watch for subtle spelling differences between declaration and
reference, e.g. <span class="class">Hashtable</span> and <span class="class">HashTable</span>. Copy/paste the definition on top of the reference
to be sure they are absolutely identical. Your eyes can fool you.</li>
<li>In an <span class="k">implements</span> clause, you may have used
a period where you should have used a comma.</li>
<li>If is complaining about the superclass of your constructor, the problem
is you must either explicitly call <span class="k">super \(\)</span>, or
there must be a superclass constructor with a matching signature.</li></ul>

u: (can not resolve symbol)
^reuse(CANNOT_RESOLVE_SYMBOL)

u: CANNOT_RESOLVE_THREAD_CONTRUCTOR (cannotresolvethreadconstructor) 
You forgot to write <span class="k">implements</span>
<span class="interface">Runnable</span> on the class with the <span class="method">run</span> method.

u: (can not resolve symbol constructor thread) 
^reuse(CANNOT_RESOLVE_THREAD_CONTRUCTOR)

u: CANNOT_RESOLVE_THIS (cannotresolvethis) 
You are inside an anonymous inner class and <var>xxx</var> is a
member or method of the enclosing class. You must use <span class="class">Outer</span>. <span class="k">this</span>. <span class="method"><var>xxx</var></span> instead of <span class="k">this</span>.<span class="method"><var>xxx</var></span>.

u: (can not resolve symbol this)
^reuse(CANNOT_RESOLVE_THIS)

u: CANNOT_USE_NEW (cannotusenew) 
You can’t instantiate references, class names as Strings,
interfaces or abstract classes, only concrete class names. Perhaps there is no
suitable constructor. Perhaps you inadvertently wrote methods instead of
constructors by specifying a return type on them.

u: (can not use operator new)
^reuse(CANNOT_USE_NEW)

u: CANT_DELETE_JAR (cantdeletejar) 
You are running the application from the old jar. Shut it down before rebuilding.

u: (can’t delete jar file) 
^reuse(CANT_DELETE_JAR)

u: CHAR_CANNOT_BE_DEREFERENCED (charcannotbedereferenced) 
You have tried to use a <span class="class">String</span> or
other <span class="interface">Object</span> method on a <span class="k">char</span> or <span class="k">char \[\]</span> which have no instance methods.

u: (char can not be dereferenced)
^reuse(CHAR_CANNOT_BE_DEREFERENCED)

u: CLASHES_WITH_PACKAGE (clasheswithpackage) 
Rename your class or rename your package so they don’t
have the same name. Usually this is not a problem since package names normally
have dots in them.

u: (clashes with package)
^reuse(CLASHES_WITH_PACKAGE)

u: CLASS_HAS_WRONG_VERSION (classhaswrongversion) 
You are compiling with the <!-- macro Java 1.4 --><!-- generated -->Java version <span class="version">1.4</span><!-- /generated by Java -->
compiler, referencing class files compiled with the newer 
<!-- macro Java 1.5 --><!-- generated -->Java version <span class="version">1.5</span><!-- /generated by Java --> compiler. The referenced class
files must be recompiled with 1.4 to make them compatible with the old Java.
Alternatively, you must use <!-- macro Acronym JDK --><!-- generated --><span class="acronym"><abbr title="Java Development Kit">JDK</abbr></span><!-- /generated by Acronym -->
<span class="version">1.5</span> for everything.

u: (class has wrong version) 
^reuse(CLASS_HAS_WRONG_VERSION)

u: MUST_BE_DEFINED_IN_A_FILE (mustbedefinedinafile) 
\<ul><li>class name does not match source filename.</li>
<li>Putting more than one <span class="k">public</span> class per file.</li>
<li>Getting the capitalisation wrong in the filename on the javac command
line or in the filename itself.</li></ul>

u: (class must be defined in a file)
^reuse(MUST_BE_DEFINED_IN_A_FILE)

u: CLASS_NAMES_ONLY_ACCEPTED (classnamesonlyaccepted) 
\<p>There is nothing wrong with the text of your program; the problem is in
how you tried to compile it. You left off the <span class="ext">*.java</span>
extension when compiling with <span class="exe">javac.exe</span>, e.g. at the
command line you typed:</p>
<div><div class="bat">javac.exe MyClass</div>
<p>instead of:</p>
<div class="bat">javac.exe MyClass.java</div>
<div class="onion">This is one of the most maliciously misleading of all error messages.</div></div>

u: (class names only accepted for annotation processing)
^reuse(CLASS_NAMES_ONLY_ACCEPTED)

u: CLASS_NAMES_UNCHECKED (classnamesunchkcdkd) 
For Netbeans, uncheck the project’s property entitled
<em>Enable Annotation Processing in Editor</em>, leaving all others checked on
that page and clean and build the project.

u: (class names unchecked only accepted for annotation processing)
^reuse(CLASS_NAMES_UNCHECKED)

u: CLASS_NOT_FOUND (classnotfound) 
This can occur at compile or run time.
<ul><li>You are using <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/ie.html">Internet Explorer</a>
which has a defective or missing Java.</li>
<li>Some other syntax error ahead of the class declaration is preventing
the compiler from seeing the class declaration.</li>
<li>The class is not in the proper file in the proper directory.</li>
<li>The class is not <span class="k">public</span>.</li>
<li>The class does not have the correct case, either in the class name or
the file name.</li>
<li>The corresponding class or java file is not on the<span class="setvar">CLASSPATH</span> \( considering the package name. \)</li></ul>

u: (class not found)
^reuse(CLASS_NOT_FOUND)

u: CLASS_NOT_FOUND_IN_IMPORT (classnotfoundinimport) 
All class files and packages you reference in import statements must be
accessible via the <span class="setvar">CLASSPATH</span>, or be part of the
project or live in the <span class="dir">ext</span> directory. You must
import a class, not a package, e.g. <span class="k">import</span>
<!-- macro Qualified java.io.File class --><!-- generated --><span class="qualified"><span class="package">java</span>.<span class="package">io</span>.<span class="class">File</span></span><!-- /generated by Qualified -->
; not <span class="k">import</span> <span class="package">java.io</span>; You can import all the classes in a package with:
<span class="k">import</span> <span class="package">java.io</span>.
<span class="class">*</span>; It is easiest to use an
<!-- macro Acronym IDE --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/ide.html">IDE</a> \(<span class="means"><span class="ac">I</span>ntegrated <span class="ac">D</span>evelopment <span class="ac">E</span>nvironment</span> \)<!-- /generated by Acronym -->
like <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/intellij.html">IntelliJ</a> that inserts and
prunes the imports for you. Also remember that package and class names are
case-sensitive.

u: (class not found in import)
^reuse(CLASS_NOT_FOUND_IN_IMPORT)

u: CLASS_NOT_FOUND_IN_TYPEDEF (classnotfoundintypedef) 
You forgot to <span class="java">import java.awt.event.*</span>
or to fully qualify <span class="class">java.awt.event.WindowAdapter</span>.
I’m sure you can generalise for other classes.

u: (class not found in type declaration)
^reuse(CLASS_NOT_FOUND_IN_TYPEDEF)

u: CLASS_PLAIN_EXPECTED (classplainexpected) 
It is not expecting the keyword <span class="k">class</span>, but rather the name of a class. You might have written
something like <span class="k">long</span>.<span class="constant">MAX_VALUE</span> instead of <span class="class">Long</span>.<span class="constant">MAX_VALUE</span>.

u: (class expected) 
^reuse(CLASS_PLAIN_EXPECTED)

u: CLASS_DEC_EXPECTED (classdclexpected) 
\<ul><li>Put your <span class="k">package</span> statement before all the
<span class="k">import</span>s. The <span class="k">import</span>s come before your class declarations.</li>
<li>Make your class <span class="k">public</span>, not <span class="k">protected</span>.</li>
<li>You may have <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/balancing.html">too many \}</a> so
that you have finished off your class before you intended too. Using a
source code <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/beautifier.html">beautifier</a> that
aligns code block and \{\} will help make these sorts of errors obvious.</li></ul>

u: ([class interface enum] declaration expected)
^reuse(CLASS_DEC_EXPECTED)

u: CLASS_EXPECTED (classexpected) 
There is a missing <span class="op"> \{</span> somewhere
much earlier in the code. <span class="k">class</span> and <span class="k">interface</span> must be all lower case. Another way of looking at
it, you method and variable definitions come after <span class="k">class</span>, not <span class="k">package</span>.

u: (class, enum or interface expected)
^reuse(CLASS_EXPECTED)

u: CLASS_SHOULD_BE_DECLARED (classshouldbedcled) 
The name of the *.java file must precisely match the name of
the <span class="k">public</span> class it defines. The name is
case-sensitive.

u: (class should be declared in file)
^reuse(CLASS_SHOULD_BE_DECLARED)

u: CLASS_NAME_NOT_ENCLOSING (classnamenotenclosing) 
\<ul><li>You are attempting to instantiate a non-static named inner class
without an instantiated the outer class. Solution: declare the named inner
class as <span class="k">static</span> or instantiate your inner
class like this as described under <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/nestedclasses.html#INSTANTIATING">nested classes</a>.</li>
<li>You used an expression like <span class="class">JApplet</span>.<span class="k">this</span> in an inner class.
You must specify the precise name of the enclosing class, e.g. <span class="class">MyApplet</span>. <span class="method">this</span> not one of its
superclasses. If you wanted a superclass reference you would have to use
\(<span class="class">JApplet</span> \) <span class="class">MyApplet</span>.
<span class="k">this</span>.</li></ul>

u: (classname not enclosing class)
^reuse(CLASS_NAME_NOT_ENCLOSING)

u: COMPARABLE (comparable) 
\<!-- macro JDisplay comparablebase.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// base class</span>
<span class="ik">class </span><span class="classdef">SalesTaxItem </span><span class="k">implements </span><span class="interface">Comparable</span><span class="op">&lt;</span><span class="class">SalesTaxItem</span><span class="op">&gt;</span>
<span class="fence1"> \{</span>
<span class="op">...</span>
<span class="fence1"> \}</span></pre><!-- /generated by JDisplay -->
<!-- macro JDisplay comparableext.javafrag --><!-- generated --><iframe class="jdisplay" height="139" src="snippet/iframe/comparableext.javafrag.htm" style="overflow:scroll" width="800"></iframe><!-- /generated by JDisplay -->
<p>The best way I know of to bypass the problem is to write both classes
without the <span class="k">implements</span> <span class="interface">Comparable</span>. Then write two <span class="interface">Comparator</span>s instead.</p>

u: (comparable can not be inherited)
^reuse(COMPARABLE)

u: DUP_CLASS (duplicateclass) 
You misspelled the package name on the package statement. It
must match the name of the directory containing the Java source.

u: (duplicate class)
^reuse(DUP_CLASS)

u: DUP_METHODS (duplicatemethods) 
You have two methods with the same name and the same signature
i.e. number and types of parameters. You can’t have two methods that
differ only in return type.

u: (duplicate methods)
^reuse(DUP_METHODS)

u: ENUM_AS_IDENTIFIER (enumasidentifier) 
Starting with <!-- macro Java 1.5 --><!-- generated -->Java version <span class="version">1.5</span><!-- /generated by Java -->,
<span class="k">enum</span> became a reserved keyword. Older programs
may have used the word <span class="k">enum</span> as a variable, method
or package name. You will have to globally rename <span class="k">enum</span> to some other identifier, or convert the code to use the
new built-in <span class="k">enum</span> features.

u: (enum as identifier)
^reuse(ENUM_AS_IDENTIFIER)

u: WRITING (writing) 
You used the <span class="exe">javac.exe</span> <span class="parm">-d</span> option. The compiler is trying to write the generated class
files to this directory, but it cannot, probably because it does not exist. The
compiler wants to create a tree of package names in that directory. You may
have it blocked by files of the same name as the packages. Use lower case for
all package names and directories.

u: (error while writing)
^reuse(WRITING)

u: EXCEPTION_NEVER_THROWN (exceptionneverthrown) 
You are trying to catch an exception that could never happen.
Just remove the try/catch. Java does not like you trying to catch an exception
that could never happen, but oddly it does not mind you declaring a throws that
could never happen.

u: (exception never thrown)
^reuse(EXCEPTION_NEVER_THROWN)

u: FINAL_PARAM (finalparameter) 
The wording is ambiguous. You might think it means the
parameter might, under some circumstances, escape being assigned. That is not
what it means.

u: (final parameter xxx may not be assigned) 
^reuse(FINAL_PARAM)

u: GENERIC_ARRAY (genericarray) 
\<p>You might have written <span class="k">new</span> <span class="class">ArrayList</span> &lt;<span class="class">String</span>&gt; \[ 100 \] instead of <span class="k">new</span>
<span class="class">ArrayList</span>&lt; <span class="class">String</span>&gt; \( <span class="numeric">100</span> \);</p>
<p>To be charitable, Java’s generics are Mickey Mouse. One of the side
effects of the el-cheapo implementation is that you can’t have arrays
of generic collections, e. g. the following is illegal</p>
<!-- macro JDisplay errormessages.genericarray.javafrag --><!-- generated --><iframe class="jdisplay" height="162" src="snippet/iframe/errormessages.genericarray.javafrag.htm" style="overflow:scroll" width="800"></iframe><!-- /generated by JDisplay -->

u: (generic array creation) 
^reuse(GENERIC_ARRAY)

u: IDENTIFIER_EXPECTED (identifierexpected) 
Look for a missing \{ slightly before of where it is complaining. It may also
be a <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/balancing.html"> \} before the code</a> that
should appear after. It can also be caused by attempting to define a
constructor in an <span class="k">interface</span>. Perhaps you wrote
some initialisation code without enclosing it in <span class="k">static</span> <span class="op"> \{\}</span> or plain
<span class="op"> \{\}</span>. Method calls must be inside methods or init
blocks, not just lying loose in amongst the field declarations.

u: (identifier expected)
^reuse(IDENTIFIER_EXPECTED)

u: ILLEGAL_CHAR (illegalcharacter) 
You used Unicode 8220 \(aka \u291c, 0x291c, “, left quote \)
or 8821 \(aka \u291d, 0x291d, ”, right quote \) instead of a simple 34 \(aka
\u0022, 0x22, \" \) that Java requires. This probably resulted from using a
word processor like MS Word instead of a text processor or
<!-- macro Acronym IDE --><!-- generated --><span class="acronym"><abbr title="Integrated Development Environment">IDE</abbr></span><!-- /generated by Acronym -->
to compose your Java source which converts "s into <span class="quoted">and</span> .

u: (illegal character)
^reuse(ILLEGAL_CHAR)

u: ILLEGAL_ESCAPE (illegalescape) 
Mostly likely you forget to double each <span class="string">\</span> in a
filename <span class="class">String</span>, e. g. you should write
<span class="string"><span class="quoted">C:\\temp\\somefile.txt</span></span> not <span class="string"><span class="quoted">C:\temp\somefile.txt</span></span>. Backslash
<span class="string">\</span> has special meaning inside <span class="class">String</span>s, e. g. <span class="string">\n</span> means newline,
<span class="string">\t</span> means tab, <span class="string">\"</span>
means embedded ". <span class="string">\\</span> means a single
<span class="string">\</span>. If you used <span class="string">\</span>
followed by a letter without special meaning, you will get this error
message.
<div class="see"><a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/literal.html#LITERALS">literals</a></div>

u: (illegal escape)
^reuse(ILLEGAL_ESCAPE)

u: ILLEGAL_FORWARD (illegalforward) 
\<p>Java computes its <span class="k">static</span> initialisation in a
simplistic top to bottom way. It is not clever, in using natural order like a
spreadsheet. Any value you reference must be defined lexically earlier in the
class. This holds both for the order of initialisations and for the order of
assignments in a <span class="k">static</span> init or instance init
block.</p>
<ul><li>You may not reference an <span class="k">enum</span> constant
that has not yet been defined. e.g. you cannot reference other <span class="k">enum</span> constants in an <span class="k">enum</span>
constructor call.</li>
<li>You must declare <span class="k">static final</span>s before you
define them in a <span class="k">static</span> init block. Put your
<span class="k">static</span> init blocks after all your <span class="k">static final</span> variables.</li>
<li>You must define the value of a <span class="k">static
final</span> before you can use it in defining the value of another
<span class="k">static final</span>.</li></ul>

u: (illegal forward reference)
^reuse(ILLEGAL_FORWARD)

u: ILLEGAL_STATIC_REF (illegalstaticref) 
\<div class="gotcha"><span class="k">enum</span> constructors cannot access the
<span class="k">enum</span> <span class="k">static</span>
fields. However, they can invoke the <span class="k">enum</span>’s <span class="k">static</span> methods
that access the <span class="k">static</span> fields, but they
won’t get the right values. The easiest way out is to convert your
<span class="k">static</span> constants to instance constants.
Strange as it seems, they <strong>are</strong> initialised before the
constructor code. Constructors may, however, directly access <span class="k">static final</span> in-lineable constants known at compile time.</div>The problem is <span class="k">static</span> initialisation has
not been done at the time the <span class="k">enum</span> constructor
constant constructors are invoked, so <span class="k">static</span>
methods called from your constructors will just see zeros/nulls. Why this
screwy rule? You’d think <span class="k">static</span>s would be
initialised first, the way they are with any other classes. The
<!-- macro Acronym JLS --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/jls.html">JLS</a> \(<span class="means"><span class="ac">J</span>ava <span class="ac">L</span>anguage <span class="ac">S</span>pecification</span> \)<!-- /generated by Acronym -->
justifies it this way:
<blockquote class="programming">The direct superclass of an <span class="k">enum</span> type named E
is <span class="class">Enum</span>&lt;E&gt;. In addition to the members it
inherits from <span class="class">Enum</span>&lt;E&lt;, for each declared
<span class="k">enum</span> constant with the name n the <span class="k">enum</span> type has an implicitly declared <span class="k">public static final</span> field named n of type E. These fields
are considered to be declared in the same order as the corresponding
<span class="k">enum</span> constants, before any <span class="class">static</span> fields explicitly declared in the <span class="k">enum</span> type. Each such field is initialized to the
<span class="k">enum</span> constant that corresponds to it. Each
such field is also considered to be annotated by the same annotations as
the corresponding <span class="k">enum</span> constant. The
<span class="k">enum</span> constant is said to be created when the
corresponding field is initialized. The direct superclass of an
<span class="k">enum</span> type named E is <span class="class">Enum</span>&lt;E&lt;. In addition to the members it inherits from
<span class="class">Enum</span>&lt;E&lt;, for each declared <span class="k">enum</span> constant with the name n the <span class="k">enum</span> type has an implicitly declared <span class="k">public static final</span> field named n of type E. These fields
are considered to be declared in the same order as the corresponding
<span class="k">enum</span> constants, before any <span class="k">static</span> fields explicitly declared in the <span class="k">enum</span> type. Each such field is initialized to the
<span class="k">enum</span> constant that corresponds to it. Each
such field is also considered to be annotated by the same annotations as
the corresponding <span class="k">enum</span> constant. The
<span class="k">enum</span> constant is said to be created when the
corresponding field is initialized.<br/>
~ <span class="said">Java Language Spec</span> <!-- macro Born unknown --><!-- generated --><!-- /generated by Born -->
<!-- OnOracle \{https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.9 \} \{ Enum \} --></blockquote>In other words, the gotchas is a side effect of the kludgy way
<span class="k">enum</span>s are implemented.

u: (illegal reference to static)
^reuse(ILLEGAL_STATIC_REF)

u: ILLEGAL_START (illegalstart) 
\<ul><li>The error message will point to perfectly good code. Look just ahead of
it for a <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/balancing.html">missing \}</a> or ;</li>
<li>static <span class="k">int</span> x = 0; Static variables have to
be defined outside all methods inside a class.</li>
<li>you wrote x + = 2; instead of x += 2; You also may have used an
<span class="op"> \)</span> when you meant a <span class="op"> \}</span>.</li>
<li>you wrote <span class="java">case: STRAWBERRY</span> instead of
<span class="java">case STRAWBERRY :</span></li>
<li>You nested a method inside another method.</li></ul>

u: (illegal start)
^reuse(ILLEGAL_START)

u: INCOMPATIBALE_TYPE (incompatibletype) 
missing a cast such as \( byte \)

u: (incompatible type)
^reuse(INCOMPATIBALE_TYPE)

u: INSTANCE_NOT_ACCESSIBLE (instancenotaccessible) 
Something is wrong with the parameters to an inner class.

u: (instance not accessible)
^reuse(INSTANCE_NOT_ACCESSIBLE)

u: INVALID_DEC (invaliddcl) 
Most likely the name you are trying to declare is invalid. It
must not contain dots. It must not start with a digit.

u: (invalid declaration) 
^reuse(INVALID_DEC)

u: INVALID_LABEL (invalidlabel) 
You used a semicolon instead of a colon after a label.

u: (invalid label)
^reuse(INVALID_LABEL)

u: INVALID_FLAG (invalidflag) 
writing <span class="bat">javac.exe MyClass</span> or
<span class="bat">javac.exe MyClass.class</span> instead of <span class="bat">javac.exe MyClass.java</span>.

u: (invalid flag) 
^reuse(INVALID_FLAG)

u: INVALID_METHOD (invalidmethod) 
forgetting <span class="k">void</span> return type on a
method declaration. Possibly your constructor and its class name do not match
exactly, including case.

u: (invalid method) 
^reuse(INVALID_METHOD)

u: INVALID_TYPE (invalidtype) 
You forgot the semicolon.

u: (invalid type)
^reuse(INVALID_TYPE)

u: NO_JAVAC (javac) 
\<span class="exe"><!-- macro JDK path --><!-- generated --><span class="path"><span class="drive">J:</span>\<span class="dir">Program Files</span>\<span class="dir">java</span>\<span class="dir">jdk1.8.0_131</span>\</span><!-- /generated by JDK -->
\bin\javac.exe</span> must be on the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/path.html">path</a>. See <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jdk.html#TESTING">JDK</a>
for details on polishing and testing your <!-- macro Acronym JDK --><!-- generated --><span class="acronym"><abbr title="Java Development Kit">JDK</abbr></span><!-- /generated by Acronym -->
installation.

u: (javac is not a * command)
^reuse(NO_JAVAC)

u: (mainmustbestatic) An application’s main class must have a method
<span class="java"><span class="k">public static void</span> <span class="method">main</span> \(<span class="class">String</span> \[\] <span class="var">args</span> \)</span>.

u: (main must be static void) An application’s main class must have a method
<span class="java"><span class="k">public static void</span> <span class="method">main</span> \(<span class="class">String</span> \[\] <span class="var">args</span> \)</span>.

u: (methodcanthide) You can’t use the same name for a <span class="k">static</span> and instance method in a subclass. Either you have to
give them different names, or make them both <span class="k">static</span> or make them both instance, or change the signature
\(parameter types \) to make them different.

u: (method can not hide) You can’t use the same name for a <span class="k">static</span> and instance method in a subclass. Either you have to
give them different names, or make them both <span class="k">static</span> or make them both instance, or change the signature
\(parameter types \) to make them different.

u: (methodclone) If the class containing <span class="method">clone</span> is one of yours,
you must implement a <span class="k">public</span> <span class="method">clone</span> method, that will probably use the <span class="k">protected</span> version in its implementation. If the class is
built-in, unfortunately, it does not have a <span class="k">public</span> <span class="method">clone</span> method, just a
<span class="k">protected</span> <span class="method">clone</span>,
which you may not use, unless you write a class extending the built-in class.
See <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/clone.html">clone</a> for details.

u: (method clone not visible) If the class containing <span class="method">clone</span> is one of yours,
you must implement a <span class="k">public</span> <span class="method">clone</span> method, that will probably use the <span class="k">protected</span> version in its implementation. If the class is
built-in, unfortunately, it does not have a <span class="k">public</span> <span class="method">clone</span> method, just a
<span class="k">protected</span> <span class="method">clone</span>,
which you may not use, unless you write a class extending the built-in class.
See <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/clone.html">clone</a> for details.

u: (methodmatechesconstructor) You can’t put <span class="k">void</span> on a
constructor, or put any other return type for that matter.

u: (method matches constructor name) You can’t put <span class="k">void</span> on a
constructor, or put any other return type for that matter.

u: (methodnotfound) \<ul><li>undefined \(missing \) method.</li>
<li>You wrote <span class="java">MyClass x = MyClass \(\);</span> instead of
<span class="java">MyClass x = new MyClass \(\);</span></li></ul>

u: (method not found) \<ul><li>undefined \(missing \) method.</li>
<li>You wrote <span class="java">MyClass x = MyClass \(\);</span> instead of
<span class="java">MyClass x = new MyClass \(\);</span></li></ul>

u: (misplacedconstruct) \<ul><li>You wrote <span class="java">doSomething \( String \[\] choices \)</span>
rather than <span class="java">doSomething \( choices \)</span></li>
<li>There is a <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/balancing.html">stray \}</a> just
before of where it is complaining.</li></ul>

u: (misplaced construct) \<ul><li>You wrote <span class="java">doSomething \( String \[\] choices \)</span>
rather than <span class="java">doSomething \( choices \)</span></li>
<li>There is a <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/balancing.html">stray \}</a> just
before of where it is complaining.</li></ul>

u: (misplacedpackage) Sun renamed <!-- macro Qualified \{com.sun.java.swing \} --><!-- generated --><span class="qualified"><span class="package">com</span>.<span class="package">sun</span>.<span class="package">java</span>.<span class="package">swing</span></span><!-- /generated by Qualified --> to
<span class="java">javax.swing</span> but your code is still using the old
name. Use a global search and replace on all your *.java files.

u: (misplaced package) Sun renamed <!-- macro Qualified \{com.sun.java.swing \} --><!-- generated --><span class="qualified"><span class="package">com</span>.<span class="package">sun</span>.<span class="package">java</span>.<span class="package">swing</span></span><!-- /generated by Qualified --> to
<span class="java">javax.swing</span> but your code is still using the old
name. Use a global search and replace on all your *.java files.

u: (missingmethodbody) You inserted a semicolon just before the first \{ of a
method.

u: (missing method body) You inserted a semicolon just before the first \{ of a
method.

u: (missingreturn) No matter how control flows through your method, it must end
with a <span class="k">return</span> statement, unless the method has a
<span class="k">void</span> return. The most common failing is when you
catch an exception. The <span class="k">return</span> in the <span class="k">try</span> body conceptually might never be executed because of an
exception potentially being triggered. You need a <span class="k">return</span> in the <span class="k">catch</span> block or
after the <span class="k">catch</span> block too. Javac is not as clever
as you. You may be sure the exception will never dodge the <span class="k">return</span> in the <span class="k">try</span> block, but
javac can’t be so sure.

u: (missing return statement) No matter how control flows through your method, it must end
with a <span class="k">return</span> statement, unless the method has a
<span class="k">void</span> return. The most common failing is when you
catch an exception. The <span class="k">return</span> in the <span class="k">try</span> body conceptually might never be executed because of an
exception potentially being triggered. You need a <span class="k">return</span> in the <span class="k">catch</span> block or
after the <span class="k">catch</span> block too. Javac is not as clever
as you. You may be sure the exception will never dodge the <span class="k">return</span> in the <span class="k">try</span> block, but
javac can’t be so sure.

u: (modifiersynchronized) <span class="k">synchronized</span> applies
to methods and blocks of code. <span class="k">transient</span> applies to variables.

u: (modifier synchronized not allowed) <span class="k">synchronized</span> applies
to methods and blocks of code. <span class="k">transient</span> applies to variables.

u: (constructormismatch) You forgot your return type, e.g. void, on a method.

u: (name of constructor mismatch) You forgot your return type, e.g. void, on a method.

u: (length) You said <span class="var">s.length</span> rather than
<span class="method">s.length \(\)</span> to get the length of a <span class="class">String</span>. The <span class="var">a.length</span> form without the
<span class="op"> \(\)</span> is only used for arrays. Whereas <span class="interface">List</span>s \(e.g. <span class="class">ArrayList</span> \) use
<!-- macro Qualified java.util.List.length \(\) interface --><!-- generated --><span class="qualified"><span class="package">java</span>.<span class="package">util</span>.<span class="interface">List</span>.<span class="method">length</span><span class="fence2"> \(\)</span></span><!-- /generated by Qualified -->.
Collections use <!-- macro Qualified Collection.size \(\) --><!-- generated --><span class="qualified"><span class="class">Collection</span>.<span class="method">size</span><span class="fence2"> \(\)</span></span><!-- /generated by Qualified --> just to keep you
on your toes. You will even see <span class="method">getLength \(\)</span> every
once in a while. The designers of Java must hate newbies to put such stumbling
blocks in front of them. It is either laziness of a subtle form of one
upmanship.

u: (no field) You said <span class="var">s.length</span> rather than
<span class="method">s.length \(\)</span> to get the length of a <span class="class">String</span>. The <span class="var">a.length</span> form without the
<span class="op"> \(\)</span> is only used for arrays. Whereas <span class="interface">List</span>s \(e.g. <span class="class">ArrayList</span> \) use
<!-- macro Qualified java.util.List.length \(\) interface --><!-- generated --><span class="qualified"><span class="package">java</span>.<span class="package">util</span>.<span class="interface">List</span>.<span class="method">length</span><span class="fence2"> \(\)</span></span><!-- /generated by Qualified -->.
Collections use <!-- macro Qualified Collection.size \(\) --><!-- generated --><span class="qualified"><span class="class">Collection</span>.<span class="method">size</span><span class="fence2"> \(\)</span></span><!-- /generated by Qualified --> just to keep you
on your toes. You will even see <span class="method">getLength \(\)</span> every
once in a while. The designers of Java must hate newbies to put such stumbling
blocks in front of them. It is either laziness of a subtle form of one
upmanship.

u: (nomethodfound) You have the wrong number of parameters or the wrong parameter
types for the method. It can also mean you defined a method with the wrong
visibility modifier, e.g. none, <span class="k">private</span> or
<span class="k">protected</span> when you meant public. Perhaps you
called it as if it were <span class="k">static</span> and defined it as
instance, or vice versa. Perhaps you were calling a constructor without
new.

u: (no method found) You have the wrong number of parameters or the wrong parameter
types for the method. It can also mean you defined a method with the wrong
visibility modifier, e.g. none, <span class="k">private</span> or
<span class="k">protected</span> when you meant public. Perhaps you
called it as if it were <span class="k">static</span> and defined it as
instance, or vice versa. Perhaps you were calling a constructor without
new.

u: (nomethodmatching) You have the wrong number of parameters or the wrong parameter
types for the method. It can also mean you defined a method with the wrong
visibility modifier, e.g. none, <span class="k">private</span> or
<span class="k">protected</span> when you meant <span class="k">public</span>. Perhaps you called it as if it were <span class="k">static</span> and defined it as instance, or vice versa. Perhaps you
were calling a constructor without new.

u: (no method matching) You have the wrong number of parameters or the wrong parameter
types for the method. It can also mean you defined a method with the wrong
visibility modifier, e.g. none, <span class="k">private</span> or
<span class="k">protected</span> when you meant <span class="k">public</span>. Perhaps you called it as if it were <span class="k">static</span> and defined it as instance, or vice versa. Perhaps you
were calling a constructor without new.

u: (caps) \<ul><li>missing caps on a class name declaration.</li>
<li>Caps on a variable/method declaration</li></ul>

u: (cap missing) \<ul><li>missing caps on a class name declaration.</li>
<li>Caps on a variable/method declaration</li></ul>

u: (impotentsetter) \<ul><li><span class="java">this.x = x<strong>;</strong></span> Effectively you
wrote <span class="java">this.x = this.x<strong>;</strong></span> because
there is no x parameter.</li>
<li><!-- macro JDisplay errormessages.example4.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// This method does nothing,</span>
<span class="commentslashslash">// just sets this.brush to itself.</span>
<span class="commentslashslash">// Note misspelling brash for brush.</span>
<span class="commentslashslash">// No warning!</span>
<span class="commentslashslash">// Eclipse compiler will warn you though.</span>
<span class="k">public </span><span class="method">voidsetBrush </span><span class="fence1"> \(</span> <span class="k">int </span><span class="vardef">brash </span><span class="fence1"> \)</span>
   <span class="fence1"> \{</span>
   <span class="k">this</span><span class="op">.</span><span class="var">brush </span><span class="op">= </span><span class="var">brush</span><span class="sc">;</span>
   <span class="fence1"> \}</span></pre><!-- /generated by JDisplay --></li></ul>

u: (impotent setters) \<ul><li><span class="java">this.x = x<strong>;</strong></span> Effectively you
wrote <span class="java">this.x = this.x<strong>;</strong></span> because
there is no x parameter.</li>
<li><!-- macro JDisplay errormessages.example4.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// This method does nothing,</span>
<span class="commentslashslash">// just sets this.brush to itself.</span>
<span class="commentslashslash">// Note misspelling brash for brush.</span>
<span class="commentslashslash">// No warning!</span>
<span class="commentslashslash">// Eclipse compiler will warn you though.</span>
<span class="k">public </span><span class="method">voidsetBrush </span><span class="fence1"> \(</span> <span class="k">int </span><span class="vardef">brash </span><span class="fence1"> \)</span>
   <span class="fence1"> \{</span>
   <span class="k">this</span><span class="op">.</span><span class="var">brush </span><span class="op">= </span><span class="var">brush</span><span class="sc">;</span>
   <span class="fence1"> \}</span></pre><!-- /generated by JDisplay --></li></ul>

u: (missingpublic) In debug mode, if you forget to make your main method
<span class="k">public</span>, you will not be warned. You won’t
discover the problem until later. main must be <span class="k">public</span> <span class="k">static</span> void.

u: (missing public) In debug mode, if you forget to make your main method
<span class="k">public</span>, you will not be warned. You won’t
discover the problem until later. main must be <span class="k">public</span> <span class="k">static</span> void.

u: (casefallthru) missing break. In <!-- macro Java 1.4+ --><!-- generated -->Java version <span class="version">1.4</span> or later<!-- /generated by Java -->
you can use the <span class="bat">javac.exe -Xswitchcheck</span> to get this
error detected.

u: (case fallthru) missing break. In <!-- macro Java 1.4+ --><!-- generated -->Java version <span class="version">1.4</span> or later<!-- /generated by Java -->
you can use the <span class="bat">javac.exe -Xswitchcheck</span> to get this
error detected.

u: (missinginit) \<ul><li>The array is automatically initialised to null. This will likely soon
lead to a <span class="class">java.lang.NullPointerException</span> when
you try to apply some method to one of the elements of the array. Note
<span class="class">Null <strong>Pointer</strong>Exception</span>, not
<span class="class">Null<strong>Reference</strong>Exception</span>. You
forgot to initialise an array of strings or objects to some value.</li>
<li>You forgot to initialise an <span class="k">int</span> array to
some value or populate it with objects.</li></ul>

u: (missing initialisation) \<ul><li>The array is automatically initialised to null. This will likely soon
lead to a <span class="class">java.lang.NullPointerException</span> when
you try to apply some method to one of the elements of the array. Note
<span class="class">Null <strong>Pointer</strong>Exception</span>, not
<span class="class">Null<strong>Reference</strong>Exception</span>. You
forgot to initialise an array of strings or objects to some value.</li>
<li>You forgot to initialise an <span class="k">int</span> array to
some value or populate it with objects.</li></ul>

u: (missingvarinit) Don’t put \(\) around the dot-separated parts of a
name.

u: (missing variable initialiser) Don’t put \(\) around the dot-separated parts of a
name.

u: (fakeconstructor) specifying a void return type on a constructor. Method with the
same name as the class.

u: (constructor treated as method) specifying a void return type on a constructor. Method with the
same name as the class.

u: (supiciousshadowing) You accidentally declared a local variable with the same name as an instance
or class variable when you intended to use the instance or local variable.
This is my most common error that the compiler does not detect.
<div class="see"><a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jpcc.html">JPCC</a></div>The <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jikes.html">Jikes</a> compiler will warn
you of this.

u: (suspicious shadowing) You accidentally declared a local variable with the same name as an instance
or class variable when you intended to use the instance or local variable.
This is my most common error that the compiler does not detect.
<div class="see"><a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jpcc.html">JPCC</a></div>The <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jikes.html">Jikes</a> compiler will warn
you of this.

u: (overriddencallsinconstructor) Be very careful calling any methods inside your constructors. If subclasses
override them, you will be invoking the subclass’s version, which may
be attempting to use fields that have not been initialised yet. You
won’t get a warning message! The problem usually shows up as puzzling
<span class="class">NullPointerExceptions</span>. The way out is to move code
out of the constructor, often to the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/addnotify.html">addNotify</a> method. However, <span class="method">addNotify</span> can get in analogous problem to the constructor
since it too is overridden and it may use overridden methods.

u: (calling overridden methods in
constructor) Be very careful calling any methods inside your constructors. If subclasses
override them, you will be invoking the subclass’s version, which may
be attempting to use fields that have not been initialised yet. You
won’t get a warning message! The problem usually shows up as puzzling
<span class="class">NullPointerExceptions</span>. The way out is to move code
out of the constructor, often to the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/addnotify.html">addNotify</a> method. However, <span class="method">addNotify</span> can get in analogous problem to the constructor
since it too is overridden and it may use overridden methods.

u: (nonfinalvar) Inside anonymous classes, you can’t use local variables of the
enclosing method unless they are <span class="k">final</span>. I
don’t mean instance or <span class="k">static</span> variables. I
don’t mean passing locals as parameters to the anonymous constructor. I
mean directly accessing local method stack variables directly from anonymous
inner class methods. When you do that, they variables have to be <span class="k">final</span>. <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/nestedclasses.html#ANONYMOUSVISIBILITY">more details</a>.

u: (non-final variable) Inside anonymous classes, you can’t use local variables of the
enclosing method unless they are <span class="k">final</span>. I
don’t mean instance or <span class="k">static</span> variables. I
don’t mean passing locals as parameters to the anonymous constructor. I
mean directly accessing local method stack variables directly from anonymous
inner class methods. When you do that, they variables have to be <span class="k">final</span>. <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/nestedclasses.html#ANONYMOUSVISIBILITY">more details</a>.

u: (nonstaticcantberef) \<ul><li>In a <span class="k">static</span> method, you used an instance
method without an object, e.g. <span class="java">MyClass.<var>xxx</var> \(\)</span>. You must first create an object
with <span class="java">MyClass o = <span class="k">new</span>
MyClass \(\);</span>, then use <span class="java">o.<var>xxx</var> \(\);</span>
to invoke the method.</li>
<li>You used an instance variable \(one without the <span class="k">static</span> attribute \) inside a <span class="k">static</span> method. <span class="k">static</span> methods
don’t have access to any particular object, so can’t use any of
the instance \(per object \) fields. You may have used a reference to an inner
class inside a <span class="k">static</span> method. Make that inner
class an ordinary separate class. Inner classes are always linked to an
instance of the main class. You may have tried to instantiate an inner
class in some <span class="k">static</span> code. You need to make
the inner class static to be able to use it without a mother object.</li>
<li>You tried to access an instance variable or method of the outer class
from <span class="k">static</span> nested class.</li>
<li>You tried to instantiate/reference a non-static inner class from a
<span class="k">static</span> method of the outer class. Either make
the inner class <span class="k">static</span>, or make it an
independent class, or make the invoking method an instance method.</li>
<li>This sounds bizarre, but you were using an <span class="k">enum</span> with some <span class="k">enum</span>
<span class="k">private</span> methods. Remove the <span class="k">private</span> keyword and magically all will work. Use an
<!-- macro Acronym IDE --><!-- generated --><span class="acronym"><abbr title="Integrated Development Environment">IDE</abbr></span><!-- /generated by Acronym -->
like IntelliJ Idea to show you will methods can be <span class="k">private</span>. This is a side effect of the way <span class="k">enum</span>s are implemented. <span class="k">enum</span>
constants with a body of their own methods are <a class="com" target="_blank" href="http://mindprod.com/jgloss/enum.html#HOOD3">implemented</a> as anonymous
inner classes defined in a <span class="k">static</span> init
block. They can’t access the <span class="k">private</span>
methods of the mother class. The error message is misleading. The problem
is one of scope, not context.</li></ul>

u: (non-static can’t be referenced) \<ul><li>In a <span class="k">static</span> method, you used an instance
method without an object, e.g. <span class="java">MyClass.<var>xxx</var> \(\)</span>. You must first create an object
with <span class="java">MyClass o = <span class="k">new</span>
MyClass \(\);</span>, then use <span class="java">o.<var>xxx</var> \(\);</span>
to invoke the method.</li>
<li>You used an instance variable \(one without the <span class="k">static</span> attribute \) inside a <span class="k">static</span> method. <span class="k">static</span> methods
don’t have access to any particular object, so can’t use any of
the instance \(per object \) fields. You may have used a reference to an inner
class inside a <span class="k">static</span> method. Make that inner
class an ordinary separate class. Inner classes are always linked to an
instance of the main class. You may have tried to instantiate an inner
class in some <span class="k">static</span> code. You need to make
the inner class static to be able to use it without a mother object.</li>
<li>You tried to access an instance variable or method of the outer class
from <span class="k">static</span> nested class.</li>
<li>You tried to instantiate/reference a non-static inner class from a
<span class="k">static</span> method of the outer class. Either make
the inner class <span class="k">static</span>, or make it an
independent class, or make the invoking method an instance method.</li>
<li>This sounds bizarre, but you were using an <span class="k">enum</span> with some <span class="k">enum</span>
<span class="k">private</span> methods. Remove the <span class="k">private</span> keyword and magically all will work. Use an
<!-- macro Acronym IDE --><!-- generated --><span class="acronym"><abbr title="Integrated Development Environment">IDE</abbr></span><!-- /generated by Acronym -->
like IntelliJ Idea to show you will methods can be <span class="k">private</span>. This is a side effect of the way <span class="k">enum</span>s are implemented. <span class="k">enum</span>
constants with a body of their own methods are <a class="com" target="_blank" href="http://mindprod.com/jgloss/enum.html#HOOD3">implemented</a> as anonymous
inner classes defined in a <span class="k">static</span> init
block. They can’t access the <span class="k">private</span>
methods of the mother class. The error message is misleading. The problem
is one of scope, not context.</li></ul>

u: (notabstract) You defined a class that extended an <span class="k">abstract</span> class, but you forgot to provide a concrete
implementation for one of the <span class="k">abstract</span>
methods.

u: (not abstract) You defined a class that extended an <span class="k">abstract</span> class, but you forgot to provide a concrete
implementation for one of the <span class="k">abstract</span>
methods.

u: (notastatement) \<ul><li>The compiler was expecting a statement and you gave it something else,
e. g. you wrote <span class="java">if \(i &gt; 7 \) 42;</span>. You might have
used a variable name beginning with a digit or punctuation or some other
improper character.</li>
<li>Perhaps you used == instead of = in an assignment statement, turning it
into an expression instead of a statement.</li>
<li>you wrote x + = 2; instead of x += 2;</li>
<li>Perhaps you had a stray semicolon in a statement made of dozen of
concatenations.</li></ul>

u: (not a statement) \<ul><li>The compiler was expecting a statement and you gave it something else,
e. g. you wrote <span class="java">if \(i &gt; 7 \) 42;</span>. You might have
used a variable name beginning with a digit or punctuation or some other
improper character.</li>
<li>Perhaps you used == instead of = in an assignment statement, turning it
into an expression instead of a statement.</li>
<li>you wrote x + = 2; instead of x += 2;</li>
<li>Perhaps you had a stray semicolon in a statement made of dozen of
concatenations.</li></ul>

u: (notaccessible) Move your named inner class definition outside a <span class="k">static</span> method. Keep in mind, instances of inner classes must
be associated with an instance of the main class. As a corollary of this, you
can’t create anonymous inner classes except inside instance methods.

u: (not accessible) Move your named inner class definition outside a <span class="k">static</span> method. Keep in mind, instances of inner classes must
be associated with an instance of the main class. As a corollary of this, you
can’t create anonymous inner classes except inside instance methods.

u: (notfoundinimport) The package you mentioned is not available on the classpath. Make sure you
spell it with proper case. Make sure you understand the limitations of import
wildcards. See <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/import.html">import</a>, <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/classpath.html">classpath</a>.

u: (not found in import) The package you mentioned is not available on the classpath. Make sure you
spell it with proper case. Make sure you understand the limitations of import
wildcards. See <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/import.html">import</a>, <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/classpath.html">classpath</a>.

u: (notinitialised) missing initialisation for a temporary variable. If you
initialise it in a try block, you need also to initialise it in the catch or
before the try in case you get an exception.

u: (not initialised) missing initialisation for a temporary variable. If you
initialise it in a try block, you need also to initialise it in the catch or
before the try in case you get an exception.

u: (operatorplus) Irritatingly, Java does not allow unary + in front of a String,
only between Strings so you can’t write 
<!-- macro JDisplay errormessages.operatorplus.javafrag --><!-- generated --><iframe class="jdisplay" height="139" src="snippet/iframe/errormessages.operatorplus.javafrag.htm" style="overflow:scroll" width="800"></iframe><!-- /generated by JDisplay -->

u: (operator +) Irritatingly, Java does not allow unary + in front of a String,
only between Strings so you can’t write 
<!-- macro JDisplay errormessages.operatorplus.javafrag --><!-- generated --><iframe class="jdisplay" height="139" src="snippet/iframe/errormessages.operatorplus.javafrag.htm" style="overflow:scroll" width="800"></iframe><!-- /generated by JDisplay -->

u: (operatoror) you wrote <span class="java">if \( x1 = x2 || y1 = y2 \)</span>
instead of <span class="java">if \( x1 == x2 || y1 == y2 \)</span>

u: (operator ||) you wrote <span class="java">if \( x1 = x2 || y1 = y2 \)</span>
instead of <span class="java">if \( x1 == x2 || y1 == y2 \)</span>

u: (packagedoesntexist) \<ul><li>Java is case-sensitive. The package is called <span class="package">java.applet</span>, not <span class="sic">Java.Applet</span>.
Package names are supposed to be pure lower case.</li>
<li>Check that the package is available on the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/classpath.html">classpath</a> or in some jar in the appropriate
<span class="dir">ext</span> directory. You can use <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/winzip.html">winzip</a> to examine the jar file directories to find
out which classes they contain. To help discover which jar does contain
your class use Google on the package name + <span class="string">jar</span>. Then get that jar on the classpath or in the
<span class="dir">ext</span> directory.</li>
<li>This error can so come up when you try to allocate an inner class
object, e.g.
<!-- macro JDisplay compileerrormessages.ellipse2d.javafrag --><!-- generated --><pre class="java"><span class="k">import </span><span class="package">java</span><span class="op">.</span><span class="package">awt</span><span class="op">.</span><span class="package">geom</span><span class="op">.</span><span class="class">Ellipse2D</span><span class="sc">;</span>

<span class="op">...</span>

<span class="commentslashslash">// allocate an inner class Float object of the Ellipse2D class</span>
<span class="ik">return </span><span class="k">new </span><span class="class">Ellipse2D</span><span class="op">.</span><span class="classdef">Float</span><span class="fence1"> \(</span> <span class="var">x</span><span class="op">,  </span><span class="var">y</span><span class="op">,  </span><span class="var">w</span><span class="op">,  </span><span class="var">h </span><span class="fence1"> \)</span><span class="sc">;</span></pre><!-- /generated by JDisplay -->
You should use an <span class="method">import</span> for the outer class.
You don’t need to import the inner, though you may optionally do
so. <strong>Don’t try to use * notation to import the inner
class.</strong>.</li></ul>

u: (package does not exist) \<ul><li>Java is case-sensitive. The package is called <span class="package">java.applet</span>, not <span class="sic">Java.Applet</span>.
Package names are supposed to be pure lower case.</li>
<li>Check that the package is available on the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/classpath.html">classpath</a> or in some jar in the appropriate
<span class="dir">ext</span> directory. You can use <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/winzip.html">winzip</a> to examine the jar file directories to find
out which classes they contain. To help discover which jar does contain
your class use Google on the package name + <span class="string">jar</span>. Then get that jar on the classpath or in the
<span class="dir">ext</span> directory.</li>
<li>This error can so come up when you try to allocate an inner class
object, e.g.
<!-- macro JDisplay compileerrormessages.ellipse2d.javafrag --><!-- generated --><pre class="java"><span class="k">import </span><span class="package">java</span><span class="op">.</span><span class="package">awt</span><span class="op">.</span><span class="package">geom</span><span class="op">.</span><span class="class">Ellipse2D</span><span class="sc">;</span>

<span class="op">...</span>

<span class="commentslashslash">// allocate an inner class Float object of the Ellipse2D class</span>
<span class="ik">return </span><span class="k">new </span><span class="class">Ellipse2D</span><span class="op">.</span><span class="classdef">Float</span><span class="fence1"> \(</span> <span class="var">x</span><span class="op">,  </span><span class="var">y</span><span class="op">,  </span><span class="var">w</span><span class="op">,  </span><span class="var">h </span><span class="fence1"> \)</span><span class="sc">;</span></pre><!-- /generated by JDisplay -->
You should use an <span class="method">import</span> for the outer class.
You don’t need to import the inner, though you may optionally do
so. <strong>Don’t try to use * notation to import the inner
class.</strong>.</li></ul>

u: (permissiondenied) This will happen in Linux/Unix systems, particularly if you use
the <span class="bat">Javac.exe -d targetdir</span> option. You are trying to
write your generated class files to a directory where you don’t have
permission, or the <span class="ext">*.class</span> files that you are
overwriting may have been generated with a different owner.

u: (permission denied) This will happen in Linux/Unix systems, particularly if you use
the <span class="bat">Javac.exe -d targetdir</span> option. You are trying to
write your generated class files to a directory where you don’t have
permission, or the <span class="ext">*.class</span> files that you are
overwriting may have been generated with a different owner.

u: (possiblelossofprecision) You did something like <span class="var">i</span> <span class="op">=</span> <span class="var">d</span>; where <span class="var">i</span> is an <span class="k">int</span> and <span class="var">d</span> is a <span class="k">double</span>. Narrowing will throw
away high order bits or the fraction. You need an explicit cast to acknowledge
this loss, e.g. <span class="var">i</span> <span class="op">=</span>
\(<span class="k">int</span> \)<span class="var">d</span>;

u: (possible loss of precision) You did something like <span class="var">i</span> <span class="op">=</span> <span class="var">d</span>; where <span class="var">i</span> is an <span class="k">int</span> and <span class="var">d</span> is a <span class="k">double</span>. Narrowing will throw
away high order bits or the fraction. You need an explicit cast to acknowledge
this loss, e.g. <span class="var">i</span> <span class="op">=</span>
\(<span class="k">int</span> \)<span class="var">d</span>;

u: (publiclasshouldbeinfile) <span class="exe">Javadoc.exe</span> is particularly
picky about case. Make sure the name of the class exactly matches the name of
the file and that the name of the package exactly matches the name of the
directory tree, e.g. <!-- macro Qualified \{com.mindprod.mypackage.MyClass \} --><!-- generated --><span class="qualified"><span class="package">com</span>.<span class="package">mindprod</span>.<span class="package">mypackage</span>.<span class="class">MyClass</span></span><!-- /generated by Qualified -->
should be in a file called <span class="java">com\mindprod\mypackage\MyClass.java</span> or <span class="java">com/mindprod/mypackage/MyClass.java</span>, exactly including case of
the directory names.

u: (public class
should be in file) <span class="exe">Javadoc.exe</span> is particularly
picky about case. Make sure the name of the class exactly matches the name of
the file and that the name of the package exactly matches the name of the
directory tree, e.g. <!-- macro Qualified \{com.mindprod.mypackage.MyClass \} --><!-- generated --><span class="qualified"><span class="package">com</span>.<span class="package">mindprod</span>.<span class="package">mypackage</span>.<span class="class">MyClass</span></span><!-- /generated by Qualified -->
should be in a file called <span class="java">com\mindprod\mypackage\MyClass.java</span> or <span class="java">com/mindprod/mypackage/MyClass.java</span>, exactly including case of
the directory names.

u: (reachedeof) This is usually a brace balancing problem. You are missing a closing brace,
so the parser got to the end while it figured it was still inside the class.
The problems can also be caused by unbalanced \" and unclosed comments.
<!-- macro Acronym IDEs --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/ide.html">IDEs</a> \(<span class="means"><span class="ac">I</span>ntegrated <span class="ac">D</span>evelopment <span class="ac">E</span>nvironments</span> \)<!-- /generated by Acronym --> often have
tools to help you balance braces. Code tidiers make unbalanced braces more
obvious. For tough case try the <a class="applet" target="_blank" href="http://mindprod.com/applet/bracebalancer.html">BraceBalancer</a> applet/utility.

u: (reached end of file) This is usually a brace balancing problem. You are missing a closing brace,
so the parser got to the end while it figured it was still inside the class.
The problems can also be caused by unbalanced \" and unclosed comments.
<!-- macro Acronym IDEs --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/ide.html">IDEs</a> \(<span class="means"><span class="ac">I</span>ntegrated <span class="ac">D</span>evelopment <span class="ac">E</span>nvironments</span> \)<!-- /generated by Acronym --> often have
tools to help you balance braces. Code tidiers make unbalanced braces more
obvious. For tough case try the <a class="applet" target="_blank" href="http://mindprod.com/applet/bracebalancer.html">BraceBalancer</a> applet/utility.

u: (redefinedmethod) There are two causes, one is you simply defined the same method
with identical signatures, or signatures differing only in return type in the
same class. The other you tried to override the <span class="method">valueOf</span> method in an <span class="k">enum</span> class.
There is already a generated hidden implementation in your class, so you
can’t override it. Use some other name. The same applies to the
automatically constructed methods, <span class="method">compareTo</span>,
<span class="method">ordinal</span> and <span class="method">equals</span>.

u: (method already defined) There are two causes, one is you simply defined the same method
with identical signatures, or signatures differing only in return type in the
same class. The other you tried to override the <span class="method">valueOf</span> method in an <span class="k">enum</span> class.
There is already a generated hidden implementation in your class, so you
can’t override it. Use some other name. The same applies to the
automatically constructed methods, <span class="method">compareTo</span>,
<span class="method">ordinal</span> and <span class="method">equals</span>.

u: (recompile) You used a <span class="interface">Collection</span> without <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/generics.html">generifying</a> it. If it is not obvious what
the problem is, recompile with <span class="bat">javac.exe -Xlint:unchecked
*.java</span>

u: (recompile with -xlint:unchecked) You used a <span class="interface">Collection</span> without <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/generics.html">generifying</a> it. If it is not obvious what
the problem is, recompile with <span class="bat">javac.exe -Xlint:unchecked
*.java</span>

u: (repeatedmodifier) You specified a modifying keyword more than once e.g.
<span class="k">final</span> or <span class="k">public</span>.

u: (repeated modifier) You specified a modifying keyword more than once e.g.
<span class="k">final</span> or <span class="k">public</span>.

u: (returninconstructor) specifying a return this in a constructor

u: (return in constructor) specifying a return this in a constructor

u: (returnoutsidemethod) you have a <span class="k">return</span> dangling between
classes. Perhaps you left the <span class="op">;</span> before the method
<span class="java"> \{body \}</span> in when you converted from abstract method to
a real one.

u: (return outside method) you have a <span class="k">return</span> dangling between
classes. Perhaps you left the <span class="op">;</span> before the method
<span class="java"> \{body \}</span> in when you converted from abstract method to
a real one.

u: (returnrequired) specifying a MyClass return type on a constructor

u: (return required) specifying a MyClass return type on a constructor

u: (serialverisonuid) Assign your class a <span class="var"><a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/serialization.html#SERIALVERSIONUID">serialVersionUID</a></span>
<!-- macro JDisplay serialization.serialversionuid.javafrag --><!-- generated --><pre class="java"><span class="javadoc">/**</span>
<span class="javadoc"> * Defining a layout version for a class.</span>
<span class="javadoc"> * Watch the spelling and keywords!</span>
<span class="javadoc"> */</span>
<span class="k">public static final long </span><span class="var">serialVersionUID </span><span class="op">= </span><span class="decimallow">3</span><span class="numericindicator">L</span><span class="sc">;</span></pre><!-- /generated by JDisplay -->

u: (serialversionuid required) Assign your class a <span class="var"><a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/serialization.html#SERIALVERSIONUID">serialVersionUID</a></span>
<!-- macro JDisplay serialization.serialversionuid.javafrag --><!-- generated --><pre class="java"><span class="javadoc">/**</span>
<span class="javadoc"> * Defining a layout version for a class.</span>
<span class="javadoc"> * Watch the spelling and keywords!</span>
<span class="javadoc"> */</span>
<span class="k">public static final long </span><span class="var">serialVersionUID </span><span class="op">= </span><span class="decimallow">3</span><span class="numericindicator">L</span><span class="sc">;</span></pre><!-- /generated by JDisplay -->

u: (shouldbedcledinfile) There is a problem with the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jar.html#MAINCLASS">Main-Class</a> entry of <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jar.html#manifest">manifest</a> in the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jar.html">jar</a> file. Possibly you got the package name wrong or the case
of the name off. The <span class="ini">Main-Class</span> must exist in an
element of the jar filed under the package name as the folder. Possible the
Class you specified is missing a <span class="java"><span class="k">public static void</span> <strong>main</strong> \(Strings \[\]
<strong>args</strong> \)</span> method. Check the gotchas in setting up the
<a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jar.html#manifest">manifest</a>.

u: (should be declared in file) There is a problem with the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jar.html#MAINCLASS">Main-Class</a> entry of <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jar.html#manifest">manifest</a> in the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jar.html">jar</a> file. Possibly you got the package name wrong or the case
of the name off. The <span class="ini">Main-Class</span> must exist in an
element of the jar filed under the package name as the folder. Possible the
Class you specified is missing a <span class="java"><span class="k">public static void</span> <strong>main</strong> \(Strings \[\]
<strong>args</strong> \)</span> method. Check the gotchas in setting up the
<a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jar.html#manifest">manifest</a>.

u: (statementexpected) <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/balancing.html">missing \}</a> in a method

u: (statement expected) <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/balancing.html">missing \}</a> in a method

u: (staticonstructor) You forgot your return type e.g. void, on a method.

u: (static not valid on constructor) You forgot your return type e.g. void, on a method.

u: (staticfield) You specified <span class="var">c</span>.<span class="constant">HOUR_OF_DAY</span> where <span class="var">c</span> is a
<span class="class">Calendar</span> instance reference. You should get at the
<span class="k">static</span> constant with <span class="class">Calendar</span>. <span class="constant">HOUR_OF_DAY</span>.

u: (static field should be accessed in a static way.) You specified <span class="var">c</span>.<span class="constant">HOUR_OF_DAY</span> where <span class="var">c</span> is a
<span class="class">Calendar</span> instance reference. You should get at the
<span class="k">static</span> constant with <span class="class">Calendar</span>. <span class="constant">HOUR_OF_DAY</span>.

u: (tagsee) You should have something of the form <span class="java">&#64;see
java.lang.String</span> or <span class="java">java.lang.String#indexOf \(char \)</span>. Most commonly you have left off
the parameters on a method. The target must be in the standard System Javadoc
or in the Javadoc bundle. You can’t point to a class whose Javadoc is not
in the bundle.

u: (tag "@see" : reference not found) You should have something of the form <span class="java">&#64;see
java.lang.String</span> or <span class="java">java.lang.String#indexOf \(char \)</span>. Most commonly you have left off
the parameters on a method. The target must be in the standard System Javadoc
or in the Javadoc bundle. You can’t point to a class whose Javadoc is not
in the bundle.

u: (superclassnotfound) Did you remember to import the YYY class?

u: (superclass not found) Did you remember to import the YYY class?

u: (typecantbeprivate) Top level classes can’t be <span class="k">private</span>, only classes nested inside others.

u: (type can’t be private) Top level classes can’t be <span class="k">private</span>, only classes nested inside others.

u: (typecantbewidened) Java cannot automatically convert a <span class="k">double</span> to an
<span class="k">int</span>. There are many options. See <a class="applet" target="_blank" href="http://mindprod.com/applet/converter.html">Converter Amanuensis</a> for the
code you need.

u: (type can not be widened) Java cannot automatically convert a <span class="k">double</span> to an
<span class="k">int</span>. There are many options. See <a class="applet" target="_blank" href="http://mindprod.com/applet/converter.html">Converter Amanuensis</a> for the
code you need.

u: (typeexpected) \<ul><li><a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/balancing.html">extra \}</a>, or literally a
missing type, especially in constant declarations like: <span class="java"><span class="k">public static final</span>
SOMETHING=3;</span> instead of <span class="java"><span class="k">public static final int</span> SOMETHING=3;</span></li>
<li>Executable code has to be inside some method, in a <span class="k">static</span> initialiser block or in an instance initialiser
block. It can’t be just dangling inside a class or outside any class.
Check that your \{\} are balanced. Code you think is in a method may actually
be outside because of an extra <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/balancing.html">unbalanced</a> \}.</li></ul>

u: (type expected) \<ul><li><a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/balancing.html">extra \}</a>, or literally a
missing type, especially in constant declarations like: <span class="java"><span class="k">public static final</span>
SOMETHING=3;</span> instead of <span class="java"><span class="k">public static final int</span> SOMETHING=3;</span></li>
<li>Executable code has to be inside some method, in a <span class="k">static</span> initialiser block or in an instance initialiser
block. It can’t be just dangling inside a class or outside any class.
Check that your \{\} are balanced. Code you think is in a method may actually
be outside because of an extra <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/balancing.html">unbalanced</a> \}.</li></ul>

u: (typesafety) You forgot to generify your X <span class="k">implements</span>
<span class="interface">Comparable</span>&lt;X&gt; and similar differences
for generics documented under <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/comparable.html">Comparable</a>.

u: (type safety) You forgot to generify your X <span class="k">implements</span>
<span class="interface">Comparable</span>&lt;X&gt; and similar differences
for generics documented under <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/comparable.html">Comparable</a>.

u: (typesafetyerased) The compiler is warning you that the cast you are doing is only
ensuring the <span class="interface">Object</span> is an <span class="class">ArrayList</span>. It can’t tell if it truly is an <span class="class">ArrayList</span>&lt; <span class="class">String</span>&gt;. If it
isn’t, on your head be it. If it is not really an <span class="class">ArrayList</span>&lt; <span class="class">String</span>&gt; expect a
<span class="class">ClassCastException</span> as soon as you do a <span class="method">get</span>, even though there are no explicit casts near the
<span class="method">get</span> in your code. The problem in essence is that
serialized objects contain no record of their generic type. Many think that
design decision was a big mistake.

u: (type safety: erased type) The compiler is warning you that the cast you are doing is only
ensuring the <span class="interface">Object</span> is an <span class="class">ArrayList</span>. It can’t tell if it truly is an <span class="class">ArrayList</span>&lt; <span class="class">String</span>&gt;. If it
isn’t, on your head be it. If it is not really an <span class="class">ArrayList</span>&lt; <span class="class">String</span>&gt; expect a
<span class="class">ClassCastException</span> as soon as you do a <span class="method">get</span>, even though there are no explicit casts near the
<span class="method">get</span> in your code. The problem in essence is that
serialized objects contain no record of their generic type. Many think that
design decision was a big mistake.

u: (unabletoresolve) This happens when genjar is building a jar. It can be caused by
a missing class file that is needed for the jar, but more frequently is just
happens for no apparent reason. You can try rebooting is case the problem is
some other application has the needed class file locked. Earlier versions of
genjar did not even tell you which class file it was having trouble with.

u: (unable to resolve class) This happens when genjar is building a jar. It can be caused by
a missing class file that is needed for the jar, but more frequently is just
happens for no apparent reason. You can try rebooting is case the problem is
some other application has the needed class file locked. Earlier versions of
genjar did not even tell you which class file it was having trouble with.

u: (uncheckedcast) This is a subtle problem. The root cause of it is type erasure.
All information the compiler has about generics is erased from the run time.
You did a run-time cast that would require the run time to have knowledge of
the generic information. In <!-- macro Java 1.5+ --><!-- generated -->Java version <span class="version">1.5</span> or later<!-- /generated by Java -->,
you can use a <span class="annotation">@SuppressWarnings</span> to pat the
compiler on the head and say <span class="quoted">There there. I know what I am
doing. Not to worry.</span>

u: (unchecked cast) This is a subtle problem. The root cause of it is type erasure.
All information the compiler has about generics is erased from the run time.
You did a run-time cast that would require the run time to have knowledge of
the generic information. In <!-- macro Java 1.5+ --><!-- generated -->Java version <span class="version">1.5</span> or later<!-- /generated by Java -->,
you can use a <span class="annotation">@SuppressWarnings</span> to pat the
compiler on the head and say <span class="quoted">There there. I know what I am
doing. Not to worry.</span>

u: (uncheckedconversion) You used a <span class="interface">Collection</span> without <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/generics.html">generifying</a> it. If it is not obvious what
the problem is, recompile with <span class="bat">javac.exe -Xlint:unchecked
*.java</span>

u: (unchecked conversion) You used a <span class="interface">Collection</span> without <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/generics.html">generifying</a> it. If it is not obvious what
the problem is, recompile with <span class="bat">javac.exe -Xlint:unchecked
*.java</span>

u: (unclosedcharlit) Single <span class="k">char</span> literals are enclosed in ’s.
<span class="k">String</span>s, including empty and 1-character Strings are enclosed in \"s. You may have
used an invalid
representation for a <span class="k">char</span> <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/literal.html">literal</a>.
You may have tried to put a string of more than one character between the 's.
<span class="k">char</span> literals that need <span class="term">quoting</span> include:
<span class="char">'\"'</span>, <span class="char">'\''</span>, <span class="char">'\n'</span> and <span class="char">'\\'</span>.

u: (unclosed character literal) Single <span class="k">char</span> literals are enclosed in ’s.
<span class="k">String</span>s, including empty and 1-character Strings are enclosed in \"s. You may have
used an invalid
representation for a <span class="k">char</span> <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/literal.html">literal</a>.
You may have tried to put a string of more than one character between the 's.
<span class="k">char</span> literals that need <span class="term">quoting</span> include:
<span class="char">'\"'</span>, <span class="char">'\''</span>, <span class="char">'\n'</span> and <span class="char">'\\'</span>.

u: (unclosedstringlit) String literals are enclosed in <span class="behold">"</span> characters. Check the lead and trail character to make
sure it is indeed a <span class="behold">"</span> not something similar
looking. Check for awkward characters \(e.g. <span class="behold">" '
\</span> \) embedded in the string and make sure they are preceded by a
<span class="behold">\</span>. For a string made up of pieces, make sure there
is a <span class="op">+</span> between each pair.

u: (unclosed string literal) String literals are enclosed in <span class="behold">"</span> characters. Check the lead and trail character to make
sure it is indeed a <span class="behold">"</span> not something similar
looking. Check for awkward characters \(e.g. <span class="behold">" '
\</span> \) embedded in the string and make sure they are preceded by a
<span class="behold">\</span>. For a string made up of pieces, make sure there
is a <span class="op">+</span> between each pair.

u: (undefinedreftomain) If you are using the gcj Java compiler, you left off the
<span class="bat">--main</span> command line option or you screwed it up in
some way. It needs the fully qualified name of your main class, which will
necessarily have a <span class="k">public static void</span> <span class="method">main</span> method.

u: (undefined reference to main) If you are using the gcj Java compiler, you left off the
<span class="bat">--main</span> command line option or you screwed it up in
some way. It needs the fully qualified name of your main class, which will
necessarily have a <span class="k">public static void</span> <span class="method">main</span> method.

u: (undefinedvar) \<ul><li>caps on a variable reference</li>
<li>missing variable declaration</li></ul>

u: (undefined variable) \<ul><li>caps on a variable reference</li>
<li>missing variable declaration</li></ul>

u: (unexpectedsymbols) You just coded a snippet. All code has to live inside a method
and all methods have to live inside a class. The only exception are
<span class="k">static</span> and instance initialisers, which must be
contained in \{\} inside a class.

u: (unexpected symbols) You just coded a snippet. All code has to live inside a method
and all methods have to live inside a class. The only exception are
<span class="k">static</span> and instance initialisers, which must be
contained in \{\} inside a class.

u: (unqualifiedenumeration) This is the <!-- macro Java 1.5+ --><!-- generated -->Java version <span class="version">1.5</span> or later<!-- /generated by Java -->
<span class="k">enum</span> type checking catching you. Your <span class="k">enum</span> constant on a <span class="k">case</span> is not of
the same type as the variable in the <span class="k">switch</span>.

u: (unqualified enumeration required) This is the <!-- macro Java 1.5+ --><!-- generated -->Java version <span class="version">1.5</span> or later<!-- /generated by Java -->
<span class="k">enum</span> type checking catching you. Your <span class="k">enum</span> constant on a <span class="k">case</span> is not of
the same type as the variable in the <span class="k">switch</span>.

u: (unreachable) You have written some code that could never be executed, e.g.
you put some code immediately after a <span class="k">throw</span> or
<span class="k">return</span> statement.

u: (unreachable statement) You have written some code that could never be executed, e.g.
you put some code immediately after a <span class="k">throw</span> or
<span class="k">return</span> statement.

u: (unreportedexeption) The code potentially throws an exception. You must either wrap
it in a<br/>
<span class="java">try \{… \}<br/>
catch \(ParseException e \) \{… \}</span><br/>
or put a throws declaration on the method to let the caller deal with it.

u: (unreported exception) The code potentially throws an exception. You must either wrap
it in a<br/>
<span class="java">try \{… \}<br/>
catch \(ParseException e \) \{… \}</span><br/>
or put a throws declaration on the method to let the caller deal with it.

u: (unsortedswitch) Java won’t let you have two different symbolic constants
as case labels if they have the same numeric value, even if they label the same
block of code.

u: (unsorted switch) Java won’t let you have two different symbolic constants
as case labels if they have the same numeric value, even if they label the same
block of code.

u: (voidtype) You are using a method that does not return a value in a place
where a value is required such as the right side of an equal sign or a
parameter to another method.

u: (void type) You are using a method that does not return a value in a place
where a value is required such as the right side of an equal sign or a
parameter to another method.

u: (weakeraccess) The original method you are overriding was <span class="k">public</span>. Your overriding method must be <span class="k">public</span> too. This often happens when you implement a method in
an interface. All methods in an interface are implicitly <span class="k">public abstract</span>. However, when you implement them, you must
explicitly specify the <span class="k">public</span>.

u: (weaker access) The original method you are overriding was <span class="k">public</span>. Your overriding method must be <span class="k">public</span> too. This often happens when you implement a method in
an interface. All methods in an interface are implicitly <span class="k">public abstract</span>. However, when you implement them, you must
explicitly specify the <span class="k">public</span>.

u: (openbraceexpected) \<ul><li>Look for a missing \{ slightly before where it is complaining.</li>
<li>Usually it means you put a semicolon where one was not supposed to be
ahead of a \{, such as at the end of an <span class="k">implements</span> or <span class="k">extends</span> clause.
There are many errors of this type the compiler cannot catch because Java
slavishly copied C syntax. For example, getting your semicolons wrong in a
<span class="k">for</span> loop will generally not generate an error,
just give surprising results.</li></ul>

u: ( \{ expected) \<ul><li>Look for a missing \{ slightly before where it is complaining.</li>
<li>Usually it means you put a semicolon where one was not supposed to be
ahead of a \{, such as at the end of an <span class="k">implements</span> or <span class="k">extends</span> clause.
There are many errors of this type the compiler cannot catch because Java
slavishly copied C syntax. For example, getting your semicolons wrong in a
<span class="k">for</span> loop will generally not generate an error,
just give surprising results.</li></ul>

u: (closebraceexpected)
\<ul><li><a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/balancing.html">Missing \}</a> at the end of a
class.</li>
<li>Missing \} is on a line containing // before the \}.</li>
<li>Failure to enclose initialiser code in \{\} or <span class="k">static</span> \{\}.</li>
<li>Code has to live inside some method, or inside some initialiser. It
can’t just be left lying out in the middle of the class
declarations.</li>
<li>forgetting <span class="k">static \{ \}</span> around class init
code.</li>
<li>Perhaps <!-- macro JDisplay errormessages.example7.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// Oops, interfaces extend other interfaces,</span>
<span class="commentslashslash">// only classes can implement them.</span>
<span class="ik">interface </span><span class="constant">X </span><span class="k">implements </span><span class="constant">Y</span>
   <span class="fence1"> \{</span>
   <span class="commentslashslash">// ...</span>
   <span class="fence1"> \}</span></pre><!-- /generated by JDisplay -->
instead <!-- macro JDisplay errormessages.example8.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// Correct. An interface extends another interface,</span>
<span class="commentslashslash">// it cannot implement it.</span>
<span class="commentslashslash">// A class extends another class or implements an interface.</span>
<span class="commentslashslash">// An interface cannot extend or implement a class.</span>
<span class="ik">interface </span><span class="constant">X </span><span class="k">extends </span><span class="constant">Y</span>
   <span class="fence1"> \{</span>
   <span class="commentslashslash">// ...</span>
   <span class="fence1"> \}</span></pre><!-- /generated by JDisplay --></li></ul>

u: ( \} expected) \<ul><li><a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/balancing.html">Missing \}</a> at the end of a
class.</li>
<li>Missing \} is on a line containing // before the \}.</li>
<li>Failure to enclose initialiser code in \{\} or <span class="k">static</span> \{\}.</li>
<li>Code has to live inside some method, or inside some initialiser. It
can’t just be left lying out in the middle of the class
declarations.</li>
<li>forgetting <span class="k">static \{ \}</span> around class init
code.</li>
<li>Perhaps <!-- macro JDisplay errormessages.example7.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// Oops, interfaces extend other interfaces,</span>
<span class="commentslashslash">// only classes can implement them.</span>
<span class="ik">interface </span><span class="constant">X </span><span class="k">implements </span><span class="constant">Y</span>
   <span class="fence1"> \{</span>
   <span class="commentslashslash">// ...</span>
   <span class="fence1"> \}</span></pre><!-- /generated by JDisplay -->
instead <!-- macro JDisplay errormessages.example8.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// Correct. An interface extends another interface,</span>
<span class="commentslashslash">// it cannot implement it.</span>
<span class="commentslashslash">// A class extends another class or implements an interface.</span>
<span class="commentslashslash">// An interface cannot extend or implement a class.</span>
<span class="ik">interface </span><span class="constant">X </span><span class="k">extends </span><span class="constant">Y</span>
   <span class="fence1"> \{</span>
   <span class="commentslashslash">// ...</span>
   <span class="fence1"> \}</span></pre><!-- /generated by JDisplay --></li></ul>
