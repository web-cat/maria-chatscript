topic: ~runtime keep repeat (error runtime exceptions java errors messages message)




u: (abstractmethoderror) Thrown when an application tries to call an <span class="k">abstract</span> method.
Normally, this error is caught by the compiler. It could occur at run time only if the callee were modified
to make the method or enclosing class <span class="k">abstract</span> without recompiling both caller and
callee.

u: (abstract method error) Thrown when an application tries to call an <span class="k">abstract</span> method.
Normally, this error is caught by the compiler. It could occur at run time only if the callee were modified
to make the method or enclosing class <span class="k">abstract</span> without recompiling both caller and
callee.

u: (accesscontrolexception) <ul><li>This usually happens in unsigned <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/applet.html">Applet</a>s when you attempt
to do something <span class="class">Applet</span>s are not allowed to do, such as read a file or talk
to a server other than the one you were loaded from. You are getting slapped down by the security
sandbox. However, they also occur in other contexts you would not think would be related to security,
e.g. in <!-- macro Acronym RMI --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/rmi.html">RMI</a> \(<span class="means"><span class="ac">R</span>emote <span class="ac">M</span>ethod <span class="ac">I</span>nvocation</span> \)<!-- /generated by Acronym -->
when you have a mangled serialised object, or if you try to register a duplicate
<!-- macro Acronym RMI --><!-- generated --><span class="acronym"><abbr title="Remote Method Invocation">RMI</abbr></span><!-- /generated by Acronym -->
service name.</li>
<li><!-- macro Bug 4809366 \{The Bea JVM fails to give permission for <span class="method">getClassLoader</span>
even when you ask for <span class="ini">AllPermissions</span>. \} --><!-- generated --><div class="bug">Oracle bug number <a class="oracle" target="_blank" href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=4809366">4809366</a> : The Bea JVM fails to give permission for <span class="method">getClassLoader</span> even when you ask for <span class="ini">AllPermissions</span>.</div>
<!-- /generated by Bug --></li>
<li>One common way to get in trouble is to use absolute <span class="class"><!-- macro Acronym URL --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/url.html">URL</a> \(<span class="means"><span class="ac">U</span>niform <span class="ac">R</span>esource <span class="ac">L</span>ocator</span> \)<!-- /generated by Acronym --></span> s in your unsigned <span class="class">Applet</span>. The
<span class="class">Applet</span> will then work on one website only, or locally only. Instead, use a
relative <span class="class"><!-- macro Acronym URL --><!-- generated --><span class="acronym"><abbr title="Uniform Resource Locator">URL</abbr></span><!-- /generated by Acronym --></span>
and convert it to an <!-- macro JDisplay errormessages.example1.javafrag --><!-- generated --><iframe class="jdisplay" height="283" src="snippet/iframe/errormessages.example1.javafrag.htm" width="565"></iframe><!-- /generated by JDisplay --></li>
<li>Watch out for this one. Sometime when you test your Applets locally they work, but when you use
them on the web they fail with <span class="class">AccessControlException</span>. Remember, Applets are
not supposed to read files, though you can do an <span class="interface">AppletContext</span>.
<span class="method">showDocument</span>. You can however, read resources in the jar file.</li></ul>

u: (access control exception) <ul><li>This usually happens in unsigned <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/applet.html">Applet</a>s when you attempt
to do something <span class="class">Applet</span>s are not allowed to do, such as read a file or talk
to a server other than the one you were loaded from. You are getting slapped down by the security
sandbox. However, they also occur in other contexts you would not think would be related to security,
e.g. in <!-- macro Acronym RMI --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/rmi.html">RMI</a> \(<span class="means"><span class="ac">R</span>emote <span class="ac">M</span>ethod <span class="ac">I</span>nvocation</span> \)<!-- /generated by Acronym -->
when you have a mangled serialised object, or if you try to register a duplicate
<!-- macro Acronym RMI --><!-- generated --><span class="acronym"><abbr title="Remote Method Invocation">RMI</abbr></span><!-- /generated by Acronym -->
service name.</li>
<li><!-- macro Bug 4809366 \{The Bea JVM fails to give permission for <span class="method">getClassLoader</span>
even when you ask for <span class="ini">AllPermissions</span>. \} --><!-- generated --><div class="bug">Oracle bug number <a class="oracle" target="_blank" href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=4809366">4809366</a> : The Bea JVM fails to give permission for <span class="method">getClassLoader</span> even when you ask for <span class="ini">AllPermissions</span>.</div>
<!-- /generated by Bug --></li>
<li>One common way to get in trouble is to use absolute <span class="class"><!-- macro Acronym URL --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/url.html">URL</a> \(<span class="means"><span class="ac">U</span>niform <span class="ac">R</span>esource <span class="ac">L</span>ocator</span> \)<!-- /generated by Acronym --></span> s in your unsigned <span class="class">Applet</span>. The
<span class="class">Applet</span> will then work on one website only, or locally only. Instead, use a
relative <span class="class"><!-- macro Acronym URL --><!-- generated --><span class="acronym"><abbr title="Uniform Resource Locator">URL</abbr></span><!-- /generated by Acronym --></span>
and convert it to an <!-- macro JDisplay errormessages.example1.javafrag --><!-- generated --><iframe class="jdisplay" height="283" src="snippet/iframe/errormessages.example1.javafrag.htm" width="565"></iframe><!-- /generated by JDisplay --></li>
<li>Watch out for this one. Sometime when you test your Applets locally they work, but when you use
them on the web they fail with <span class="class">AccessControlException</span>. Remember, Applets are
not supposed to read files, though you can do an <span class="interface">AppletContext</span>.
<span class="method">showDocument</span>. You can however, read resources in the jar file.</li></ul>

u: (notinited) <ul><li>You are using <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/ie.html">Internet Explorer</a> which has a defective or
missing Java.</li>
<li>Missing package statement.</li>
<li>These erroneous Applets will often work with the Java Plug-in, or when run locally, but will fail
with native Javas when run on the web.</li>
<li>There can also be problems with your jar file having too much or too little qualification of class
names. Your <span class="html">&lt;APPLET CODE=</span> must have nothing but the class name, without
the <span class="java">.class</span>.</li>
<li>Make sure the case and name exactly match the name of the <span class="ext">*.java</span> file,
<span class="ext">*.class</span> file and class name. For a class in a package this would have dots in
it, e.g. <span class="java">com.mindprod.mypackage.Myclass</span>, but it would not have any directory
qualification.</li>
<li>Your <span class="html">CODEBASE=</span> parameters must have an absolute <span class="html">http://</span>-style reference to the base directory where the code is stored.</li>
<li>For a local hard disk, the only thing I could get to work reliably on NT with all browsers and
AppletViewers is leaving the <span class="html">CODEBASE</span> out entirely. You may find for your
platform you have to code it something like this: <span class="html">///C|//MyDir/</span> or
<!-- macro Path \{C&colon;\MyDir\ \} --><!-- generated --><span class="path"><span class="drive">C:</span>\<span class="dir">MyDir</span>\</span><!-- /generated by Path -->.</li>
<li>Your <span class="html">ARCHIVE=</span> parameter must have a list of the jar files, separated by
commas. If you have too little or too much qualification, or if you fail to use the file naming
conventions of your server, you will be in trouble.</li>
<li>You tried to do something in an unsigned <span class="class">Applet</span> only signed <span class="class">Applet</span>s are allowed to do such as reading restricted system properties, perhaps
indirectly via <span class="class">Color</span>. <span class="method">getColor</span>.</li></ul>

u: (applet not inited) <ul><li>You are using <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/ie.html">Internet Explorer</a> which has a defective or
missing Java.</li>
<li>Missing package statement.</li>
<li>These erroneous Applets will often work with the Java Plug-in, or when run locally, but will fail
with native Javas when run on the web.</li>
<li>There can also be problems with your jar file having too much or too little qualification of class
names. Your <span class="html">&lt;APPLET CODE=</span> must have nothing but the class name, without
the <span class="java">.class</span>.</li>
<li>Make sure the case and name exactly match the name of the <span class="ext">*.java</span> file,
<span class="ext">*.class</span> file and class name. For a class in a package this would have dots in
it, e.g. <span class="java">com.mindprod.mypackage.Myclass</span>, but it would not have any directory
qualification.</li>
<li>Your <span class="html">CODEBASE=</span> parameters must have an absolute <span class="html">http://</span>-style reference to the base directory where the code is stored.</li>
<li>For a local hard disk, the only thing I could get to work reliably on NT with all browsers and
AppletViewers is leaving the <span class="html">CODEBASE</span> out entirely. You may find for your
platform you have to code it something like this: <span class="html">///C|//MyDir/</span> or
<!-- macro Path \{C&colon;\MyDir\ \} --><!-- generated --><span class="path"><span class="drive">C:</span>\<span class="dir">MyDir</span>\</span><!-- /generated by Path -->.</li>
<li>Your <span class="html">ARCHIVE=</span> parameter must have a list of the jar files, separated by
commas. If you have too little or too much qualification, or if you fail to use the file naming
conventions of your server, you will be in trouble.</li>
<li>You tried to do something in an unsigned <span class="class">Applet</span> only signed <span class="class">Applet</span>s are allowed to do such as reading restricted system properties, perhaps
indirectly via <span class="class">Color</span>. <span class="method">getColor</span>.</li></ul>

u: (appfailedtostart) Most likely you are using the Microsoft Express <span class="writtenincpp">C++</span>
compiler to create your <!-- macro Acronym JNI --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/jni.html">JNI</a> \(<span class="means"><span class="ac">J</span>ava <span class="ac">N</span>ative <span class="ac">I</span>nterface</span> \)<!-- /generated by Acronym -->. It links to a run time library
which is not present. You need to put the necessary redistribution support <!-- macro Acronym DLLs --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/dll.html">DLLs</a> \(<span class="means"><span class="ac">D</span>ynamic <span class="ac">L</span>ink <span class="ac">L</span>ibraries</span> \)<!-- /generated by Acronym -->
on the path, or install the entire <span class="writtenincpp">C++</span> run time library on all client
machines. The catch is other vendors may do the same thing and you can have versioning problems, more
commonly known as <!-- macro Acronym DLL --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/dll.html">DLL</a> \(<span class="means"><span class="ac">D</span>ynamic <span class="ac">L</span>ink <span class="ac">L</span>ibrary</span> \)<!-- /generated by Acronym -->
hell. Some compilers allow /MT or /LD static linking to create a standalone <!-- macro Acronym DLL --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Library">DLL</abbr></span><!-- /generated by Acronym -->
that does not require a run time, but Express 2008 will not.

u: (application failed to start) Most likely you are using the Microsoft Express <span class="writtenincpp">C++</span>
compiler to create your <!-- macro Acronym JNI --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/jni.html">JNI</a> \(<span class="means"><span class="ac">J</span>ava <span class="ac">N</span>ative <span class="ac">I</span>nterface</span> \)<!-- /generated by Acronym -->. It links to a run time library
which is not present. You need to put the necessary redistribution support <!-- macro Acronym DLLs --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/dll.html">DLLs</a> \(<span class="means"><span class="ac">D</span>ynamic <span class="ac">L</span>ink <span class="ac">L</span>ibraries</span> \)<!-- /generated by Acronym -->
on the path, or install the entire <span class="writtenincpp">C++</span> run time library on all client
machines. The catch is other vendors may do the same thing and you can have versioning problems, more
commonly known as <!-- macro Acronym DLL --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/dll.html">DLL</a> \(<span class="means"><span class="ac">D</span>ynamic <span class="ac">L</span>ink <span class="ac">L</span>ibrary</span> \)<!-- /generated by Acronym -->
hell. Some compilers allow /MT or /LD static linking to create a standalone <!-- macro Acronym DLL --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Library">DLL</abbr></span><!-- /generated by Acronym -->
that does not require a run time, but Express 2008 will not.

u: ARITHMETIC_EXCEPTION (arithmeticexception) 
\<div id="title">What is the ArithmeticException?</div>
You divided by 0. If it occurred in a <span class="method">paint</span> method, likely this occurred as a result of creating a <span class="class">Font</span> with zero height.

u: (arithmetic exception)
^reuse(ARITHMETIC_EXCEPTION)

u: ARRAY_INDEX_OUT_OF_BOUNDS (arrayindexoutofbounds) 
\<div class="title">What is the ArrayIndexOutOfBoundsException?</div>
The ArrayIndexOutOfBoundsException happens when you try to access an array at an index that is out of bounds. Remember that arrays are indexed from 0 to the length of the array minus 1. For example, say I created an array like this:
<div class="mlcode">
int[] array = new int[10];
</div>
Then, the array has 10 entries and is indexed from 0 to 9. If I try to access an index out of this range, I'll get an ArrayIndexOutOfBoundsException.
<div class="mlcode">
array[0] = 0; //Ok
array[1] = 1; //Ok
array[10] = 10; //Out of bounds!
array[-1] = -1; //Out of bounds!
</div>
Click <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/array.html#ARRAYINITGOTCHAS">here</a> or ask me some questions about this for more information!

u: (array index out of bounds exception)
^reuse(ARRAY_INDEX_OUT_OF_BOUNDS)

u: (arraystoreexception) The rules of casting arrays and casting the elements of arrays are subtle. See the
<a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/array.html#ARRAYSTOREEXCEPTION">gotchas</a>.

u: (array store exception) The rules of casting arrays and casting the elements of arrays are subtle. See the
<a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/array.html#ARRAYSTOREEXCEPTION">gotchas</a>.

u: (badconfiguration) If you got that error message while trying to launch a <!-- macro Acronym JWS --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/javawebstart.html">JWS</a> \(<span class="means"><span class="ac">J</span>ava <span class="ac">W</span>eb <span class="ac">S</span>tart</span> \)<!-- /generated by Acronym -->
application, it means your deployment files are corrupt. This is easy to fix. At the command line, type
<span class="bat">javaws.exe -viewer</span>. Then delete all the applications. Then launch your apps
again.

u: (bad configuration) If you got that error message while trying to launch a <!-- macro Acronym JWS --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/javawebstart.html">JWS</a> \(<span class="means"><span class="ac">J</span>ava <span class="ac">W</span>eb <span class="ac">S</span>tart</span> \)<!-- /generated by Acronym -->
application, it means your deployment files are corrupt. This is easy to fix. At the command line, type
<span class="bat">javaws.exe -viewer</span>. Then delete all the applications. Then launch your apps
again.

u: (badmagicnumber) <ul><li>The first four bytes of a class file are supposed to say <span class="binary">CAFEBABE</span> in
hex. They don't.</li>
<li>Most likely the problem is you uploaded your class file to your Web server using
<!-- macro Acronym FTP --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/ftp.html">FTP</a> \(<span class="means"><span class="ac">F</span>ile <span class="ac">T</span>ransfer <span class="ac">P</span>rotocol</span> \)<!-- /generated by Acronym -->
<!-- macro Acronym ASCII --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/ascii.html">ASCII</a> \(<span class="means"><span class="ac">A</span>merican <span class="ac">S</span>tandard <span class="ac">C</span>ode for <span class="ac">I</span>nformation <span class="ac">I</span>nterchange</span> \)<!-- /generated by Acronym -->
mode instead of BINARY mode which mangled the class file.</li>
<li><!-- macro Bug 4151665 "Sometimes when a class is not found it gets reported as corrupt instead." --><!-- generated --><div class="bug">Oracle bug number <a class="oracle" target="_blank" href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=4151665">4151665</a> : Sometimes when a class is not found it gets reported as corrupt instead.</div>
<!-- /generated by Bug --></li>
<li>Novices get this error when they try to run a program without compiling it first e.g
<!-- macro JDisplay errormessages.example201.bat --><!-- generated --><pre class="bat"><span class="batcomment">rem oops, javac.exe takes *.java</span>
<span class="batcomment">rem java.exe takes *.class without the .class extension.</span>
java<span class="op">.</span>exe MyClass<span class="op">.</span>java</pre><!-- /generated by JDisplay --></li>
<li>If the class file seems ok, consider the possibility some other class file on the classpath is the
one the ClassLoader is looking at.</li></ul>
<div class="see"><a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/javaexe.html">java.exe</a><br/>
<a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/javacexe.html">javac.exe</a></div>

u: (bad magic number) <ul><li>The first four bytes of a class file are supposed to say <span class="binary">CAFEBABE</span> in
hex. They don't.</li>
<li>Most likely the problem is you uploaded your class file to your Web server using
<!-- macro Acronym FTP --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/ftp.html">FTP</a> \(<span class="means"><span class="ac">F</span>ile <span class="ac">T</span>ransfer <span class="ac">P</span>rotocol</span> \)<!-- /generated by Acronym -->
<!-- macro Acronym ASCII --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/ascii.html">ASCII</a> \(<span class="means"><span class="ac">A</span>merican <span class="ac">S</span>tandard <span class="ac">C</span>ode for <span class="ac">I</span>nformation <span class="ac">I</span>nterchange</span> \)<!-- /generated by Acronym -->
mode instead of BINARY mode which mangled the class file.</li>
<li><!-- macro Bug 4151665 "Sometimes when a class is not found it gets reported as corrupt instead." --><!-- generated --><div class="bug">Oracle bug number <a class="oracle" target="_blank" href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=4151665">4151665</a> : Sometimes when a class is not found it gets reported as corrupt instead.</div>
<!-- /generated by Bug --></li>
<li>Novices get this error when they try to run a program without compiling it first e.g
<!-- macro JDisplay errormessages.example201.bat --><!-- generated --><pre class="bat"><span class="batcomment">rem oops, javac.exe takes *.java</span>
<span class="batcomment">rem java.exe takes *.class without the .class extension.</span>
java<span class="op">.</span>exe MyClass<span class="op">.</span>java</pre><!-- /generated by JDisplay --></li>
<li>If the class file seems ok, consider the possibility some other class file on the classpath is the
one the ClassLoader is looking at.</li></ul>
<div class="see"><a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/javaexe.html">java.exe</a><br/>
<a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/javacexe.html">javac.exe</a></div>

u: (badmajor) Most likely your class files use a more recent version of Java than the Java runtime you
are using. This most commonly happens with Applets in <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/ie.html">Internet
Explorer</a> which supports only an ancient version of Java.

u: (bad major) Most likely your class files use a more recent version of Java than the Java runtime you
are using. This most commonly happens with Applets in <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/ie.html">Internet
Explorer</a> which supports only an ancient version of Java.

u: (blankapplet) Check the <span class="html">&lt;applet code=<span class="dq">com.mindprod.mypackage.Myclass.class</span></span> tag. It is spelled <span class="html">code</span>
not <span class="html">class</span>.

u: (blank applet) Check the <span class="html">&lt;applet code=<span class="dq">com.mindprod.mypackage.Myclass.class</span></span> tag. It is spelled <span class="html">code</span>
not <span class="html">class</span>.

u: (boxlayout) You wrote something like:
<br/>
<span class="class">JFrame</span>.<span class="k">this</span>. <span class="method">setLayout</span> \(
<span class="k">new</span> <span class="class">BoxLayout</span> \( <span class="k">this</span>, <span class="class">BoxLayout</span>. <span class="constant">PAGE_AXIS</span> \) \);
<br/>
instead of:
<br/>
<span class="class">JFrame</span>.<span class="var">contentPane</span>.<span class="method">setLayout</span> \( <span class="k">new</span> <span class="class">BoxLayout</span> \( <span class="var">contentPane</span>, <span class="class">BoxLayout</span>. <span class="constant">PAGE_AXIS</span> \)
\);

u: (boxlayout can't be shared.) You wrote something like:
<br/>
<span class="class">JFrame</span>.<span class="k">this</span>. <span class="method">setLayout</span> \(
<span class="k">new</span> <span class="class">BoxLayout</span> \( <span class="k">this</span>, <span class="class">BoxLayout</span>. <span class="constant">PAGE_AXIS</span> \) \);
<br/>
instead of:
<br/>
<span class="class">JFrame</span>.<span class="var">contentPane</span>.<span class="method">setLayout</span> \( <span class="k">new</span> <span class="class">BoxLayout</span> \( <span class="var">contentPane</span>, <span class="class">BoxLayout</span>. <span class="constant">PAGE_AXIS</span> \)
\);

u: (brokenpipe) Your pipe connection stopped working. You may have run out of scratch disk space. You may
have clogged <!-- macro Acronym RAM --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/bgloss/ram.html">RAM</a> \(<span class="means"><span class="ac">R</span>andom <span class="ac">A</span>ccess <span class="ac">M</span>emory</span> \)<!-- /generated by Acronym -->
by failing to release resources. Your compressed datastream may be corrupt. The process reading a pipe may
have closed it, so you can't write more data to it.

u: (broken pipe) Your pipe connection stopped working. You may have run out of scratch disk space. You may
have clogged <!-- macro Acronym RAM --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/bgloss/ram.html">RAM</a> \(<span class="means"><span class="ac">R</span>andom <span class="ac">A</span>ccess <span class="ac">M</span>emory</span> \)<!-- /generated by Acronym -->
by failing to release resources. Your compressed datastream may be corrupt. The process reading a pipe may
have closed it, so you can't write more data to it.

u: (cantcreatevirtualmachine) You wrote <span class="bat">java -xxxx.jar</span> instead of <span class="bat">java -jar
xxxx.jar</span>

u: (can't create virtual machine) You wrote <span class="bat">java -xxxx.jar</span> instead of <span class="bat">java -jar
xxxx.jar</span>

u: (certificateexception) You are trying to connect to some site on the web with <!-- macro Acronym SSL --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/ssl.html">SSL</a> \(<span class="means"><span class="ac">S</span>ecure <span class="ac">S</span>ockets <span class="ac">L</span>ayer</span> \)<!-- /generated by Acronym -->. Its certificate is defective.
Use the <a class="com" target="_blank" href="https://sslanalyzer.comodoca.com/">Comodo SSL Analyser</a> to examine the suspicious
certificate. One of the alternative names should exactly match the hostname. \(The analyser will not tell
you about the certificate chain. However, the Chrome browser will if you click the green lock to the left
of the <!-- macro Acronym URL --><!-- generated --><span class="acronym"><abbr title="Uniform Resource Locator">URL</abbr></span><!-- /generated by Acronym -->. \) If there is no match, suggest to that website they rename the host or get an amended
certificate.

u: (certificate exception) You are trying to connect to some site on the web with <!-- macro Acronym SSL --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/ssl.html">SSL</a> \(<span class="means"><span class="ac">S</span>ecure <span class="ac">S</span>ockets <span class="ac">L</span>ayer</span> \)<!-- /generated by Acronym -->. Its certificate is defective.
Use the <a class="com" target="_blank" href="https://sslanalyzer.comodoca.com/">Comodo SSL Analyser</a> to examine the suspicious
certificate. One of the alternative names should exactly match the hostname. \(The analyser will not tell
you about the certificate chain. However, the Chrome browser will if you click the green lock to the left
of the <!-- macro Acronym URL --><!-- generated --><span class="acronym"><abbr title="Uniform Resource Locator">URL</abbr></span><!-- /generated by Acronym -->. \) If there is no match, suggest to that website they rename the host or get an amended
certificate.

u: (charconversionexception) Typically you are reading a <span class="encoding">UTF-8</span> stream and encounter an
illegal binary pattern that has no meaning.

u: (char conversion exception) Typically you are reading a <span class="encoding">UTF-8</span> stream and encounter an
illegal binary pattern that has no meaning.

u: (classhaswrongversion) You trying to run class files compiled with <!-- macro Acronym JDK --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/jdk.html">JDK</a> \(<span class="means"><span class="ac">J</span>ava <span class="ac">D</span>evelopment <span class="ac">K</span>it</span> \)<!-- /generated by Acronym -->
version <span class="version">1.5</span> on an older <!-- macro Acronym JRE --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/jre.html">JRE</a> \(<span class="means"><span class="ac">J</span>ava <span class="ac">R</span>untime <span class="ac">E</span>nvironment</span> \)<!-- /generated by Acronym -->
version <span class="version">1.4.</span>

u: (class has wrong version) You trying to run class files compiled with <!-- macro Acronym JDK --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/jdk.html">JDK</a> \(<span class="means"><span class="ac">J</span>ava <span class="ac">D</span>evelopment <span class="ac">K</span>it</span> \)<!-- /generated by Acronym -->
version <span class="version">1.5</span> on an older <!-- macro Acronym JRE --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/jre.html">JRE</a> \(<span class="means"><span class="ac">J</span>ava <span class="ac">R</span>untime <span class="ac">E</span>nvironment</span> \)<!-- /generated by Acronym -->
version <span class="version">1.4.</span>

u: (containswrongclass) If the name of your class is HelloWorld then the name of the source file must be
<span class="file">HelloWorld.java</span> and case matters. You also get this error if you have the wrong
or missing package statement. You could also have the source file in the wrong directory if you have a
complex package structure. If your package is called <span class="java">com.mindprod.com.mindprod.mypackage</span> and your class <span class="java">MyClass</span>, then
you had better be in the root directory and the class file for <span class="java">MyClass</span> hand
better be called <span class="file">MyClass.class</span> and better live in <span class="dir">com/mindprod/mypackage</span>, with matching case!

u: (class file contains wrong class) If the name of your class is HelloWorld then the name of the source file must be
<span class="file">HelloWorld.java</span> and case matters. You also get this error if you have the wrong
or missing package statement. You could also have the source file in the wrong directory if you have a
complex package structure. If your package is called <span class="java">com.mindprod.com.mindprod.mypackage</span> and your class <span class="java">MyClass</span>, then
you had better be in the root directory and the class file for <span class="java">MyClass</span> hand
better be called <span class="file">MyClass.class</span> and better live in <span class="dir">com/mindprod/mypackage</span>, with matching case!

u: (classcastexception) <ul><li>You have cast a <span class="class">Class</span> object to a <span class="class">Class</span> that
is not the same class or a super class of the <span class="class">Class</span> object. This exception
happens when you cast a generic reference to an <span class="interface">Object</span> to an invalid
class. You must cast it to the class of the <span class="interface">Object</span> or one of its
superclasses. You can find out what class the <span class="interface">Object</span> actually is with
<span class="method">getClass</span> \(\).<span class="method">toString</span> \(\).</li>
<li>You can cast null into anything without raising a <span class="interface">ClassCastException</span>. Generally, this is a Good Thing™. Otherwise every cast
would need an <span class="java">if</span> to specially handle the null case. You might be tempted to
count on <span class="interface">ClassCastException</span>s to filter out nulls for you. The following
code will <strong>not</strong> raise a <span class="package">java.lang</span>. <span class="interface">
ClassCastException</span>: <!-- macro JDisplay classcastexception.example1.javafrag --><!-- generated --><pre class="java"><span class="class">Cat </span><span class="vardef">c </span><span class="op">= </span><span class="k">null</span><span class="sc">;</span>
<span class="class">Object </span><span class="vardef">o </span><span class="op">= </span><span class="var">c</span><span class="sc">;</span>
<span class="class">Dalmatian </span><span class="vardef">d </span><span class="op">= </span><span class="fence1"> \(</span><span class="class">Dalmatian</span><span class="fence1"> \)</span><span class="var">o</span><span class="sc">;</span></pre><!-- /generated by JDisplay -->
<p>In other words, there is one universal representation for <span class="k">null</span>, not a
special one for each class. For more detail see <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/gotchas.html#CASTS">gotchas</a>.</p></li>
<li>If the error message complains you have tried to cast class <span class="class">X</span> to class
<span class="class">X</span>, it is complaining that the two different class <span class="class">X</span>es belong to different class loaders. Even though they have the same name, they are
treated like logically separate classes.</li>
<li>If the <span class="class">ClassCastException</span> occurs during a sort, chances are you forgot
the <span class="k">implements</span> <span class="interface">Comparable</span>. See the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/gotchas.html#CASTS">gotchas</a> for details.</li>
<li>If you write a factory method like this: <!-- macro JDisplay errormessages.example3.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// typical factory method, that overrides a similar method in the base class</span>
<span class="k">protected </span><span class="class">CameraButton </span><span class="methoddef">cameraButtonFactory </span><span class="fence1"> \(</span> <span class="k">int </span><span class="vardef">buttonNumber </span><span class="fence1"> \)</span>
   <span class="fence1"> \{</span>
   <span class="ik">return </span><span class="k">new </span><span class="class">LabelledCameraButton </span><span class="fence1"> \(</span> <span class="var">buttonNumber</span><span class="op">, </span><span class="k">this </span><span class="fence1"> \)</span><span class="sc">;</span>
   <span class="fence1"> \}</span></pre><!-- /generated by JDisplay -->
<p>and it seems to be producing the wrong kind of objects - ones from the base class's
version of the method, check the precise spelling and signature of the method. It had better exactly
match the one in the base class. If it does not exactly match, it will not override. To guard against
this error <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/bali.html#OVERRIDE">Bali</a> proposes an explicit <span class="k">overrides</span> keyword.</p></li></ul>

u: (class cast exception) <ul><li>You have cast a <span class="class">Class</span> object to a <span class="class">Class</span> that
is not the same class or a super class of the <span class="class">Class</span> object. This exception
happens when you cast a generic reference to an <span class="interface">Object</span> to an invalid
class. You must cast it to the class of the <span class="interface">Object</span> or one of its
superclasses. You can find out what class the <span class="interface">Object</span> actually is with
<span class="method">getClass</span> \(\).<span class="method">toString</span> \(\).</li>
<li>You can cast null into anything without raising a <span class="interface">ClassCastException</span>. Generally, this is a Good Thing™. Otherwise every cast
would need an <span class="java">if</span> to specially handle the null case. You might be tempted to
count on <span class="interface">ClassCastException</span>s to filter out nulls for you. The following
code will <strong>not</strong> raise a <span class="package">java.lang</span>. <span class="interface">
ClassCastException</span>: <!-- macro JDisplay classcastexception.example1.javafrag --><!-- generated --><pre class="java"><span class="class">Cat </span><span class="vardef">c </span><span class="op">= </span><span class="k">null</span><span class="sc">;</span>
<span class="class">Object </span><span class="vardef">o </span><span class="op">= </span><span class="var">c</span><span class="sc">;</span>
<span class="class">Dalmatian </span><span class="vardef">d </span><span class="op">= </span><span class="fence1"> \(</span><span class="class">Dalmatian</span><span class="fence1"> \)</span><span class="var">o</span><span class="sc">;</span></pre><!-- /generated by JDisplay -->
<p>In other words, there is one universal representation for <span class="k">null</span>, not a
special one for each class. For more detail see <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/gotchas.html#CASTS">gotchas</a>.</p></li>
<li>If the error message complains you have tried to cast class <span class="class">X</span> to class
<span class="class">X</span>, it is complaining that the two different class <span class="class">X</span>es belong to different class loaders. Even though they have the same name, they are
treated like logically separate classes.</li>
<li>If the <span class="class">ClassCastException</span> occurs during a sort, chances are you forgot
the <span class="k">implements</span> <span class="interface">Comparable</span>. See the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/gotchas.html#CASTS">gotchas</a> for details.</li>
<li>If you write a factory method like this: <!-- macro JDisplay errormessages.example3.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// typical factory method, that overrides a similar method in the base class</span>
<span class="k">protected </span><span class="class">CameraButton </span><span class="methoddef">cameraButtonFactory </span><span class="fence1"> \(</span> <span class="k">int </span><span class="vardef">buttonNumber </span><span class="fence1"> \)</span>
   <span class="fence1"> \{</span>
   <span class="ik">return </span><span class="k">new </span><span class="class">LabelledCameraButton </span><span class="fence1"> \(</span> <span class="var">buttonNumber</span><span class="op">, </span><span class="k">this </span><span class="fence1"> \)</span><span class="sc">;</span>
   <span class="fence1"> \}</span></pre><!-- /generated by JDisplay -->
<p>and it seems to be producing the wrong kind of objects - ones from the base class's
version of the method, check the precise spelling and signature of the method. It had better exactly
match the one in the base class. If it does not exactly match, it will not override. To guard against
this error <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/bali.html#OVERRIDE">Bali</a> proposes an explicit <span class="k">overrides</span> keyword.</p></li></ul>

u: (class format error) <ul><li>You mangled the class file <!-- macro Acronym FTP --><!-- generated --><span class="acronym"><abbr title="File Transfer Protocol">FTP</abbr></span><!-- /generated by Acronym -->
upload by doing it as <!-- macro Acronym ASCII --><!-- generated --><span class="acronym"><abbr title="American Standard Code for Information Interchange">ASCII</abbr></span><!-- /generated by Acronym -->
instead of binary.</li>
<li>Further, your web server must be configured to send *.class files as binary rather than
<!-- macro Acronym ASCII --><!-- generated --><span class="acronym"><abbr title="American Standard Code for Information Interchange">ASCII</abbr></span><!-- /generated by Acronym -->.
It needs a <!-- macro Acronym MIME --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/mime.html">MIME</a> \(<span class="means"><span class="ac">M</span>ultipurpose <span class="ac">I</span>nternet <span class="ac">M</span>ail <span class="ac">E</span>xtensions</span> \)<!-- /generated by Acronym -->
configuration entry to define *.class files. See <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/mime.html">MIME</a> for
details.</li>
<li>Sometimes it is actually a <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/classpath.html">CLASSPATH</a> problem. It
can't find the class.</li>
<li>ClassFormatError: class already loaded. You have a class file twice on the classpath. It has
nothing to do with the <!-- macro Acronym DLL --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Library">DLL</abbr></span><!-- /generated by Acronym -->
already being loaded. Thankfully, having a <!-- macro Acronym DLL --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Library">DLL</abbr></span><!-- /generated by Acronym -->
still loaded from the last time you ran is not considered an error.</li>
<li>ClassFormatError: bad major version. Your ancient 1.1 Java runtime does not know what to do with a
program compiled under <!-- macro Acronym JDK --><!-- generated --><span class="acronym"><abbr title="Java Development Kit">JDK</abbr></span><!-- /generated by Acronym -->
<span class="version">1.4..</span></li></ul>

u: (classformaterror) <ul><li>You mangled the class file <!-- macro Acronym FTP --><!-- generated --><span class="acronym"><abbr title="File Transfer Protocol">FTP</abbr></span><!-- /generated by Acronym -->
upload by doing it as <!-- macro Acronym ASCII --><!-- generated --><span class="acronym"><abbr title="American Standard Code for Information Interchange">ASCII</abbr></span><!-- /generated by Acronym -->
instead of binary.</li>
<li>Further, your web server must be configured to send *.class files as binary rather than
<!-- macro Acronym ASCII --><!-- generated --><span class="acronym"><abbr title="American Standard Code for Information Interchange">ASCII</abbr></span><!-- /generated by Acronym -->.
It needs a <!-- macro Acronym MIME --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/mime.html">MIME</a> \(<span class="means"><span class="ac">M</span>ultipurpose <span class="ac">I</span>nternet <span class="ac">M</span>ail <span class="ac">E</span>xtensions</span> \)<!-- /generated by Acronym -->
configuration entry to define *.class files. See <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/mime.html">MIME</a> for
details.</li>
<li>Sometimes it is actually a <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/classpath.html">CLASSPATH</a> problem. It
can't find the class.</li>
<li>ClassFormatError: class already loaded. You have a class file twice on the classpath. It has
nothing to do with the <!-- macro Acronym DLL --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Library">DLL</abbr></span><!-- /generated by Acronym -->
already being loaded. Thankfully, having a <!-- macro Acronym DLL --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Library">DLL</abbr></span><!-- /generated by Acronym -->
still loaded from the last time you ran is not considered an error.</li>
<li>ClassFormatError: bad major version. Your ancient 1.1 Java runtime does not know what to do with a
program compiled under <!-- macro Acronym JDK --><!-- generated --><span class="acronym"><abbr title="Java Development Kit">JDK</abbr></span><!-- /generated by Acronym -->
<span class="version">1.4..</span></li></ul>

u: (classnotfoundexception) Thrown when an application tries to load a class through its string name using
<!-- macro Qualified Class.forName class --><!-- generated --><span class="qualified"><span class="class">Class</span>.<span class="method">forName</span></span><!-- /generated by Qualified -->,
<span class="class">ClassLoader</span>. <span class="method">findSystemClass</span> or <span class="class">ClassLoader</span>. <span class="method">loadClass</span>. It is similar to <span class="class">NoClassDefFoundError</span>.
<ul><li>this occurs only at run time. Usually it means a class that was present during compilation has
disappeared, or the classpath has changed so it is no longer accessible. It could also happen if you
dynamically load a class and the class is not on the classpath.</li>
<li>Are you spelling the fully qualified class name correctly on your Applet tag. Case matters. Double
check the case of every letter.</li>
<li>The class itself references another class that can't be found. Are you using
<!-- macro Acronym APIs --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/api.html">APIs</a> \(<span class="means"><span class="ac">A</span>pplication <span class="ac">P</span>rogramming <span class="ac">I</span>nterfaces</span> \)<!-- /generated by Acronym -->
from versions of Java that aren't supported by your browser?</li>
<li>Try specifying <span class="html">CODEBASE=<span class="dq">.</span></span> as an Applet parameter,
to ensure that the browser is looking in the right place.</li>
<li>Are there packages involved? If so, the Applet class needs to be in a package-appropriate
subdirectory, or better still in a jar, not in the same directory as the <!-- macro Acronym HTML --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/html.html">HTML</a> \(<span class="means"><span class="ac">H</span>yper<span class="ac">t</span>ext <span class="ac">M</span>arkup <span class="ac">L</span>anguage</span> \)<!-- /generated by Acronym -->
file. If not, you ought to look into putting every class in a some package before you deploy code; the
default \(nameless \) package is intended only for test code that won't be distributed.</li>
<li>Look at your jar with WinZip. Are all the classes and package names correct with the correct case?
Make sure all the case information is perfect on your jar-building line.</li>
<li><span class="class">Class</span>.<span class="interface">forName</span> \(<span class="class">String</span> \) is short hand for <!-- macro Qualified Class.forName class --><!-- generated --><span class="qualified"><span class="class">Class</span>.<span class="method">forName</span></span><!-- /generated by Qualified -->
\( <span class="class">String</span>, <span class="k">initaliseTrue</span>, <span class="var">currentClassLoader</span> \). If the class you are looking for was loaded by a different
<span class="class">ClassLoader</span> you won't find the class.</li>
<li>If you are deploying with FStart, make sure you have included all the jars used in your
<!-- macro Acronym JNLP --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/jnlp.html">JNLP</a> \(<span class="means"><span class="ac">J</span>ava <span class="ac">N</span>etwork <span class="ac">L</span>aunching <span class="ac">P</span>rotocol</span> \)<!-- /generated by Acronym -->. You may
have forgotten some that were on the classpath or in the ext directory that the app needs. Make sure
you spelled all the jar names correctly and they actually exist on the download site in the directory
you expected.</li>
<li>In the <span class="click">Java control panel ⇒ advanced ⇒ Java plug-in</span>, trying
unticking the option enable the next generation Java plug-in.</li>
<li>If you have been playing games with class loaders, the problem can be that you are using the wrong
classloader to load some particular class. You might have meant: <span class="class">ClassLoader</span>. <span class="method">getSystemClassLoader</span>, or
<!-- macro Qualified Thread.currentThread class --><!-- generated --><span class="qualified"><span class="class">Thread</span>.<span class="method">currentThread</span></span><!-- /generated by Qualified -->
\(\). <span class="method">getContextClassLoader</span> \(\) or some other. Keep in mind that the same class
loaded in different classloaders are effectively different classes.</li></ul>

u: (class not found exception) Thrown when an application tries to load a class through its string name using
<!-- macro Qualified Class.forName class --><!-- generated --><span class="qualified"><span class="class">Class</span>.<span class="method">forName</span></span><!-- /generated by Qualified -->,
<span class="class">ClassLoader</span>. <span class="method">findSystemClass</span> or <span class="class">ClassLoader</span>. <span class="method">loadClass</span>. It is similar to <span class="class">NoClassDefFoundError</span>.
<ul><li>this occurs only at run time. Usually it means a class that was present during compilation has
disappeared, or the classpath has changed so it is no longer accessible. It could also happen if you
dynamically load a class and the class is not on the classpath.</li>
<li>Are you spelling the fully qualified class name correctly on your Applet tag. Case matters. Double
check the case of every letter.</li>
<li>The class itself references another class that can't be found. Are you using
<!-- macro Acronym APIs --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/api.html">APIs</a> \(<span class="means"><span class="ac">A</span>pplication <span class="ac">P</span>rogramming <span class="ac">I</span>nterfaces</span> \)<!-- /generated by Acronym -->
from versions of Java that aren't supported by your browser?</li>
<li>Try specifying <span class="html">CODEBASE=<span class="dq">.</span></span> as an Applet parameter,
to ensure that the browser is looking in the right place.</li>
<li>Are there packages involved? If so, the Applet class needs to be in a package-appropriate
subdirectory, or better still in a jar, not in the same directory as the <!-- macro Acronym HTML --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/html.html">HTML</a> \(<span class="means"><span class="ac">H</span>yper<span class="ac">t</span>ext <span class="ac">M</span>arkup <span class="ac">L</span>anguage</span> \)<!-- /generated by Acronym -->
file. If not, you ought to look into putting every class in a some package before you deploy code; the
default \(nameless \) package is intended only for test code that won't be distributed.</li>
<li>Look at your jar with WinZip. Are all the classes and package names correct with the correct case?
Make sure all the case information is perfect on your jar-building line.</li>
<li><span class="class">Class</span>.<span class="interface">forName</span> \(<span class="class">String</span> \) is short hand for <!-- macro Qualified Class.forName class --><!-- generated --><span class="qualified"><span class="class">Class</span>.<span class="method">forName</span></span><!-- /generated by Qualified -->
\( <span class="class">String</span>, <span class="k">initaliseTrue</span>, <span class="var">currentClassLoader</span> \). If the class you are looking for was loaded by a different
<span class="class">ClassLoader</span> you won't find the class.</li>
<li>If you are deploying with FStart, make sure you have included all the jars used in your
<!-- macro Acronym JNLP --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/jnlp.html">JNLP</a> \(<span class="means"><span class="ac">J</span>ava <span class="ac">N</span>etwork <span class="ac">L</span>aunching <span class="ac">P</span>rotocol</span> \)<!-- /generated by Acronym -->. You may
have forgotten some that were on the classpath or in the ext directory that the app needs. Make sure
you spelled all the jar names correctly and they actually exist on the download site in the directory
you expected.</li>
<li>In the <span class="click">Java control panel ⇒ advanced ⇒ Java plug-in</span>, trying
unticking the option enable the next generation Java plug-in.</li>
<li>If you have been playing games with class loaders, the problem can be that you are using the wrong
classloader to load some particular class. You might have meant: <span class="class">ClassLoader</span>. <span class="method">getSystemClassLoader</span>, or
<!-- macro Qualified Thread.currentThread class --><!-- generated --><span class="qualified"><span class="class">Thread</span>.<span class="method">currentThread</span></span><!-- /generated by Qualified -->
\(\). <span class="method">getContextClassLoader</span> \(\) or some other. Keep in mind that the same class
loaded in different classloaders are effectively different classes.</li></ul>

u: (clienttransport) You were using JAX to access <!-- macro Acronym AWS --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/amazon.html">AWS</a> \(<span class="means"><span class="ac">A</span>mazon <span class="ac">W</span>eb <span class="ac">S</span>ervices</span> \)<!-- /generated by Acronym -->
or something similar. A request failed. You can catch the more general <span class="package">javax.xml.ws</span>.<span class="class">WebServiceException</span> instead.

u: (client transport exception) You were using JAX to access <!-- macro Acronym AWS --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/amazon.html">AWS</a> \(<span class="means"><span class="ac">A</span>mazon <span class="ac">W</span>eb <span class="ac">S</span>ervices</span> \)<!-- /generated by Acronym -->
or something similar. A request failed. You can catch the more general <span class="package">javax.xml.ws</span>.<span class="class">WebServiceException</span> instead.

u: (concurrentmod) You tried to delete or add to a <span class="interface">Collection</span> while you were in the middle of
running an <span class="interface">Iterator</span> over it. To get around this, you must remove elements
via the <em>Iterator</em> object using <span class="interface">Iterator</span>.<span class="method">remove</span> rather than the usual <span class="interface">Collection</span>. <span class="method">remove</span>. You can add elements if you use <span class="interface">ListIterator</span>.<span class="method">add</span>. See <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/hashmap.html#REMOVE">sample code</a>. The problem also shows up if you remove elements on one thread
while another thread is iterating. Oddly you also get it with
<!-- macro JDisplay somestringset.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// this fails with a ConcurrentModificationException</span>
<span class="ik">for </span><span class="fence1"> \(</span> <span class="class">String </span><span class="vardef">s</span><span class="op">: </span><span class="class">SomeStringSet </span><span class="fence1"> \)</span></pre><!-- /generated by JDisplay -->
To fix that, export to an array and iterate over that.

u: (concurrent modification exception) You tried to delete or add to a <span class="interface">Collection</span> while you were in the middle of
running an <span class="interface">Iterator</span> over it. To get around this, you must remove elements
via the <em>Iterator</em> object using <span class="interface">Iterator</span>.<span class="method">remove</span> rather than the usual <span class="interface">Collection</span>. <span class="method">remove</span>. You can add elements if you use <span class="interface">ListIterator</span>.<span class="method">add</span>. See <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/hashmap.html#REMOVE">sample code</a>. The problem also shows up if you remove elements on one thread
while another thread is iterating. Oddly you also get it with
<!-- macro JDisplay somestringset.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// this fails with a ConcurrentModificationException</span>
<span class="ik">for </span><span class="fence1"> \(</span> <span class="class">String </span><span class="vardef">s</span><span class="op">: </span><span class="class">SomeStringSet </span><span class="fence1"> \)</span></pre><!-- /generated by JDisplay -->
To fix that, export to an array and iterate over that.

u: (connectexception) You were probing a server on the net. A request timed out. You can catch the more general
<span class="package">java.net</span>.<span class="class">SocketException</span> or <span class="package">java.io</span>.<span class="class">IOException</span> instead.

u: (connect exception) You were probing a server on the net. A request timed out. You can catch the more general
<span class="package">java.net</span>.<span class="class">SocketException</span> or <span class="package">java.io</span>.<span class="class">IOException</span> instead.

u: (couldnotfind) Your main method must look exactly like this:
<em>public static void main \(final String \[\] args \)</em> You can leave out the <span class="k">final</span>.
Do not add any <span class="k">throws</span> clauses!

u: (could not find or load the main class) Your main method must look exactly like this:
<em>public static void main \(final String \[\] args \)</em> You can leave out the <span class="k">final</span>.
Do not add any <span class="k">throws</span> clauses!

u: (nomainclass) Check that you have the correct package name and class name in the Java source, in the
<span class="ext">*.mft</span> file and the <span class="ext">*.jnlp</span> file line <span class="ini">&lt;application-desc main-class=<span class="dq">com.mindprod.setclock.SetClock</span>
/&gt;</span>

u: (could not find main-class) Check that you have the correct package name and class name in the Java source, in the
<span class="ext">*.mft</span> file and the <span class="ext">*.jnlp</span> file line <span class="ini">&lt;application-desc main-class=<span class="dq">com.mindprod.setclock.SetClock</span>
/&gt;</span>

u: (reserveobjectheap) You asked for too much <!-- macro Acronym RAM --><!-- generated --><span class="acronym"><abbr title="Random Access Memory">RAM</abbr></span><!-- /generated by Acronym -->
on <span class="exe">java.exe</span> <span class="bat">-Xmx</span> parameter.

u: (could not reserve enough space for object heap.) You asked for too much <!-- macro Acronym RAM --><!-- generated --><span class="acronym"><abbr title="Random Access Memory">RAM</abbr></span><!-- /generated by Acronym -->
on <span class="exe">java.exe</span> <span class="bat">-Xmx</span> parameter.

u: (doesntcontainexpected) <ul><li>missing caps on new MyClass \(\) reference.</li>
<li>missing caps on MyClass \(\) obj declaration.</li></ul>

u: (does not contain expected) <ul><li>missing caps on new MyClass \(\) reference.</li>
<li>missing caps on MyClass \(\) obj declaration.</li></ul>

u: (eofexception) Try using <span class="class">ZipFile</span> instead of <span class="class">ZipInputStream</span> to read a zip created by <span class="class">ZipOutputStream</span>. See
<a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/zip.html">Zip</a> for why.

u: (eof exception in zip) Try using <span class="class">ZipFile</span> instead of <span class="class">ZipInputStream</span> to read a zip created by <span class="class">ZipOutputStream</span>. See
<a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/zip.html">Zip</a> for why.

u: (exceptioninitalizererror) <ul><li>You wrote some code like this:
<!-- macro JDisplay errormessages.exceptionininitializererror.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// one way to trigger an ExceptionInInitializerError</span>
<span class="k">private static final int </span><span class="var">a</span><span class="sc">;</span>

<span class="k">static </span><span class="fence1"> \{</span>
 <span class="commentslashslash">// someMethod throws some sort of Exception</span>
 <span class="var">a </span><span class="op">= </span><span class="method">someMethod</span><span class="fence1"> \(</span><span class="fence1"> \)</span><span class="sc">;</span>
<span class="fence1"> \}</span></pre><!-- /generated by JDisplay --></li>
<li>If the class you are loading throws an <span class="class">Exception</span> during the <span class="k">static</span> initialisation, it will show up as a <span class="class">ExceptionInInitializerError</span> rather than the original <span class="class">Exception</span>, which your code may not be prepared to handle. When your code later goes to
use the class, you will get a <span class="class">NoClassDefFoundError</span>.</li>
<li>If you get this error when you run in Netscape, but not when debugging, check that all your class
files are being included in the jar file.</li>
<li>Catch the <span class="class">Exception</span> in the init code and do an <span class="var">e</span>.<span class="method">printStackTrace</span> \( <span class="var">err</span> \) to get more
detail on what is going wrong.</li></ul>

u: (exception ininitializer error) <ul><li>You wrote some code like this:
<!-- macro JDisplay errormessages.exceptionininitializererror.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// one way to trigger an ExceptionInInitializerError</span>
<span class="k">private static final int </span><span class="var">a</span><span class="sc">;</span>

<span class="k">static </span><span class="fence1"> \{</span>
 <span class="commentslashslash">// someMethod throws some sort of Exception</span>
 <span class="var">a </span><span class="op">= </span><span class="method">someMethod</span><span class="fence1"> \(</span><span class="fence1"> \)</span><span class="sc">;</span>
<span class="fence1"> \}</span></pre><!-- /generated by JDisplay --></li>
<li>If the class you are loading throws an <span class="class">Exception</span> during the <span class="k">static</span> initialisation, it will show up as a <span class="class">ExceptionInInitializerError</span> rather than the original <span class="class">Exception</span>, which your code may not be prepared to handle. When your code later goes to
use the class, you will get a <span class="class">NoClassDefFoundError</span>.</li>
<li>If you get this error when you run in Netscape, but not when debugging, check that all your class
files are being included in the jar file.</li>
<li>Catch the <span class="class">Exception</span> in the init code and do an <span class="var">e</span>.<span class="method">printStackTrace</span> \( <span class="var">err</span> \) to get more
detail on what is going wrong.</li></ul>

u: (exceptioninthread) You have written a <span class="interface">Comparator</span> that violates transitivity. If
A &gt; B and B &gt; C then it must be that A &gt; C

u: (exception in thread) You have written a <span class="interface">Comparator</span> that violates transitivity. If
A &gt; B and B &gt; C then it must be that A &gt; C

u: (handshakealert) Thrown when Java tries to connect with an improperly configured <!-- macro Acronym SSL --><!-- generated --><span class="acronym"><abbr title="Secure Sockets Layer">SSL</abbr></span><!-- /generated by Acronym --> server. Fix by turning off check with system property
jsse.enableSNIExtension=false.
Get more info with -D<span class="property">javax.net.debug=all</span>

u: (handshake alert) Thrown when Java tries to connect with an improperly configured <!-- macro Acronym SSL --><!-- generated --><span class="acronym"><abbr title="Secure Sockets Layer">SSL</abbr></span><!-- /generated by Acronym --> server. Fix by turning off check with system property
jsse.enableSNIExtension=false.
Get more info with -D<span class="property">javax.net.debug=all</span>

u: (headlessexception) Thrown when code that is dependent on a keyboard, display, or mouse is called in an
environment that does not support a keyboard, display, or mouse. Check the <span class="propkey">java.awt.headless</span>=<span class="propvalue">true</span> Java System property. If you are
using X11, check that the <span class="env">DISPLAY</span> environment variable points to the X11
server.

u: (headless exception) Thrown when code that is dependent on a keyboard, display, or mouse is called in an
environment that does not support a keyboard, display, or mouse. Check the <span class="propkey">java.awt.headless</span>=<span class="propvalue">true</span> Java System property. If you are
using X11, check that the <span class="env">DISPLAY</span> environment variable points to the X11
server.

u: (illegalaccesserror) <ul><li>In Netscape, inner classes can't seem to access private variables of the enclosing class. You
don't discover this until run time.</li>
<li>Failing to use both the &lt;APPLET ARCHIVE= parameter to specify a comma-delimited list of jar file
names and the CODEBASE= parameter in the form of an absolute <span class="html">http://</span>-style
reference to where the jar file is.</li>
<li>Generally problems with CLASSPATH, CODEBASE and ARCHIVE.</li>
<li>Classes in jar have the wrong amount of qualification stored with them.</li>
<li>Classes in packages are not stored in the correspondingly named directories. See <span class="setvar">CLASSPATH</span> and java.exe in the Java glossary for a fuller discussion.</li>
<li>Using an old library with new code. In the old library a method might be private where in the new
it might be public.</li></ul>

u: (illegal access error) <ul><li>In Netscape, inner classes can't seem to access private variables of the enclosing class. You
don't discover this until run time.</li>
<li>Failing to use both the &lt;APPLET ARCHIVE= parameter to specify a comma-delimited list of jar file
names and the CODEBASE= parameter in the form of an absolute <span class="html">http://</span>-style
reference to where the jar file is.</li>
<li>Generally problems with CLASSPATH, CODEBASE and ARCHIVE.</li>
<li>Classes in jar have the wrong amount of qualification stored with them.</li>
<li>Classes in packages are not stored in the correspondingly named directories. See <span class="setvar">CLASSPATH</span> and java.exe in the Java glossary for a fuller discussion.</li>
<li>Using an old library with new code. In the old library a method might be private where in the new
it might be public.</li></ul>

u: (illegalblocksizeexception) Literally, the problem is the message to be decrypted is not a multiple of <span class="stat">8</span>
bytes, when the encryption padding algorithm should have made it a multiple of <span class="stat">8</span> bytes. Possible causes:
<ul><li>The message was truncated or garbled in the process of storing, <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/armouring.html">armouring</a> or transmitting it. Dump it out in <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/hex.html">hex</a> immediately after encrypting and immediately before decrypting to make sure it is
identical.</li>
<li>You specified different encryption and decryption algorithm options.</li>
<li>For good measure, make sure both the encryption and decryption were done with the same version of
the <!-- macro Acronym JCE --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/jce.html">JCE</a> \(<span class="means"><span class="ac">J</span>ava <span class="ac">C</span>ryptography <span class="ac">E</span>xtension</span> \)<!-- /generated by Acronym -->.</li></ul>

u: (illegal block size exception) Literally, the problem is the message to be decrypted is not a multiple of <span class="stat">8</span>
bytes, when the encryption padding algorithm should have made it a multiple of <span class="stat">8</span> bytes. Possible causes:
<ul><li>The message was truncated or garbled in the process of storing, <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/armouring.html">armouring</a> or transmitting it. Dump it out in <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/hex.html">hex</a> immediately after encrypting and immediately before decrypting to make sure it is
identical.</li>
<li>You specified different encryption and decryption algorithm options.</li>
<li>For good measure, make sure both the encryption and decryption were done with the same version of
the <!-- macro Acronym JCE --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/jce.html">JCE</a> \(<span class="means"><span class="ac">J</span>ava <span class="ac">C</span>ryptography <span class="ac">E</span>xtension</span> \)<!-- /generated by Acronym -->.</li></ul>

u: (illegalnonvirtual) An inner class is not permitted to call private methods of the enclosing outer class. It is
permitted to call protected methods. This error message appears in the old <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/symantec.html">Symantec 2.5a</a> Java only when you have debugging turned off. Normally the compiler
should catch this error, but if it doesn't it will show up at run time with this strange error
message.

u: (illegal nonvirtual) An inner class is not permitted to call private methods of the enclosing outer class. It is
permitted to call protected methods. This error message appears in the old <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/symantec.html">Symantec 2.5a</a> Java only when you have debugging turned off. Normally the compiler
should catch this error, but if it doesn't it will show up at run time with this strange error
message.

u: (wontpaint) See the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/image.html#DEBUGGING">list of possible causes</a>.

u: (image won't paint) See the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/image.html#DEBUGGING">list of possible causes</a>.

u: (identifierexpected) You are using old version of <span class="exe">javadoc.exe</span> that does not understand
the newer Java syntax, or perhaps you are trying to generate Javadoc before you have a clean compile.

u: (identifier expected) You are using old version of <span class="exe">javadoc.exe</span> that does not understand
the newer Java syntax, or perhaps you are trying to generate Javadoc before you have a clean compile.

u: (incompatibletypes) Make sure you declare your <span class="class">File</span> collection class with
<span class="k">implements</span> <span class="interface">Iterable</span>&lt; <span class="class">File</span>&gt; and its <span class="method">iterator</span> method with <span class="k">public</span> <span class="interface">Iterator</span>&lt; <span class="class">File</span>&gt;
<span class="method">iterator</span> \(\)

u: (incompatible types) Make sure you declare your <span class="class">File</span> collection class with
<span class="k">implements</span> <span class="interface">Iterable</span>&lt; <span class="class">File</span>&gt; and its <span class="method">iterator</span> method with <span class="k">public</span> <span class="interface">Iterator</span>&lt; <span class="class">File</span>&gt;
<span class="method">iterator</span> \(\)

u: (incompatibleclasschangeerror) <ul><li>You forgot the static on your main method.</li>
<li>Any illegal use of a legal class.</li>
<li>You have made a change to a class and are still referencing it from an another class by its old
signatures. Try deleting all class files and recompiling everything.</li></ul>

u: (incompatible class change error) <ul><li>You forgot the static on your main method.</li>
<li>Any illegal use of a legal class.</li>
<li>You have made a change to a class and are still referencing it from an another class by its old
signatures. Try deleting all class files and recompiling everything.</li></ul>

u: (interoverflow) You have too many <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/interned.html">interned</a> strings. Some older
<!-- macro Acronym JVM --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/jvm.html">JVM</a> \(<span class="means"><span class="ac">J</span>ava <span class="ac">V</span>irtual <span class="ac">M</span>achine</span> \)<!-- /generated by Acronym -->
's may limit you to <span class="stat">64</span>K Strings, which leaves perhaps <span class="stat">50,000</span> for your application.

u: (intern overflow) You have too many <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/interned.html">interned</a> strings. Some older
<!-- macro Acronym JVM --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/jvm.html">JVM</a> \(<span class="means"><span class="ac">J</span>ava <span class="ac">V</span>irtual <span class="ac">M</span>achine</span> \)<!-- /generated by Acronym -->
's may limit you to <span class="stat">64</span>K Strings, which leaves perhaps <span class="stat">50,000</span> for your application.

u: (invalidargumentexception) <p>In the Diffie-Hellman handshake for SSL/TLS you need a prime. Neither <span class="stat">512</span>
nor <span class="stat">1024</span> are primes, so they are using some imprecise vocabulary.
The other end is insisting on using a prime not in the range.
You can bump it up to either <span class="stat">1024</span> or <span class="stat">2048</span> with:</p>
<!-- macro JDisplay ephemeraldhkeysize.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// increase limit of Diffie-Hellman key size to 1024 or 2048</span>
<span class="class">System</span><span class="op">.</span><span class="method">setProperty</span><span class="fence1"> \(</span> <span class="string">"jdk.tls.ephemeralDHKeySize"</span><span class="op">, </span><span class="string">"2048"</span> <span class="fence1"> \)</span><span class="sc">;</span></pre><!-- /generated by JDisplay -->
This is the problem with <!-- macro Acronym SSL --><!-- generated --><span class="acronym"><abbr title="Secure Sockets Layer">SSL</abbr></span><!-- /generated by Acronym -->. It is implemented as a Chinese menu. You can't count
on universal connection. All you can do is try a third party <!-- macro Acronym SSL --><!-- generated --><span class="acronym"><abbr title="Secure Sockets Layer">SSL</abbr></span><!-- /generated by Acronym --> implementation \(e.g. BouncyCastle \) in your Java. <!-- macro RFC 3526 --><!-- generated --><a class="org" target="_blank" href="http://rfc3526.openrfc.org/">RFC 3526</a><!-- /generated by RFC --> defines primes up to
<span class="stat">8192</span> Java is a bit behind the curve. <!-- macro Acronym IBM --><!-- generated --><span class="acronymdef">IBM</span> \(<span class="means"><span class="ac">I</span>nternational <span class="ac">B</span>usiness <span class="ac">M</span>achines</span> \)<!-- /generated by Acronym --> says
<span class="stat">1024</span>
bit primes are too weak. In other words, Java only supports keys considered too weak.
Diffie-Hellman has two key sizes: the discrete log key size, and the discrete log group size. These map onto q and p respectively.
Reasonable sizes for them, as of <span class="date">2016</span>, are <span class="stat">256</span> bits for q and <span class="stat">2048</span> bits for p.
If you want security for a decade into the future, you should look for <span class="stat">3072</span> bit keys.

u: (invalid argument exception) <p>In the Diffie-Hellman handshake for SSL/TLS you need a prime. Neither <span class="stat">512</span>
nor <span class="stat">1024</span> are primes, so they are using some imprecise vocabulary.
The other end is insisting on using a prime not in the range.
You can bump it up to either <span class="stat">1024</span> or <span class="stat">2048</span> with:</p>
<!-- macro JDisplay ephemeraldhkeysize.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// increase limit of Diffie-Hellman key size to 1024 or 2048</span>
<span class="class">System</span><span class="op">.</span><span class="method">setProperty</span><span class="fence1"> \(</span> <span class="string">"jdk.tls.ephemeralDHKeySize"</span><span class="op">, </span><span class="string">"2048"</span> <span class="fence1"> \)</span><span class="sc">;</span></pre><!-- /generated by JDisplay -->
This is the problem with <!-- macro Acronym SSL --><!-- generated --><span class="acronym"><abbr title="Secure Sockets Layer">SSL</abbr></span><!-- /generated by Acronym -->. It is implemented as a Chinese menu. You can't count
on universal connection. All you can do is try a third party <!-- macro Acronym SSL --><!-- generated --><span class="acronym"><abbr title="Secure Sockets Layer">SSL</abbr></span><!-- /generated by Acronym --> implementation \(e.g. BouncyCastle \) in your Java. <!-- macro RFC 3526 --><!-- generated --><a class="org" target="_blank" href="http://rfc3526.openrfc.org/">RFC 3526</a><!-- /generated by RFC --> defines primes up to
<span class="stat">8192</span> Java is a bit behind the curve. <!-- macro Acronym IBM --><!-- generated --><span class="acronymdef">IBM</span> \(<span class="means"><span class="ac">I</span>nternational <span class="ac">B</span>usiness <span class="ac">M</span>achines</span> \)<!-- /generated by Acronym --> says
<span class="stat">1024</span>
bit primes are too weak. In other words, Java only supports keys considered too weak.
Diffie-Hellman has two key sizes: the discrete log key size, and the discrete log group size. These map onto q and p respectively.
Reasonable sizes for them, as of <span class="date">2016</span>, are <span class="stat">256</span> bits for q and <span class="stat">2048</span> bits for p.
If you want security for a decade into the future, you should look for <span class="stat">3072</span> bit keys.

u: (serialversionuid) <ul><li>You serialised some objects, then modified the class source code a tad, say by adding another
convenience constructor. Java panicked and decided the old objects were no longer compatible when you
tried to read them back in. You can soothe it by manually assigning your objects class version numbers
with <!-- macro JDisplay errormessages.example102.javafrag --><!-- generated --><iframe class="jdisplay" height="93" src="snippet/iframe/errormessages.example102.javafrag.htm" style="overflow:scroll" width="800"></iframe><!-- /generated by JDisplay --></li>
<li>It is up to you to change that number any time the class changes in a way that would affect the old
object's ability to be read back with the new class definition. Java has some flexibility for the
old and new objects not to have a perfect match. <span class="var">serialVersionUID</span> is a magic
variable name. Spell it exactly like that. If you have used a <span class="var">serialVersionUID</span>, perhaps you have actually changed the layout of the class fields without
a new <span class="var">serialVersionUID</span>. Finally, perhaps you failed to provide a no-arg
constructor.</li>
<li>You serialised some objects, then changed the format of the objects, rightly changed the
<span class="var">serialVersionUID</span>, then tried to read the old object back with the new class
definition.</li></ul>
<!-- macro OnOracle \{https://docs.oracle.com/javase/8/docs/platform/serialization/spec/exceptions.html#3601 \} \{InvalidClassException \} --><!-- generated --><div class="oracle"><a class="oracle" href="https://docs.oracle.com/javase/8/docs/platform/serialization/spec/exceptions.html#3601">Oracle's Java 1.8 documentation on : <strong>InvalidClassException</strong></a></div>
<!-- /generated by OnOracle -->

u: (invalid class exception) <ul><li>You serialised some objects, then modified the class source code a tad, say by adding another
convenience constructor. Java panicked and decided the old objects were no longer compatible when you
tried to read them back in. You can soothe it by manually assigning your objects class version numbers
with <!-- macro JDisplay errormessages.example102.javafrag --><!-- generated --><iframe class="jdisplay" height="93" src="snippet/iframe/errormessages.example102.javafrag.htm" style="overflow:scroll" width="800"></iframe><!-- /generated by JDisplay --></li>
<li>It is up to you to change that number any time the class changes in a way that would affect the old
object's ability to be read back with the new class definition. Java has some flexibility for the
old and new objects not to have a perfect match. <span class="var">serialVersionUID</span> is a magic
variable name. Spell it exactly like that. If you have used a <span class="var">serialVersionUID</span>, perhaps you have actually changed the layout of the class fields without
a new <span class="var">serialVersionUID</span>. Finally, perhaps you failed to provide a no-arg
constructor.</li>
<li>You serialised some objects, then changed the format of the objects, rightly changed the
<span class="var">serialVersionUID</span>, then tried to read the old object back with the new class
definition.</li></ul>
<!-- macro OnOracle \{https://docs.oracle.com/javase/8/docs/platform/serialization/spec/exceptions.html#3601 \} \{InvalidClassException \} --><!-- generated --><div class="oracle"><a class="oracle" target="_blank" href="https://docs.oracle.com/javase/8/docs/platform/serialization/spec/exceptions.html#3601">Oracle's Java 1.8 documentation on : <strong>InvalidClassException</strong></a></div>
<!-- /generated by OnOracle -->

u: (invocationtarget) This is a wrapper exception. You will get one if a method or constructor you invoke with
reflection throws an exception. Because the compiler cannot analyse methods called through reflection, the
reflection runtime wraps any errors thrown in the called routines in a predictable exception called the
<span class="class">InvocationTargetException</span> which you can catch. Use <span class="class">InvocationTargetException</span>. <span class="method">getCause</span> and <span class="class">InvocationTargetException</span>. <span class="method">getTargetException</span> to find more
details. One way to trigger one is to initialise variables in an <span class="class">Applet</span> rather
than setting their initial values in the <span class="method">init</span> method.

u: (invocation target exception) This is a wrapper exception. You will get one if a method or constructor you invoke with
reflection throws an exception. Because the compiler cannot analyse methods called through reflection, the
reflection runtime wraps any errors thrown in the called routines in a predictable exception called the
<span class="class">InvocationTargetException</span> which you can catch. Use <span class="class">InvocationTargetException</span>. <span class="method">getCause</span> and <span class="class">InvocationTargetException</span>. <span class="method">getTargetException</span> to find more
details. One way to trigger one is to initialise variables in an <span class="class">Applet</span> rather
than setting their initial values in the <span class="method">init</span> method.

u: (ioexception) <ul><li>Something went wrong with I/O, usually you got the filename wrong or presumed the wrong default
directory.</li>
<li>If you get it in <span class="exe">jar.exe</span>, your <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jar.html#MANIFEST">
manifest</a> is malformed.
<div class="ini">Main-Class: com.mindprod.canadiantax.CanadianTaxCalculator</div></li>
<li>Note, there is no space before the colon and exactly one afterwards. There must be a line feed at
the end of the line. There is no <span class="ini">.class</span> on the end.</li></ul>

u: (io exception) <ul><li>Something went wrong with I/O, usually you got the filename wrong or presumed the wrong default
directory.</li>
<li>If you get it in <span class="exe">jar.exe</span>, your <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jar.html#MANIFEST">
manifest</a> is malformed.
<div class="ini">Main-Class: com.mindprod.canadiantax.CanadianTaxCalculator</div></li>
<li>Note, there is no space before the colon and exactly one afterwards. There must be a line feed at
the end of the line. There is no <span class="ini">.class</span> on the end.</li></ul>

u: (jarsnotsignedwithsamecert) You will have to resign all jars mentioned in the <!-- macro Acronym JNLP --><!-- generated --><span class="acronym"><abbr title="Java Network Launching Protocol">JNLP</abbr></span><!-- /generated by Acronym -->
file with the same certificate.

u: (jar not signed with same certificate) You will have to resign all jars mentioned in the <!-- macro Acronym JNLP --><!-- generated --><span class="acronym"><abbr title="Java Network Launching Protocol">JNLP</abbr></span><!-- /generated by Acronym -->
file with the same certificate.

u: (javamailobsolete) Make sure you don't have more that one <span class="file">mail.jar</span> or
<span class="file">jmf.jar</span> on the classpath/ext directory.

u: (javamail obsolete) Make sure you don't have more that one <span class="file">mail.jar</span> or
<span class="file">jmf.jar</span> on the classpath/ext directory.

u: (jrenotinstalled) If the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jre.html">JRE</a> is not installed, install it. Normally, you only need
the latest version,<!-- macro JRE fullversion --><!-- generated --><span class="version">1.8.0_131</span><!-- /generated by JRE -->, none of the older ones. This is a common Java Web Start problem. The
<!-- macro Acronym JRE --><!-- generated --><span class="acronym"><abbr title="Java Runtime Environment">JRE</abbr></span><!-- /generated by Acronym -->
is indeed installed and works fine for non Java Web Start apps. Java Web Start apps sometimes work fine
launched from a browser, but fail when launched from a desktop shortcut. My theory is somehow the
registry or the Java Web Start development cache gets corrupted in a way that causes Java to use a
version of <span class="exe">javaws.exe</span> with the wrong matching directory. There will be at least
three copies on your machine <span class="exe"><!-- macro JRE path --><!-- generated --><span class="path"><span class="drive">C:</span>\<span class="dir">Program Files</span>\<span class="dir">java</span>\<span class="dir">jre1.8.0_131</span>\</span><!-- /generated by JRE -->\bin\javaws.exe</span>, <span class="exe"><!-- macro JDK path --><!-- generated --><span class="path"><span class="drive">J:</span>\<span class="dir">Program Files</span>\<span class="dir">java</span>\<span class="dir">jdk1.8.0_131</span>\</span><!-- /generated by JDK -->
\bin\javaws.exe</span> and <span class="exe">C:\Windows\System32\javaws.exe</span>.
<p>Kludges around the bug include:</p>
<ul><li>Always launch Java Web Start apps inside a browser.</li>
<li>Create your own desktop shortcuts with an explicit link to a local copy of the <span class="ext">*.jnlp</span> file and possibly <span class="exe"><!-- macro JRE path --><!-- generated --><span class="path"><span class="drive">C:</span>\<span class="dir">Program Files</span>\<span class="dir">java</span>\<span class="dir">jre1.8.0_131</span>\</span><!-- /generated by JRE -->
\bin\javaws.exe</span> if you are unsure associations are set to use that version of <span class="exe">javaws.exe</span>.</li>
<li>Explicitly launch the <!-- macro Acronym JRE --><!-- generated --><span class="acronym"><abbr title="Java Runtime Environment">JRE</abbr></span><!-- /generated by Acronym -->
<span class="exe">javaws.exe</span> with <span class="exe"><!-- macro JRE path --><!-- generated --><span class="path"><span class="drive">C:</span>\<span class="dir">Program Files</span>\<span class="dir">java</span>\<span class="dir">jre1.8.0_131</span>\</span><!-- /generated by JRE -->
\bin\javaws.exe</span> <span class="parm">-viewer</span> and use it to launch your apps or create your
shortcuts.</li></ul>Here is how to fix the problem permanently. Unfortunately, this is a difficult, time-consuming
procedure and does not always work:
<ol class="instructions"><li>Uninstall any <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jre.html">JRE</a>s and <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jdk.html">JDKs</a> including the <!-- macro Acronym SQL --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/sql.html">SQL</a> \(<span class="means"><span class="ac">S</span>tandard <span class="ac">Q</span>uery <span class="ac">L</span>anguage</span> \)<!-- /generated by Acronym -->
database.</li>
<li>Manually strip out any remaining JRE/JDK files, including those in <span class="dir">C:\Windows\System32</span> and <span class="dir">C:\Users\
<var>user</var>\AppData\Roaming\Sun\Java\Deployment\cache</span>.</li>
<li>Manually delete any references to the JRE/JDK from the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/registry.html">registry</a>.</li>
<li>Remove any Java Web Start desktop shortcuts or menu items.</li>
<li>run a <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/registrycleaner.html">registry cleaner</a>.</li>
<li>run <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/ntregopt.html">NTRegOpt</a>.</li>
<li>Reboot.</li>
<li>Reinstall the <!-- macro Acronym JDK --><!-- generated --><span class="acronym"><abbr title="Java Development Kit">JDK</abbr></span><!-- /generated by Acronym -->
with associated <!-- macro Acronym JRE --><!-- generated --><span class="acronym"><abbr title="Java Runtime Environment">JRE</abbr></span><!-- /generated by Acronym -->, making sure you select a
drive explicitly for each of the three pieces, the <!-- macro Acronym JDK --><!-- generated --><span class="acronym"><abbr title="Java Development Kit">JDK</abbr></span><!-- /generated by Acronym -->, the database and the <!-- macro Acronym JRE --><!-- generated --><span class="acronym"><abbr title="Java Runtime Environment">JRE</abbr></span><!-- /generated by Acronym -->.</li>
<li>Fix up the set environment and the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/ext.html">ext</a> directories.</li></ol>

u: ( jre not installed) If the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jre.html">JRE</a> is not installed, install it. Normally, you only need
the latest version,<!-- macro JRE fullversion --><!-- generated --><span class="version">1.8.0_131</span><!-- /generated by JRE -->, none of the older ones. This is a common Java Web Start problem. The
<!-- macro Acronym JRE --><!-- generated --><span class="acronym"><abbr title="Java Runtime Environment">JRE</abbr></span><!-- /generated by Acronym -->
is indeed installed and works fine for non Java Web Start apps. Java Web Start apps sometimes work fine
launched from a browser, but fail when launched from a desktop shortcut. My theory is somehow the
registry or the Java Web Start development cache gets corrupted in a way that causes Java to use a
version of <span class="exe">javaws.exe</span> with the wrong matching directory. There will be at least
three copies on your machine <span class="exe"><!-- macro JRE path --><!-- generated --><span class="path"><span class="drive">C:</span>\<span class="dir">Program Files</span>\<span class="dir">java</span>\<span class="dir">jre1.8.0_131</span>\</span><!-- /generated by JRE -->\bin\javaws.exe</span>, <span class="exe"><!-- macro JDK path --><!-- generated --><span class="path"><span class="drive">J:</span>\<span class="dir">Program Files</span>\<span class="dir">java</span>\<span class="dir">jdk1.8.0_131</span>\</span><!-- /generated by JDK -->
\bin\javaws.exe</span> and <span class="exe">C:\Windows\System32\javaws.exe</span>.
<p>Kludges around the bug include:</p>
<ul><li>Always launch Java Web Start apps inside a browser.</li>
<li>Create your own desktop shortcuts with an explicit link to a local copy of the <span class="ext">*.jnlp</span> file and possibly <span class="exe"><!-- macro JRE path --><!-- generated --><span class="path"><span class="drive">C:</span>\<span class="dir">Program Files</span>\<span class="dir">java</span>\<span class="dir">jre1.8.0_131</span>\</span><!-- /generated by JRE -->
\bin\javaws.exe</span> if you are unsure associations are set to use that version of <span class="exe">javaws.exe</span>.</li>
<li>Explicitly launch the <!-- macro Acronym JRE --><!-- generated --><span class="acronym"><abbr title="Java Runtime Environment">JRE</abbr></span><!-- /generated by Acronym -->
<span class="exe">javaws.exe</span> with <span class="exe"><!-- macro JRE path --><!-- generated --><span class="path"><span class="drive">C:</span>\<span class="dir">Program Files</span>\<span class="dir">java</span>\<span class="dir">jre1.8.0_131</span>\</span><!-- /generated by JRE -->
\bin\javaws.exe</span> <span class="parm">-viewer</span> and use it to launch your apps or create your
shortcuts.</li></ul>Here is how to fix the problem permanently. Unfortunately, this is a difficult, time-consuming
procedure and does not always work:
<ol class="instructions"><li>Uninstall any <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jre.html">JRE</a>s and <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jdk.html">JDKs</a> including the <!-- macro Acronym SQL --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/sql.html">SQL</a> \(<span class="means"><span class="ac">S</span>tandard <span class="ac">Q</span>uery <span class="ac">L</span>anguage</span> \)<!-- /generated by Acronym -->
database.</li>
<li>Manually strip out any remaining JRE/JDK files, including those in <span class="dir">C:\Windows\System32</span> and <span class="dir">C:\Users\
<var>user</var>\AppData\Roaming\Sun\Java\Deployment\cache</span>.</li>
<li>Manually delete any references to the JRE/JDK from the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/registry.html">registry</a>.</li>
<li>Remove any Java Web Start desktop shortcuts or menu items.</li>
<li>run a <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/registrycleaner.html">registry cleaner</a>.</li>
<li>run <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/ntregopt.html">NTRegOpt</a>.</li>
<li>Reboot.</li>
<li>Reinstall the <!-- macro Acronym JDK --><!-- generated --><span class="acronym"><abbr title="Java Development Kit">JDK</abbr></span><!-- /generated by Acronym -->
with associated <!-- macro Acronym JRE --><!-- generated --><span class="acronym"><abbr title="Java Runtime Environment">JRE</abbr></span><!-- /generated by Acronym -->, making sure you select a
drive explicitly for each of the three pieces, the <!-- macro Acronym JDK --><!-- generated --><span class="acronym"><abbr title="Java Development Kit">JDK</abbr></span><!-- /generated by Acronym -->, the database and the <!-- macro Acronym JRE --><!-- generated --><span class="acronym"><abbr title="Java Runtime Environment">JRE</abbr></span><!-- /generated by Acronym -->.</li>
<li>Fix up the set environment and the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/ext.html">ext</a> directories.</li></ol>

u: (loadclassnotfound) Likely you are using Microsoft's ancient old <!-- macro Acronym JVM --><!-- generated --><span class="acronym"><abbr title="Java Virtual Machine">JVM</abbr></span><!-- /generated by Acronym -->
in Internet Explorer that supports only up to Java 1.1.4. Check which version of Java you are using with
<a class="applet" target="_blank" href="http://mindprod.com/applet/wassup.html">Wassup</a>. Make sure you are using the most recent
<a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jre.html">JRE</a> in <span class="file"><!-- macro JRE path --><!-- generated --><span class="path"><span class="drive">C:</span>\<span class="dir">Program Files</span>\<span class="dir">java</span>\<span class="dir">jre1.8.0_131</span>\</span><!-- /generated by JRE --></span>.

u: (load: class not found) Likely you are using Microsoft's ancient old <!-- macro Acronym JVM --><!-- generated --><span class="acronym"><abbr title="Java Virtual Machine">JVM</abbr></span><!-- /generated by Acronym -->
in Internet Explorer that supports only up to Java 1.1.4. Check which version of Java you are using with
<a class="applet" target="_blank" href="http://mindprod.com/applet/wassup.html">Wassup</a>. Make sure you are using the most recent
<a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jre.html">JRE</a> in <span class="file"><!-- macro JRE path --><!-- generated --><span class="path"><span class="drive">C:</span>\<span class="dir">Program Files</span>\<span class="dir">java</span>\<span class="dir">jre1.8.0_131</span>\</span><!-- /generated by JRE --></span>.

u: (methodnotfound) This is caused by using obsolete jar files. The version of the class in the jar is missing
the method, but at compile time, the java file had the method. The way to avoid this is to do a clean
compile periodically deleting all class and jar files and rebuilding them.

u: (method not found) This is caused by using obsolete jar files. The version of the class in the jar is missing
the method, but at compile time, the java file had the method. The way to avoid this is to do a clean
compile periodically deleting all class and jar files and rebuilding them.

u: (missingresourceexception) The resources you need are missing from the main jar or the jar they live in is not on the
classpath. Keep in mind that jars have an internal manifest classpath and Java Web Start using the
<!-- macro Acronym JNLP --><!-- generated --><span class="acronym"><abbr title="Java Network Launching Protocol">JNLP</abbr></span><!-- /generated by Acronym -->
file to locate the jars.

u: (missing resource exception) The resources you need are missing from the main jar or the jar they live in is not on the
classpath. Keep in mind that jars have an internal manifest classpath and Java Web Start using the
<!-- macro Acronym JNLP --><!-- generated --><span class="acronym"><abbr title="Java Network Launching Protocol">JNLP</abbr></span><!-- /generated by Acronym -->
file to locate the jars.

u: (noclassdeffounderror) <!-- macro Image "jgloss/scream.jpg" "scream" --><!-- generated --><img alt="scream" height="398" src="../image/jgloss/scream.jpg" width="295"/><!-- /generated by Image -->
<br/>
<em>Detail from The Scream, by Edvard Munch</em>
<p><span class="package">java.lang</span>.<span class="class">NoClassDefFoundError:</span> <span class="package">mypackage</span>/ <span class="class">MyClass</span>
<br/>
This one is a bitch to track down. It has so many causes. Java is so picky! A misplaced comma, quote,
semicolon, extraneous extension or even the wrong upper/lower case can derail the whole program. I hope
some will implement the <a class="project" target="_blank" href="http://mindprod.com/project/noclassdeffounderror.html">NoClassDefFoundError Amanuensis</a> to make the problem easier to
track down.</p>
<p>Sun explains that it is thrown when Java Virtual Machine or a ClassLoader instance tries to load in
the definition of a class \(as part of a normal method call or as part of creating a new instance using
the new expression \) and no definition of the class could be found. The searched-for class definition
existed when the currently executing class was compiled, but the definition can no longer be found. It is
similar to a <span class="class">ClassNotFoundException</span>. This gives you the hint that a <span class="class">NoClassDefFoundError</span> problem was <strong>not</strong> with caused by a 
<!-- macro Qualified Class.forName class --><!-- generated --><span class="qualified"><span class="class">Class</span>.<span class="method">forName</span></span><!-- /generated by Qualified -->.</p>
<ol><li>Essentially the problem is the place and name where you put the class file, free-standing on disk
or inside a jar, does match the place and name it should have, based on the classpath, the package name
and the class name. Everything is case-sensitive and sensitive to the tiniest typo. Unfortunately,
there is currently no <a class="project" target="_blank" href="http://mindprod.com/project/noclassdeffounderror.html">tool</a> to tell
you where the class should be placed \(usually there are several possibilities \) or where it is now.</li>
<li>You got the class name wrong on the <span class="exe">java.exe</span> command line. It must include
the full package name and class separated by dots, without the <span class="ext">*.class</span> e.g.
<div class="bat">java.exe com.mindprod.converter.Convert</div><strong>not</strong> just the class:
<div class="bat">java.exe Convert</div>Newbies often get in trouble by adding a <span class="ext">*.java</span> or <span class="ext">*.class</span> suffix. In contrast, <span class="exe">javac.exe</span> demands the <span class="ext">*.java</span> extension.</li>
<li>You get an error message like this: <span class="output">Exception in thread <span class="quoted">main</span> java.lang.NoClassDefFoundError: XXX/java</span>. When attempting to compile, you
keyed <span class="bat">java.exe XXX.java</span> instead of <span class="bat">javac.exe
XXX.java</span>.</li>
<li>Java can't find the class mentioned. It is missing from the jar or classpath. Java may need
it because it occurs as a class or superclass in a serialised <span class="class">ObjectStream</span>
or because you called a method of that class. You don't find out about the problem at compile
time or even load time. You only find out when you actually go to use that missing class. The missing
class was present when the class referencing it was compiled \(perhaps on somebody else's machine \)
but the missing class is no longer accessible. To fix a vanilla <span class="class">NoClassDefFoundError</span>, search the all the jar files on your machine for the missing
class. <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/searchreplace.html">Funduc Search and Replace</a> will do that. If you
can't find it, scour the web for a download. When you find it, make sure its jar is on the
general classpath, the project classpath, the command line classpath or in the <span class="dir">ext</span> directories of the various <!-- macro Acronym JREs --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/jre.html">JREs</a> \(<span class="means"><span class="ac">J</span>ava <span class="ac">R</span>untime <span class="ac">E</span>nvironments</span> \)<!-- /generated by Acronym -->
you have installed. There will be at least two <span class="dir">ext</span> directories.
<div class="see"><a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/classpath.html">classpath</a></div></li>
<li>Three diagnostic tools you may find helpful:
<ol><li>To dump the classpath that you are actually using at some point in your code insert: You must
first determine if the classpath is correct with:
<!-- macro JDisplay classpath.getclasspath.javafrag --><!-- generated --><iframe class="jdisplay" height="461" src="snippet/iframe/classpath.getclasspath.javafrag.htm" style="overflow:scroll" width="800"></iframe><!-- /generated by JDisplay --></li>
<li>If you have a jar or more than one class, assign each class to a package! Package-less classes
are for one-shot, single-class throw-away experiments only.</li>
<li>Then when you are sure the jar or directory you want is truly on the classpath \(it is not
sufficient for the directory that the jar is in be on the classpath \), then check the contents of
the jar with <span class="exe">jarlook</span> to make sure your package/class is in there, spelled
precisely, including case. You can <a class="download" target="_blank" href="http://mindprod.com/products1.html#JARLOOK">download
jarlook</a> with source.</li>
<li><a class="download" target="_blank" href="http://mindprod.com/products1.html#JARCHECK">download jarcheck</a> as well. It will
help you detect problems with unexpected target versions of class files in your jars.</li></ol></li>
<li>Recall that reconstitution of serialized files uses <span class="class">Class</span>. <span class="method">forName</span> to instantiate all the classes buried in the files. <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/genjar.html">Genjar</a> or equivalent does not know to include these classes in your jar. It is up to
you to include all the classes you need manually. You will keep getting the dreaded <span class="class">NoClassDefFoundError</span> until you have nailed them all.</li>
<li>Look for a typo in spelling the class file name in the file or in the command line invoking its
main method. Copy/paste to make sure they are absolutely identical including case.</li>
<li>Check your <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/classpath.html">classpath</a>. Make sure you used semicolons or
colons as appropriate. Don't specify null fields in your classpath, e.g. two semicolons in a
row.</li>
<li>The problem is essentially either the class is not on the classpath or the classpath is wrong. You
must first determine if the classpath is correct with:
<!-- macro JDisplay classpath.getclasspath.javafrag --><!-- generated --><iframe class="jdisplay" height="461" src="snippet/iframe/classpath.getclasspath.javafrag.htm" style="overflow:scroll" width="800"></iframe><!-- /generated by JDisplay --></li>
<li>If your program used to work and it <span class="quoted">suddenly</span> stopped working, did you
upgrade your JDK/JRE? If so, you likely forgot to copy over the jars to the <span class="dir">
<!-- macro JRE path --><!-- generated --><span class="path"><span class="drive">C:</span>\<span class="dir">Program Files</span>\<span class="dir">java</span>\<span class="dir">jre1.8.0_131</span>\</span><!-- /generated by JRE -->\lib\ext</span> and <span class="dir">
<!-- macro JRE path --><!-- generated --><span class="path"><span class="drive">C:</span>\<span class="dir">Program Files</span>\<span class="dir">java</span>\<span class="dir">jre1.8.0_131</span>\</span><!-- /generated by JRE -->
\jre\lib\ext\</span> directories.</li>
<li>You wrote some code like this:
<!-- macro JDisplay errormessages.exceptionininitializererror.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// one way to trigger an ExceptionInInitializerError</span>
<span class="k">private static final int </span><span class="var">a</span><span class="sc">;</span>

<span class="k">static </span><span class="fence1"> \{</span>
 <span class="commentslashslash">// someMethod throws some sort of Exception</span>
 <span class="var">a </span><span class="op">= </span><span class="method">someMethod</span><span class="fence1"> \(</span><span class="fence1"> \)</span><span class="sc">;</span>
<span class="fence1"> \}</span></pre><!-- /generated by JDisplay -->If the class you are loading throws an
<span class="class">Exception</span> during the <span class="k">static</span> initialisation, it will
show up as a <span class="class">ExceptionInInitializerError</span> rather than the original
<span class="class">Exception</span>, which your code may not be prepared to handle. When your code
later goes to use the class, you will get a <span class="class">NoClassDefFoundException</span>.</li>
<li>If you see the phrase <span class="quoted">wrong name</span> in the error message, it means you are
not consistently naming the <span class="package">packagename</span>. <span class="class">ClassName</span> everywhere. Perhaps you left off the packagename, or got the case wrong, or
made a typo in either the package or class name.</li>
<li>If you have two packages that use classes from each other, each jar must have all the classes of
the other package that it uses, or that it uses indirectly uses.
<div class="see"><a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/dependencies.html">dependencies</a></div></li>
<li>You must put the <span class="parm">-classpath</span> option before the class name on the java
command line. To remember the order, you can think of it like this. <span class="exe">Java.exe</span>
needs to know the classpath before it can search for the class.</li>
<li>You got package name wrong at the top of the source file, or left it out entirely. It does not
match the one when you built the jar. It is case-sensitive.</li>
<li>If this is an <span class="class">Applet</span>, you got the <span class="html">&lt;applet
code=<span class="dq">com.mindprod.mypackage.MyClass.class</span></span> wrong. Perhaps you forgot the
package part of the name or you forgot the <span class="html">.class</span>. The package names in the
jar may not be right. The <span class="html">&lt;applet archive=<span class="dq">myjar.jar</span></span> may not match a jar file containing the needed class.
<div class="see"><a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jar.html#CLASSPATH">.jar</a><br/>
<a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/applet.html#APPLETTAGS">Applet</a></div></li>
<li>If you use <span class="bat">java.exe -jar</span>, it ignores your classpath environment variable
and any <span class="parm">-classpath</span> option without comment! All your classes must be in the
jar. <!-- macro JDisplay errormessages.example203.bat --><!-- generated --><pre class="bat"><span class="batcomment">rem Vainly attempting to add an auxiliary mail.jar.</span>
<span class="batcomment">rem It has to go in the bulk.jar manifest Class-Path entry instead.</span>
java<span class="op">.</span>exe <span class="op">-</span>cp C<span class="sep">:\</span>javamail<span class="op">-</span>1<span class="op">.</span>3<span class="op">.</span>3_01<span class="sep">\</span>mail<span class="op">.</span>jar <span class="op">-</span>jar bulk<span class="op">.</span>jar</pre><!-- /generated by JDisplay -->won't be able to find any of the classes in <span class="file">mail.jar</span>.
You must copy <span class="file">mail.jar</span> to the <span class="dir">ext</span> directory or mention the
<span class="file">mail.jar</span> in the manifest <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jar.html#CLASSPATH">Class-Path:</a> entry.</li>
<li>Did you remember to include. on your classpath?</li>
<li>If you got the exception trying to execute a class in a jar, check with WinZip that the pathnames
inside the jar on that class exactly match the package structure, including case. If you don't
know what I am talking about, see <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jar.html">jar</a> for details. Make sure the
class you are trying to call has the expected package statement. Check the manifest to make sure the
fully qualified name of the main-class is properly specified.</li>
<li>You are trying to use a program compiled under <!-- macro Java 1.4+ --><!-- generated -->Java version <span class="version">1.4</span> or later<!-- /generated by Java -->
with an old Java 1.1.5 runtime, often the one in Internet Explorer. The old class library is missing
many of the new methods. Any other version mismatch where you run new code on old runtimes can cause
the similar problems. Check the runtime version <!-- macro JDisplay errormessages.example202.bat --><!-- generated --><pre class="bat"><span class="batcomment">rem getting version of java.exe</span>
java<span class="op">.</span>exe <span class="op">-</span>version</pre><!-- /generated by JDisplay -->
<!-- macro Qualified java.lang.StringBuilder class --><!-- generated --><span class="qualified"><span class="package">java</span>.<span class="package">lang</span>.<span class="class">StringBuilder</span></span><!-- /generated by Qualified -->
is one of the most likely candidates for a method from 1.5+ not available under earlier
<!-- macro Acronym JVMs --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/jvm.html">JVMs</a> \(<span class="means"><span class="ac">J</span>ava <span class="ac">V</span>irtual <span class="ac">M</span>achines</span> \)<!-- /generated by Acronym -->.</li>
<li>Have you got a simple <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/helloworld.html">HelloWorld</a> working yet? If not,
your problem may be in the way you installed the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jdk.html">JDK</a> or <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jre.html">JRE</a>. If you have trouble, read up on <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/gettingstarted.html">Getting Started</a>, <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/javacexe.html">javac.exe</a>,
<a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/javaexe.html">java.exe</a> and <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/classpath.html">classpath</a>.</li>
<li>Java is case-sensitive. Have you got the name of the class spelled exactly the same way everywhere
it is used, including the name of the <span class="ext">*.java</span> file, with class names always
starting with a capital letter and package names pure lower case?</li>
<li>One of your <span class="k">static</span> initialisers invokes a function that uses a <span class="k">static</span> field not yet initialised.</li>
<li>Did you remember to make your kickoff class, the one you mentioned in the java command line,
<span class="k">public</span>?</li>
<li>Does your main method have signature exactly like this?
<!-- macro JDisplay errormessages.example103.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// what a main method declaration must precisely look like</span>
<span class="k">public static void </span><span class="method">main</span><span class="fence1"> \(</span> <span class="class">String</span><span class="fence1"> \[</span><span class="fence1"> \]</span> <span class="vardef">args </span><span class="fence1"> \)</span>
   <span class="fence1"> \{</span>
   <span class="fence1"> \}</span></pre><!-- /generated by JDisplay --></li>
<li>Somehow your runtime is having trouble finding classes it could find at compile time. Check your
<a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/classpath.html">CLASSPATH</a>. Make sure all the classes are available.</li>
<li>Check your <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/javaexe.html">java.exe</a> command line. Your current directory
is crucial. You must specify fully qualified class names, without the .class extension.</li>
<li>Consider combining class files into a single <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jar.html">jar</a> file. Jars
cause far less trouble than individual class files, especially when you export them to a server or
someone else's machine.</li>
<li>Check that your browser supports jar files. Fortunately, all the modern ones mentioned under
<a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/browser.html">browsers</a> do.</li>
<li>You can get this error if you try to run an <span class="class">Applet</span> on an old browser
since it will not have the needed classes.</li>
<li>Watch <span class="string">\</span> and <span class="string">/</span>. In string literals
<span class="string">\</span> appears as <span class="string">\\</span>.</li>
<li>Make sure when developing classes for an extension i.e. class or jar files that live in the
<span class="dir">lib/ext/</span> folder, make sure you do not have duplicate classes. Classes from
extension folders will always be loaded before any other classpath, therefore making it impossible to
test other development versions not in the extensions folder. Make sure extensions <span class="ext">*.jar</span>'s are complete \(i.e., not reliant any additional classes \). Make sure the
<span class="ext">*.jar</span> in the extensions folder is up to date. Basically only
thoroughly-tested, stable code should live in the extensions folder.</li>
<li>Have you accidentally used a system package name for your own classes?</li>
<li>If every program gives <span class="class">NoClassDefFoundError</span>s, try uninstalling all Java
tools and <!-- macro Acronym JDK --><!-- generated --><span class="acronym"><abbr title="Java Development Kit">JDK</abbr></span><!-- /generated by Acronym -->
s, clean out the registry and then reinstall. Make sure you have only the latest Java on your
machine.
<div class="see"><a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jdk.html#FAILED">JDK</a></div></li>
<li>If your <span class="class">NoClassDefFoundError</span> occurs only sporadically, here is a
possible cause: You are running some classes in a jar file which is stored on a network mapped drive in
MS Windows. Sun keeps the jar files open in order to re-load classes which haven't been used in a
while and occasional network problems will force the jar to close. The <!-- macro Acronym JVM --><!-- generated --><span class="acronym"><abbr title="Java Virtual Machine">JVM</abbr></span><!-- /generated by Acronym -->
doesn't know to re-open the jar when the network mapped drive reconnects and simply reports that
various classes \(different each time \) no longer exist. The solution is either make sure the network is
reliable, use a network file system which doesn't close if drives are temporarily unavailable, or
locate all jar files on local drives.</li>
<li>If you change the jars used by your <!-- macro Acronym JSP --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/jsp.html">JSP</a> \(<span class="means"><span class="ac">J</span>ava <span class="ac">S</span>erver <span class="ac">P</span>ages</span> \)<!-- /generated by Acronym -->
code, make sure you manually delete the generated class files \(classes in the <span class="file">WEB-INF</span> tree for Caucho Resin \). The womb won't be smart enough to do that on its
own and you will get all manner of <span class="class">NoClassDefFoundError</span>s.</li>
<li>If you have classes included in your project that don't live in the same directory as the
project, in Café you must <strong>also</strong> do a <span class="click">Project ⇒ Options
⇒ Directory ⇒ Classes</span> to include their directories in the invisible <span class="setvar">CLASSPATH</span> for the project. Simply including the java or class files in the project is
not sufficient. Other <!-- macro Acronym IDEs --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/ide.html">IDEs</a> \(<span class="means"><span class="ac">I</span>ntegrated <span class="ac">D</span>evelopment <span class="ac">E</span>nvironments</span> \)<!-- /generated by Acronym -->
may have similar gotchas.</li>
<li>If your code works then suddenly stops working, chances are you have uninstalled a JRE/JDK or
installed a new one and the current JDK/JRE does not have the full complement of jars in the
<span class="dir">ext</span> directory.<!-- macro Include jgloss/include/fixext.htmlfrag --><!-- generated --><p>Sooner or later you will have to reinstall the JDK/JRE and you will lose your <span class="dir">ext</span> directories. You can quickly rebuild them if you maintain a bat file like this and run
it after every JRE/JDK install. Adjust the file to account for where your <span class="dir">ext</span> dirs are and where the jars are you need.</p><iframe class="jdisplay" height="580" src="snippet/iframe/fixext.btm.htm" style="overflow:scroll" width="800"></iframe>
<!-- /generated by Include --></li>
<li>Sometimes the problem is with your build. Try using <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/ant.html">ant</a> and a
script based on one of my examples. Ant has a better chance of getting it right that some ad hoc build
script.</li>
<li>You overrode <!-- macro Qualified JPanel.getParent class --><!-- generated --><span class="qualified"><span class="class">JPanel</span>.<span class="method">getParent</span></span><!-- /generated by Qualified -->
or perhaps some other crucial piece of Oracle's code without reproducing its functionality
typically by calling <span class="k">super</span>.<span class="method">xxx</span> \(\).</li>
<li>Check the integrity of all jars. Some may have been truncated during upload. Verify with
<span class="exe">jarsigner.exe</span> or <span class="exe">winzip.exe</span>.</li>
<li>An the app works fine locally but fails when you deploy it on a server because you failed to upload
all the class files needed to the server \(usually in jar form \).</li></ol>

u: ( no class def found error) <!-- macro Image "jgloss/scream.jpg" "scream" --><!-- generated --><img alt="scream" height="398" src="../image/jgloss/scream.jpg" width="295"/><!-- /generated by Image -->
<br/>
<em>Detail from The Scream, by Edvard Munch</em>
<p><span class="package">java.lang</span>.<span class="class">NoClassDefFoundError:</span> <span class="package">mypackage</span>/ <span class="class">MyClass</span>
<br/>
This one is difficult to track down. It has so many causes. Java is so picky! A misplaced comma, quote,
semicolon, extraneous extension or even the wrong upper/lower case can derail the whole program. I hope
some will implement the <a class="project" target="_blank" href="http://mindprod.com/project/noclassdeffounderror.html">NoClassDefFoundError Amanuensis</a> to make the problem easier to
track down.</p>
<p>Sun explains that it is thrown when Java Virtual Machine or a ClassLoader instance tries to load in
the definition of a class \(as part of a normal method call or as part of creating a new instance using
the new expression \) and no definition of the class could be found. The searched-for class definition
existed when the currently executing class was compiled, but the definition can no longer be found. It is
similar to a <span class="class">ClassNotFoundException</span>. This gives you the hint that a <span class="class">NoClassDefFoundError</span> problem was <strong>not</strong> with caused by a 
<!-- macro Qualified Class.forName class --><!-- generated --><span class="qualified"><span class="class">Class</span>.<span class="method">forName</span></span><!-- /generated by Qualified -->.</p>
<ol><li>Essentially the problem is the place and name where you put the class file, free-standing on disk
or inside a jar, does match the place and name it should have, based on the classpath, the package name
and the class name. Everything is case-sensitive and sensitive to the tiniest typo. Unfortunately,
there is currently no <a class="project" target="_blank" href="http://mindprod.com/project/noclassdeffounderror.html">tool</a> to tell
you where the class should be placed \(usually there are several possibilities \) or where it is now.</li>
<li>You got the class name wrong on the <span class="exe">java.exe</span> command line. It must include
the full package name and class separated by dots, without the <span class="ext">*.class</span> e.g.
<div class="bat">java.exe com.mindprod.converter.Convert</div><strong>not</strong> just the class:
<div class="bat">java.exe Convert</div>Newbies often get in trouble by adding a <span class="ext">*.java</span> or <span class="ext">*.class</span> suffix. In contrast, <span class="exe">javac.exe</span> demands the <span class="ext">*.java</span> extension.</li>
<li>You get an error message like this: <span class="output">Exception in thread <span class="quoted">main</span> java.lang.NoClassDefFoundError: XXX/java</span>. When attempting to compile, you
keyed <span class="bat">java.exe XXX.java</span> instead of <span class="bat">javac.exe
XXX.java</span>.</li>
<li>Java can't find the class mentioned. It is missing from the jar or classpath. Java may need
it because it occurs as a class or superclass in a serialised <span class="class">ObjectStream</span>
or because you called a method of that class. You don't find out about the problem at compile
time or even load time. You only find out when you actually go to use that missing class. The missing
class was present when the class referencing it was compiled \(perhaps on somebody else's machine \)
but the missing class is no longer accessible. To fix a vanilla <span class="class">NoClassDefFoundError</span>, search the all the jar files on your machine for the missing
class. <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/searchreplace.html">Funduc Search and Replace</a> will do that. If you
can't find it, scour the web for a download. When you find it, make sure its jar is on the
general classpath, the project classpath, the command line classpath or in the <span class="dir">ext</span> directories of the various <!-- macro Acronym JREs --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/jre.html">JREs</a> \(<span class="means"><span class="ac">J</span>ava <span class="ac">R</span>untime <span class="ac">E</span>nvironments</span> \)<!-- /generated by Acronym -->
you have installed. There will be at least two <span class="dir">ext</span> directories.
<div class="see"><a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/classpath.html">classpath</a></div></li>
<li>Three diagnostic tools you may find helpful:
<ol><li>To dump the classpath that you are actually using at some point in your code insert: You must
first determine if the classpath is correct with:
<!-- macro JDisplay classpath.getclasspath.javafrag --><!-- generated --><iframe class="jdisplay" height="461" src="snippet/iframe/classpath.getclasspath.javafrag.htm" style="overflow:scroll" width="800"></iframe><!-- /generated by JDisplay --></li>
<li>If you have a jar or more than one class, assign each class to a package! Package-less classes
are for one-shot, single-class throw-away experiments only.</li>
<li>Then when you are sure the jar or directory you want is truly on the classpath \(it is not
sufficient for the directory that the jar is in be on the classpath \), then check the contents of
the jar with <span class="exe">jarlook</span> to make sure your package/class is in there, spelled
precisely, including case. You can <a class="download" target="_blank" href="http://mindprod.com/products1.html#JARLOOK">download
jarlook</a> with source.</li>
<li><a class="download" target="_blank" href="http://mindprod.com/products1.html#JARCHECK">download jarcheck</a> as well. It will
help you detect problems with unexpected target versions of class files in your jars.</li></ol></li>
<li>Recall that reconstitution of serialized files uses <span class="class">Class</span>. <span class="method">forName</span> to instantiate all the classes buried in the files. <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/genjar.html">Genjar</a> or equivalent does not know to include these classes in your jar. It is up to
you to include all the classes you need manually. You will keep getting the dreaded <span class="class">NoClassDefFoundError</span> until you have nailed them all.</li>
<li>Look for a typo in spelling the class file name in the file or in the command line invoking its
main method. Copy/paste to make sure they are absolutely identical including case.</li>
<li>Check your <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/classpath.html">classpath</a>. Make sure you used semicolons or
colons as appropriate. Don't specify null fields in your classpath, e.g. two semicolons in a
row.</li>
<li>The problem is essentially either the class is not on the classpath or the classpath is wrong. You
must first determine if the classpath is correct with:
<!-- macro JDisplay classpath.getclasspath.javafrag --><!-- generated --><iframe class="jdisplay" height="461" src="snippet/iframe/classpath.getclasspath.javafrag.htm" style="overflow:scroll" width="800"></iframe><!-- /generated by JDisplay --></li>
<li>If your program used to work and it <span class="quoted">suddenly</span> stopped working, did you
upgrade your JDK/JRE? If so, you likely forgot to copy over the jars to the <span class="dir">
<!-- macro JRE path --><!-- generated --><span class="path"><span class="drive">C:</span>\<span class="dir">Program Files</span>\<span class="dir">java</span>\<span class="dir">jre1.8.0_131</span>\</span><!-- /generated by JRE -->\lib\ext</span> and <span class="dir">
<!-- macro JRE path --><!-- generated --><span class="path"><span class="drive">C:</span>\<span class="dir">Program Files</span>\<span class="dir">java</span>\<span class="dir">jre1.8.0_131</span>\</span><!-- /generated by JRE -->
\jre\lib\ext\</span> directories.</li>
<li>You wrote some code like this:
<!-- macro JDisplay errormessages.exceptionininitializererror.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// one way to trigger an ExceptionInInitializerError</span>
<span class="k">private static final int </span><span class="var">a</span><span class="sc">;</span>

<span class="k">static </span><span class="fence1"> \{</span>
 <span class="commentslashslash">// someMethod throws some sort of Exception</span>
 <span class="var">a </span><span class="op">= </span><span class="method">someMethod</span><span class="fence1"> \(</span><span class="fence1"> \)</span><span class="sc">;</span>
<span class="fence1"> \}</span></pre><!-- /generated by JDisplay -->If the class you are loading throws an
<span class="class">Exception</span> during the <span class="k">static</span> initialisation, it will
show up as a <span class="class">ExceptionInInitializerError</span> rather than the original
<span class="class">Exception</span>, which your code may not be prepared to handle. When your code
later goes to use the class, you will get a <span class="class">NoClassDefFoundException</span>.</li>
<li>If you see the phrase <span class="quoted">wrong name</span> in the error message, it means you are
not consistently naming the <span class="package">packagename</span>. <span class="class">ClassName</span> everywhere. Perhaps you left off the packagename, or got the case wrong, or
made a typo in either the package or class name.</li>
<li>If you have two packages that use classes from each other, each jar must have all the classes of
the other package that it uses, or that it uses indirectly uses.
<div class="see"><a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/dependencies.html">dependencies</a></div></li>
<li>You must put the <span class="parm">-classpath</span> option before the class name on the java
command line. To remember the order, you can think of it like this. <span class="exe">Java.exe</span>
needs to know the classpath before it can search for the class.</li>
<li>You got package name wrong at the top of the source file, or left it out entirely. It does not
match the one when you built the jar. It is case-sensitive.</li>
<li>If this is an <span class="class">Applet</span>, you got the <span class="html">&lt;applet
code=<span class="dq">com.mindprod.mypackage.MyClass.class</span></span> wrong. Perhaps you forgot the
package part of the name or you forgot the <span class="html">.class</span>. The package names in the
jar may not be right. The <span class="html">&lt;applet archive=<span class="dq">myjar.jar</span></span> may not match a jar file containing the needed class.
<div class="see"><a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jar.html#CLASSPATH">.jar</a><br/>
<a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/applet.html#APPLETTAGS">Applet</a></div></li>
<li>If you use <span class="bat">java.exe -jar</span>, it ignores your classpath environment variable
and any <span class="parm">-classpath</span> option without comment! All your classes must be in the
jar. <!-- macro JDisplay errormessages.example203.bat --><!-- generated --><pre class="bat"><span class="batcomment">rem Vainly attempting to add an auxiliary mail.jar.</span>
<span class="batcomment">rem It has to go in the bulk.jar manifest Class-Path entry instead.</span>
java<span class="op">.</span>exe <span class="op">-</span>cp C<span class="sep">:\</span>javamail<span class="op">-</span>1<span class="op">.</span>3<span class="op">.</span>3_01<span class="sep">\</span>mail<span class="op">.</span>jar <span class="op">-</span>jar bulk<span class="op">.</span>jar</pre><!-- /generated by JDisplay -->won't be able to find any of the classes in <span class="file">mail.jar</span>.
You must copy <span class="file">mail.jar</span> to the <span class="dir">ext</span> directory or mention the
<span class="file">mail.jar</span> in the manifest <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jar.html#CLASSPATH">Class-Path:</a> entry.</li>
<li>Did you remember to include. on your classpath?</li>
<li>If you got the exception trying to execute a class in a jar, check with WinZip that the pathnames
inside the jar on that class exactly match the package structure, including case. If you don't
know what I am talking about, see <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jar.html">jar</a> for details. Make sure the
class you are trying to call has the expected package statement. Check the manifest to make sure the
fully qualified name of the main-class is properly specified.</li>
<li>You are trying to use a program compiled under <!-- macro Java 1.4+ --><!-- generated -->Java version <span class="version">1.4</span> or later<!-- /generated by Java -->
with an old Java 1.1.5 runtime, often the one in Internet Explorer. The old class library is missing
many of the new methods. Any other version mismatch where you run new code on old runtimes can cause
the similar problems. Check the runtime version <!-- macro JDisplay errormessages.example202.bat --><!-- generated --><pre class="bat"><span class="batcomment">rem getting version of java.exe</span>
java<span class="op">.</span>exe <span class="op">-</span>version</pre><!-- /generated by JDisplay -->
<!-- macro Qualified java.lang.StringBuilder class --><!-- generated --><span class="qualified"><span class="package">java</span>.<span class="package">lang</span>.<span class="class">StringBuilder</span></span><!-- /generated by Qualified -->
is one of the most likely candidates for a method from 1.5+ not available under earlier
<!-- macro Acronym JVMs --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/jvm.html">JVMs</a> \(<span class="means"><span class="ac">J</span>ava <span class="ac">V</span>irtual <span class="ac">M</span>achines</span> \)<!-- /generated by Acronym -->.</li>
<li>Have you got a simple <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/helloworld.html">HelloWorld</a> working yet? If not,
your problem may be in the way you installed the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jdk.html">JDK</a> or <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jre.html">JRE</a>. If you have trouble, read up on <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/gettingstarted.html">Getting Started</a>, <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/javacexe.html">javac.exe</a>,
<a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/javaexe.html">java.exe</a> and <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/classpath.html">classpath</a>.</li>
<li>Java is case-sensitive. Have you got the name of the class spelled exactly the same way everywhere
it is used, including the name of the <span class="ext">*.java</span> file, with class names always
starting with a capital letter and package names pure lower case?</li>
<li>One of your <span class="k">static</span> initialisers invokes a function that uses a <span class="k">static</span> field not yet initialised.</li>
<li>Did you remember to make your kickoff class, the one you mentioned in the java command line,
<span class="k">public</span>?</li>
<li>Does your main method have signature exactly like this?
<!-- macro JDisplay errormessages.example103.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// what a main method declaration must precisely look like</span>
<span class="k">public static void </span><span class="method">main</span><span class="fence1"> \(</span> <span class="class">String</span><span class="fence1"> \[</span><span class="fence1"> \]</span> <span class="vardef">args </span><span class="fence1"> \)</span>
   <span class="fence1"> \{</span>
   <span class="fence1"> \}</span></pre><!-- /generated by JDisplay --></li>
<li>Somehow your runtime is having trouble finding classes it could find at compile time. Check your
<a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/classpath.html">CLASSPATH</a>. Make sure all the classes are available.</li>
<li>Check your <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/javaexe.html">java.exe</a> command line. Your current directory
is crucial. You must specify fully qualified class names, without the .class extension.</li>
<li>Consider combining class files into a single <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jar.html">jar</a> file. Jars
cause far less trouble than individual class files, especially when you export them to a server or
someone else's machine.</li>
<li>Check that your browser supports jar files. Fortunately, all the modern ones mentioned under
<a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/browser.html">browsers</a> do.</li>
<li>You can get this error if you try to run an <span class="class">Applet</span> on an old browser
since it will not have the needed classes.</li>
<li>Watch <span class="string">\</span> and <span class="string">/</span>. In string literals
<span class="string">\</span> appears as <span class="string">\\</span>.</li>
<li>Make sure when developing classes for an extension i.e. class or jar files that live in the
<span class="dir">lib/ext/</span> folder, make sure you do not have duplicate classes. Classes from
extension folders will always be loaded before any other classpath, therefore making it impossible to
test other development versions not in the extensions folder. Make sure extensions <span class="ext">*.jar</span>'s are complete \(i.e., not reliant any additional classes \). Make sure the
<span class="ext">*.jar</span> in the extensions folder is up to date. Basically only
thoroughly-tested, stable code should live in the extensions folder.</li>
<li>Have you accidentally used a system package name for your own classes?</li>
<li>If every program gives <span class="class">NoClassDefFoundError</span>s, try uninstalling all Java
tools and <!-- macro Acronym JDK --><!-- generated --><span class="acronym"><abbr title="Java Development Kit">JDK</abbr></span><!-- /generated by Acronym -->
s, clean out the registry and then reinstall. Make sure you have only the latest Java on your
machine.
<div class="see"><a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jdk.html#FAILED">JDK</a></div></li>
<li>If your <span class="class">NoClassDefFoundError</span> occurs only sporadically, here is a
possible cause: You are running some classes in a jar file which is stored on a network mapped drive in
MS Windows. Sun keeps the jar files open in order to re-load classes which haven't been used in a
while and occasional network problems will force the jar to close. The <!-- macro Acronym JVM --><!-- generated --><span class="acronym"><abbr title="Java Virtual Machine">JVM</abbr></span><!-- /generated by Acronym -->
doesn't know to re-open the jar when the network mapped drive reconnects and simply reports that
various classes \(different each time \) no longer exist. The solution is either make sure the network is
reliable, use a network file system which doesn't close if drives are temporarily unavailable, or
locate all jar files on local drives.</li>
<li>If you change the jars used by your <!-- macro Acronym JSP --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/jsp.html">JSP</a> \(<span class="means"><span class="ac">J</span>ava <span class="ac">S</span>erver <span class="ac">P</span>ages</span> \)<!-- /generated by Acronym -->
code, make sure you manually delete the generated class files \(classes in the <span class="file">WEB-INF</span> tree for Caucho Resin \). The womb won't be smart enough to do that on its
own and you will get all manner of <span class="class">NoClassDefFoundError</span>s.</li>
<li>If you have classes included in your project that don't live in the same directory as the
project, in Café you must <strong>also</strong> do a <span class="click">Project ⇒ Options
⇒ Directory ⇒ Classes</span> to include their directories in the invisible <span class="setvar">CLASSPATH</span> for the project. Simply including the java or class files in the project is
not sufficient. Other <!-- macro Acronym IDEs --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/ide.html">IDEs</a> \(<span class="means"><span class="ac">I</span>ntegrated <span class="ac">D</span>evelopment <span class="ac">E</span>nvironments</span> \)<!-- /generated by Acronym -->
may have similar gotchas.</li>
<li>If your code works then suddenly stops working, chances are you have uninstalled a JRE/JDK or
installed a new one and the current JDK/JRE does not have the full complement of jars in the
<span class="dir">ext</span> directory.<!-- macro Include jgloss/include/fixext.htmlfrag --><!-- generated --><p>Sooner or later you will have to reinstall the JDK/JRE and you will lose your <span class="dir">ext</span> directories. You can quickly rebuild them if you maintain a bat file like this and run
it after every JRE/JDK install. Adjust the file to account for where your <span class="dir">ext</span> dirs are and where the jars are you need.</p><iframe class="jdisplay" height="580" src="snippet/iframe/fixext.btm.htm" style="overflow:scroll" width="800"></iframe>
<!-- /generated by Include --></li>
<li>Sometimes the problem is with your build. Try using <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/ant.html">ant</a> and a
script based on one of my examples. Ant has a better chance of getting it right that some ad hoc build
script.</li>
<li>You overrode <!-- macro Qualified JPanel.getParent class --><!-- generated --><span class="qualified"><span class="class">JPanel</span>.<span class="method">getParent</span></span><!-- /generated by Qualified -->
or perhaps some other crucial piece of Oracle's code without reproducing its functionality
typically by calling <span class="k">super</span>.<span class="method">xxx</span> \(\).</li>
<li>Check the integrity of all jars. Some may have been truncated during upload. Verify with
<span class="exe">jarsigner.exe</span> or <span class="exe">winzip.exe</span>.</li>
<li>An the app works fine locally but fails when you deploy it on a server because you failed to upload
all the class files needed to the server \(usually in jar form \).</li></ol>

u: (noinitialcontextexception) You did a new <!-- macro Qualified javax.naming.InitialContext class --><!-- generated --><span class="qualified"><span class="package">javax</span>.<span class="package">naming</span>.<span class="class">InitialContext</span></span><!-- /generated by Qualified -->
\(\) when your program was not running inside a servlet womb which provides the default Initial context
factory. You can provide a factory class by naming it is a <span class="bat">SET</span> environment
parameter, or a Java system property <span class="bat">java.naming.factory.initial</span>. Here is some
typical code: <!-- macro JDisplay datasource.javafrag --><!-- generated --><iframe class="jdisplay" height="580" src="snippet/iframe/datasource.javafrag.htm" style="overflow:scroll" width="800"></iframe><!-- /generated by JDisplay -->

u: (no initial context exception) You did a new <!-- macro Qualified javax.naming.InitialContext class --><!-- generated --><span class="qualified"><span class="package">javax</span>.<span class="package">naming</span>.<span class="class">InitialContext</span></span><!-- /generated by Qualified -->
\(\) when your program was not running inside a servlet womb which provides the default Initial context
factory. You can provide a factory class by naming it is a <span class="bat">SET</span> environment
parameter, or a Java system property <span class="bat">java.naming.factory.initial</span>. Here is some
typical code: <!-- macro JDisplay datasource.javafrag --><!-- generated --><iframe class="jdisplay" height="580" src="snippet/iframe/datasource.javafrag.htm" style="overflow:scroll" width="800"></iframe><!-- /generated by JDisplay -->

u: (nosuchelementexception) You called <span class="interface">Iterator</span>.<span class="method">next</span> when
there were no more elements. You must either call <span class="method">isNext</span> first, or use the
<span class="java"><span class="k">for</span> \( <span class="class">Thing</span>: <span class="var">thing</span> : <span class="var">thingCollection</span> \)</span> syntax which handles it all for you
automatically.

u: (no such element exception) You called <span class="interface">Iterator</span>.<span class="method">next</span> when
there were no more elements. You must either call <span class="method">isNext</span> first, or use the
<span class="java"><span class="k">for</span> \( <span class="class">Thing</span>: <span class="var">thing</span> : <span class="var">thingCollection</span> \)</span> syntax which handles it all for you
automatically.

u: (nosuchfielderror) Likely you are mixing an old library with new code or vice versa. The definitions and
references to a class differ in whether they include some field. If you have source for the libraries,
recompile everything to discover the precise error. If not, check to make sure you are using the most
up-to-date libraries \(or ones of the appropriate vintage \) and clean compile all your code making sure the
libraries you run with are also on the classpath at compile time. Compilation may clear up the problem or
at least make it more specific.

u: (no such field error) Likely you are mixing an old library with new code or vice versa. The definitions and
references to a class differ in whether they include some field. If you have source for the libraries,
recompile everything to discover the precise error. If not, check to make sure you are using the most
up-to-date libraries \(or ones of the appropriate vintage \) and clean compile all your code making sure the
libraries you run with are also on the classpath at compile time. Compilation may clear up the problem or
at least make it more specific.

u: (nosuchmethoderror) <ul><li>A method is missing, often <span class="method">main</span>. If it is complaining about the main
method, it must have <!-- macro JDisplay errormessages.example103.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// what a main method declaration must precisely look like</span>
<span class="k">public static void </span><span class="method">main</span><span class="fence1"> \(</span> <span class="class">String</span><span class="fence1"> \[</span><span class="fence1"> \]</span> <span class="vardef">args </span><span class="fence1"> \)</span>
   <span class="fence1"> \{</span>
   <span class="fence1"> \}</span></pre><!-- /generated by JDisplay --> Did you forget the \[\]?</li>
<li>Did you remember to compile? use <span class="bat">javac.exe *.java</span> to compile and
<span class="bat">java.exe com.mydomain.mypackage.MyClass</span> to run. Try
<div class="bat">del *.class
<br/>
javac *.java</div></li>
<li>Did you use a <!-- macro Java 1.5 --><!-- generated -->Java version <span class="version">1.5</span><!-- /generated by Java -->
method with a <!-- macro Java 1.1 --><!-- generated -->Java version <span class="version">1.1</span><!-- /generated by Java -->
runtime?</li>
<li>Did you run with a different version of a library jar than you compiled against? Perhaps the run
time version of a class is missing a method that was present in the compile time version. Perhaps a
class was public at compile time, but package local at run time. Check for duplicates of the jar. You
might be accessing the wrong one.</li></ul>

u: (no such method) <ul><li>A method is missing, often <span class="method">main</span>. If it is complaining about the main
method, it must have <!-- macro JDisplay errormessages.example103.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// what a main method declaration must precisely look like</span>
<span class="k">public static void </span><span class="method">main</span><span class="fence1"> \(</span> <span class="class">String</span><span class="fence1"> \[</span><span class="fence1"> \]</span> <span class="vardef">args </span><span class="fence1"> \)</span>
   <span class="fence1"> \{</span>
   <span class="fence1"> \}</span></pre><!-- /generated by JDisplay --> Did you forget the \[\]?</li>
<li>Did you remember to compile? use <span class="bat">javac.exe *.java</span> to compile and
<span class="bat">java.exe com.mydomain.mypackage.MyClass</span> to run. Try
<div class="bat">del *.class
<br/>
javac *.java</div></li>
<li>Did you use a <!-- macro Java 1.5 --><!-- generated -->Java version <span class="version">1.5</span><!-- /generated by Java -->
method with a <!-- macro Java 1.1 --><!-- generated -->Java version <span class="version">1.1</span><!-- /generated by Java -->
runtime?</li>
<li>Did you run with a different version of a library jar than you compiled against? Perhaps the run
time version of a class is missing a method that was present in the compile time version. Perhaps a
class was public at compile time, but package local at run time. Check for duplicates of the jar. You
might be accessing the wrong one.</li></ul>

u: (nosuchproviderexception) Use <span class="method">Transport.sendMessage</span> not <span class="method">Transport.send</span>.

u: (no such provider exception) Use <span class="method">Transport.sendMessage</span> not <span class="method">Transport.send</span>.

u: (notserialiazableexception) You forgot to put <span class="k">implements</span> <span class="interface">Serializable</span> on the
class you are doing a <span class="method">writeObject</span> on. Since <span class="method">writeObject</span> also writes out all the objects pointed to by that object, by the objects
those objects point to, ad infinitum, all those classes too must be marked <span class="k">implements</span> <span class="interface">Serializable</span>. Any references to non-serializable
classes must be marked <span class="k">transient</span>. While you are at it, give each of those classes
<!-- macro JDisplay errormessages.example102.javafrag --><!-- generated --><iframe class="jdisplay" height="93" src="snippet/iframe/errormessages.example102.javafrag.htm" style="overflow:scroll" width="800"></iframe><!-- /generated by JDisplay -->
<!-- macro OnOracle \{https://docs.oracle.com/javase/8/docs/platform/serialization/spec/exceptions.html#3601 \} \{NotSerializableException \} --><!-- generated --><div class="oracle"><a class="oracle" target="_blank" href="https://docs.oracle.com/javase/8/docs/platform/serialization/spec/exceptions.html#3601">Oracle's Java 1.8 documentation on : <strong>NotSerializableException</strong></a></div>
<!-- /generated by OnOracle -->
<br/>
<div class="see"><a class="jgloss" href="serialization.html">serialization</a></div>

u: (not serializable exception) You forgot to put <span class="k">implements</span> <span class="interface">Serializable</span> on the
class you are doing a <span class="method">writeObject</span> on. Since <span class="method">writeObject</span> also writes out all the objects pointed to by that object, by the objects
those objects point to, ad infinitum, all those classes too must be marked <span class="k">implements</span> <span class="interface">Serializable</span>. Any references to non-serializable
classes must be marked <span class="k">transient</span>. While you are at it, give each of those classes
<!-- macro JDisplay errormessages.example102.javafrag --><!-- generated --><iframe class="jdisplay" height="93" src="snippet/iframe/errormessages.example102.javafrag.htm" style="overflow:scroll" width="800"></iframe><!-- /generated by JDisplay -->
<!-- macro OnOracle \{https://docs.oracle.com/javase/8/docs/platform/serialization/spec/exceptions.html#3601 \} \{NotSerializableException \} --><!-- generated --><div class="oracle"><a class="oracle" target="_blank" href="https://docs.oracle.com/javase/8/docs/platform/serialization/spec/exceptions.html#3601">Oracle's Java 1.8 documentation on : <strong>NotSerializableException</strong></a></div>
<!-- /generated by OnOracle -->
<br/>
<div class="see"><a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/serialization.html">serialization</a></div>

u: (ntldrmissing) <ul><li>You are trying to boot from a non-system diskette \(or disk \) in Windows
95/98/ME/NT/W2K/XP/W2K3.</li>
<li>The crucial loader program used in booting has been deleted from your hard disk.</li></ul>

u: (ntldr missing) <ul><li>You are trying to boot from a non-system diskette \(or disk \) in Windows
95/98/ME/NT/W2K/XP/W2K3.</li>
<li>The crucial loader program used in booting has been deleted from your hard disk.</li></ul>


u: (nullpointerexception)
\<div id="title">What is the NullPointerException?</div>
The NullPointerException happens when you try to call a method on an object that is either equal to null or hasn't been given a value yet. For example, look at the following code:
<div class="mlcode">
private Jeroo jeroo;

public void act() {
&nbsp;   jeroo.hop(); //Line A
&nbsp;   Jeroo jeroo2 = null;
&nbsp;   jeroo2.hop(); //Line B 
</div>
In the class shown above, both lines A and B will cause NullPointerExceptions. On line A, we try to a method on an object that hasn't been given a value and on line B, we try to call a method on an object that is set equal to null. Make sure that all your objects have real non-null values and this should fix your NullPointerException. You can also ask me for help on debugging a NullPointerException.


# Old null pointer exception explanation.
u: (0=1)
If you try to execute a piece of code like this when <span class="var">s</span> is null you will get a
<span class="class">NullPointerException</span>.
<!-- macro JDisplay nullpointerexception.example1.javafrag --><!-- generated --><pre class="java"><span class="var">s</span><span class="op">.</span><span class="method">someMethod</span><span class="fence1"> \(</span><span class="fence1"> \)</span><span class="sc">;</span></pre><!-- /generated by JDisplay -->
To learn about exceptions in general and try/catch to recover from them, see <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/exception.html">exceptions</a>. Here are some of the possible causes:
<ul><li>A reference variable is null, when you used it to access a field or method.</li>
<li>Autounboxing can make <span class="class">NullPointerException</span>s hard to track down. Innocent
looking code like <span class="k">int</span> <span class="var">result</span> = <span class="method">getResult</span> \(\); can throw a <span class="class">NullPointerException</span> if
autounboxing is hiding what is really happening, namely <span class="k">int</span> <span class="var">result</span> = <span class="method">getResult</span> \(\).<span class="method">intValue</span> \(\);
It will fail if <span class="method">getResult</span> returns <span class="k">null</span> instead of an
<span class="class">Integer</span> object.</li>
<li>Examine the stack trace to figure out where in the code it happening and how you got there. The
stack trace shows the exact line the problem was detected \(not necessarily the line at fault though \).
That gives you a clue to get started. You can put some code of the form:
<!-- macro JDisplay errormessages.example106.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// simple debugging code to check for null variables before</span>
<span class="commentslashslash">// they trigger a NullPointerException</span>
<span class="k">if </span><span class="fence1"> \(</span> <span class="var">p </span><span class="op">== </span><span class="k">null </span><span class="fence1"> \)</span>
   <span class="fence1"> \{</span>
   <span class="var">out</span><span class="op">.</span><span class="method">println</span><span class="fence1"> \(</span> <span class="string">"p was null"</span> <span class="fence1"> \)</span><span class="sc">;</span>
   <span class="fence1"> \}</span>

<span class="commentslashslash">// alternatively</span>
<span class="k">assert </span><span class="var">p </span><span class="op">!= </span><span class="k">null </span><span class="op">: </span><span class="string">"p was null"</span><span class="sc">;</span></pre><!-- /generated by JDisplay --></li>
<li>Narrow it down to the precise variable giving the trouble. Then you have to sit and think about
<strong>why</strong> that variable is null. The real problem could be much earlier in the code and the
problem propagated through to the point where it eventually surfaced as an exception. You must figure
out where it was supposed to be set and have a look at that code and why it is failing. Most of the
time you simply forgot to initialise. The easiest way to track the causes down is using a source-level
<a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/debugger.html">debugger</a> such as <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/intellij.html">Intellij Idea</a> or <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/eclipse.html">Eclipse</a> You can trace
the flow of execution, or examine the state of the universe at the time of failure.</li>
<li>If you don't want to use a debugger, pepper your code with assertions to track down just what
is <!-- macro JDisplay errormessages.example107.javafrag --><!-- generated --><pre class="java"><span class="commentslashslash">// typical debugging code that prints a message if thing is null.</span>
<span class="method">ensureNotNull</span><span class="fence1"> \(</span> <span class="var">thing</span><span class="op">, </span><span class="string">"thing"</span> <span class="fence1"> \)</span><span class="sc">;</span>

<span class="commentslashslash">// in JDK 1.4+ you can also do that with an assert.</span>
<span class="k">assert </span><span class="var">thing </span><span class="op">!= </span><span class="k">null </span><span class="op">: </span><span class="string">"thing is null"</span><span class="sc">;</span></pre><!-- /generated by JDisplay --></li>
<li>Your <span class="method">ensureNotNull</span> \( <span class="interface">Object</span> <span class="var">toTest</span> \) method might print an error message if <span class="var">toTest</span> is null,
then throw a new <span class="class">NullPointerException</span>. By making <span class="method">ensureNotNull</span> <span class="k">final</span> and using an <span class="java"><span class="k">if</span> \(<span class="constant">DEBUG</span> \)</span> inside <span class="method">ensureNotNull</span>, the inline expansions will have no overhead in production and you can
leave the debugging assertions in place to be reactivated later if ever needed.</li>
<li>Most commonly you forgot statements of the form: <span class="java">myArray = new int \[ 10 \];</span>
or <span class="java">myThing = new Thing \(\);</span> See the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/array.html#ARRAYINITGOTCHAS">array initialisation gotchas</a>. These are the most common of runtime
errors.</li>
<li>You may not call <span class="method">getParameter</span> in the <span class="class">Applet</span>
constructor. Move that code to <span class="method">init</span>.</li>
<li>Sometimes the problem is redeclaring a local variable with the same name as an instance variable.
You might have initialised one but not the other. Beware having two variables with the same name, one
local and one instance, It is very easy to do inadvertently and <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/javacexe.html">
Javac</a> will not warn you, though <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jikes.html">Jikes</a> will e.g.
<!-- macro JDisplay errormessages.example5.javafrag --><!-- generated --><pre class="java"><span class="class">ArrayList </span><span class="vardef">thelist </span><span class="op">= </span><span class="k">new </span><span class="class">ArrayList</span><span class="fence1"> \(</span> <span class="decimallow">149 </span><span class="fence1"> \)</span><span class="sc">;</span></pre><!-- /generated by JDisplay -->instead
<!-- macro JDisplay errormessages.example6.javafrag --><!-- generated --><pre class="java"><span class="var">thelist </span><span class="op">= </span><span class="k">new </span><span class="class">ArrayList</span><span class="fence1"> \(</span> <span class="decimallow">149 </span><span class="fence1"> \)</span><span class="sc">;</span></pre><!-- /generated by JDisplay -->You work with the local variable thinking you are working with the
instance variable and poof, your values are lost as soon as the local goes out of scope, leaving the
instance version null. This is the way I most commonly create <span class="class">NullPointerException</span>s for myself, when I convert a local variable to an instance one
when I have to break a method up that uses the variable and forget to take out the local declaration.</li>
<li>Be very careful calling any methods inside your constructors. If subclasses override them, you will
be invoking the subclass's version, which may be attempting to use fields that have not been
initialised yet. You won't get a warning message! The problem usually shows up as puzzling
<span class="class">NullPointerException</span>s. The way out is to move code out of the constructor,
often to the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/addnotify.html">addNotify</a> method. However, <span class="method">addNotify</span> can get in analogous problem to the constructor since it too is overridden
and it may use overridden methods.</li>
<li>If the problem is in Oracle's code that you call or indirectly call, \(i.e. no source code
line number \) look at the place in your code where you trigger the chain of calls. Insert some debug
code there to examine the parameters and the fields in any objects you pass. If you can't track
it from that, use a source code debugger like Eclipse that lets you follow program flow inside
Oracle's code. For example, your code creates an event, asking it to operate on some null
component and the problem does not show up until later when the event is dispatched and handled by
Oracle's code.</li>
<li>The <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/nice.html">Nice</a> language manages to detect <span class="class">NullPointerException</span>s at compile time instead of run time the way Java does.</li></ul>

u: (numberformatexception) In converting a <span class="class">String</span> to internal <span class="k">int</span>/
<span class="k">long</span> etc. with <span class="method">parseInt</span> or brethren, the number was not
a valid string of digits. The usual problem is leading or trailing spaces on your number. The sign must
come ahead of the number, no commas. Localisation may have an effect on what constitutes a valid number.
Sometimes it can be the number is too big to fit in the <span class="k">int</span>, <span class="k">long</span> etc.

u: (number format exception) In converting a <span class="class">String</span> to internal <span class="k">int</span>/
<span class="k">long</span> etc. with <span class="method">parseInt</span> or brethren, the number was not
a valid string of digits. The usual problem is leading or trailing spaces on your number. The sign must
come ahead of the number, no commas. Localisation may have an effect on what constitutes a valid number.
Sometimes it can be the number is too big to fit in the <span class="k">int</span>, <span class="k">long</span> etc.

u: (optionaldataexception) Attempting to use <span class="method">readObject</span> on a stream that does not contain
objects, or attempting to read past the end of file.

u: (optional data exception) Attempting to use <span class="method">readObject</span> on a stream that does not contain
objects, or attempting to read past the end of file.

u: (outofmemoryerror) You have run out of memory. You have filled up virtual <!-- macro Acronym RAM --><!-- generated --><span class="acronym"><abbr title="Random Access Memory">RAM</abbr></span><!-- /generated by Acronym -->
with objects and the garbage collector can't free any more <!-- macro Acronym RAM --><!-- generated --><span class="acronym"><abbr title="Random Access Memory">RAM</abbr></span><!-- /generated by Acronym -->. You can expand the effective size of virtual ram by putting options on
the <span class="exe">java.exe</span> command line. See the<span class="parm">-Xss64k -Xoss300k
-Xms4m</span> and <span class="parm">-Xmx10m</span> options described under <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/javaexe.html">java.exe</a>. Perhaps you have read some ridiculously large number from a <span class="interface">DataInputStream</span> to use as the size of an array. Perhaps you have used a method
recursively without terminating at reasonable depth and filled memory that way.
<div class="see"><a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/profiler.html">profiler</a></div>

u: (out of memory error) You have run out of memory. You have filled up virtual <!-- macro Acronym RAM --><!-- generated --><span class="acronym"><abbr title="Random Access Memory">RAM</abbr></span><!-- /generated by Acronym -->
with objects and the garbage collector can't free any more <!-- macro Acronym RAM --><!-- generated --><span class="acronym"><abbr title="Random Access Memory">RAM</abbr></span><!-- /generated by Acronym -->. You can expand the effective size of virtual ram by putting options on
the <span class="exe">java.exe</span> command line. See the<span class="parm">-Xss64k -Xoss300k
-Xms4m</span> and <span class="parm">-Xmx10m</span> options described under <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/javaexe.html">java.exe</a>. Perhaps you have read some ridiculously large number from a <span class="interface">DataInputStream</span> to use as the size of an array. Perhaps you have used a method
recursively without terminating at reasonable depth and filled memory that way.
<div class="see"><a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/profiler.html">profiler</a></div>

u: (pong) <!-- macro Acronym IBM --><!-- generated --><span class="acronym"><abbr title="International Business Machines">IBM</abbr></span><!-- /generated by Acronym -->
Visual Age sometimes makes a noise like an elevator arriving every time you click anything. No error
message is visible anywhere. It means you are debugging a multi-thread program and a higher priority thread
is blocking the one you want to debug.

u: (pong) <!-- macro Acronym IBM --><!-- generated --><span class="acronym"><abbr title="International Business Machines">IBM</abbr></span><!-- /generated by Acronym -->
Visual Age sometimes makes a noise like an elevator arriving every time you click anything. No error
message is visible anywhere. It means you are debugging a multi-thread program and a higher priority thread
is blocking the one you want to debug.

u: (securityviolation) Applets can only access the server they were loaded from.

u: (security violation) Applets can only access the server they were loaded from.

u: (signal10error) Signal 10 is a bus error. It's generally caused by attempting to perform an unaligned
bus operation \(for example, reading a long from an odd address \), so it isn't something that will
normally occur in a pure java application unless there is a bug in the <!-- macro Acronym JVM --><!-- generated --><span class="acronym"><abbr title="Java Virtual Machine">JVM</abbr></span><!-- /generated by Acronym -->. If you have native code in your application though, that could be the
cause. On some platforms, an application will get a bus error if its executable file or one of its shared
libraries are replaced while the application is running.

u: (signal 10 error) Signal 10 is a bus error. It's generally caused by attempting to perform an unaligned
bus operation \(for example, reading a long from an odd address \), so it isn't something that will
normally occur in a pure java application unless there is a bug in the <!-- macro Acronym JVM --><!-- generated --><span class="acronym"><abbr title="Java Virtual Machine">JVM</abbr></span><!-- /generated by Acronym -->. If you have native code in your application though, that could be the
cause. On some platforms, an application will get a bus error if its executable file or one of its shared
libraries are replaced while the application is running.


u: STACK_OVERFLOW_ERROR (stackoverflowerror) 
\<h2>What is the StackOverflowError?</h2>
This error mainly happens when you have a method that calls itself. This is called recursion. If you are intentionally trying to write a recursive function, make sure you have a valid base case so that the recursion can end. If you aren't trying to make a recursive method or you didn't know what recursion is, don't call a method inside itself. Make sure you are also not creating an object in its own constructor.
<div class="mlcode">
public boolean isOnEdge() {
&nbsp;   return isOnEdge() && this.isFacing(EAST);
}
</div>
The above code will give a StackOverflowError because we are calling <code>isOnEdge()</code> inside itself. For more information, check <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/recursion.html">this</a> out or ask me some other questions!


u: (stack overflow error)
^reuse(STACK_OVERFLOW_ERROR)

u: (startservicefailed) Just ignore this spurious error message. There is nothing the matter. Window is being
prissy and chastising you for asking it to start a service, when it already did so earlier.

u: (start service failed) Just ignore this spurious error message. There is nothing the matter. Window is being
prissy and chastising you for asking it to start a service, when it already did so earlier.

u: (streamcorruptedexception) The object stream is scrambled. Perhaps you are trying to read human-readable data, e.g. something that
was not prepared with <span class="method">writeObject</span>. Perhaps you have classes missing or the
classes used in the stream are obsolete. Perhaps you tried to use append mode to tack more onto the end
of your stream file after it was closed and later reopened in append mode. <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/gotchas.html#SERIALIZATION">That does not work</a>.
<h2 class="learningmore" id="LEARNINGMORE">Learning More</h2>
<!-- macro OnOracle \{https://docs.oracle.com/javase/8/docs/platform/serialization/spec/exceptions.html#3601 \} \{StreamCorruptedException \} --><!-- generated --><div class="oracle"><a class="oracle" target="_blank" href="https://docs.oracle.com/javase/8/docs/platform/serialization/spec/exceptions.html#3601">Oracle's Java 1.8 documentation on : <strong>StreamCorruptedException</strong></a></div>
<!-- /generated by OnOracle -->

u: (stream corrupted exception) The object stream is scrambled. Perhaps you are trying to read human-readable data, e.g. something that
was not prepared with <span class="method">writeObject</span>. Perhaps you have classes missing or the
classes used in the stream are obsolete. Perhaps you tried to use append mode to tack more onto the end
of your stream file after it was closed and later reopened in append mode. <a class="jgloss" href="gotchas.html#SERIALIZATION">That does not work</a>.
<h2 class="learningmore" id="LEARNINGMORE">Learning More</h2>
<!-- macro OnOracle \{https://docs.oracle.com/javase/8/docs/platform/serialization/spec/exceptions.html#3601 \} \{StreamCorruptedException \} --><!-- generated --><div class="oracle"><a class="oracle" target="_blank" href="https://docs.oracle.com/javase/8/docs/platform/serialization/spec/exceptions.html#3601">Oracle's Java 1.8 documentation on : <strong>StreamCorruptedException</strong></a></div>
<!-- /generated by OnOracle -->

u: (stringindexoutofboundsexception) The parameters you gave to the <span class="method">substring</span>, <span class="method">charAt</span>, <span class="method">index</span> or related <span class="class">String</span>
method were outside the range of the base <span class="class">String</span>, or the start point was after
the end point. See <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/gotchas.html#SUBSTRING">substring gotchas</a>. To track it down,
dump the base <span class="class">String</span> and the indexing parameters with <span class="class">System</span>. <span class="var">out</span>. <span class="method">println</span>.

u: (string index out of bounds exception) The parameters you gave to the <span class="method">substring</span>, <span class="method">charAt</span>, <span class="method">index</span> or related <span class="class">String</span>
method were outside the range of the base <span class="class">String</span>, or the start point was after
the end point. See <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/gotchas.html#SUBSTRING">substring gotchas</a>. To track it down,
dump the base <span class="class">String</span> and the indexing parameters with <span class="class">System</span>. <span class="var">out</span>. <span class="method">println</span>.

u: (suncertpatherexception) You are missing the root or intermediate <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/rootcertificate.html">certificates</a> for the <!-- macro Acronym SSL --><!-- generated --><span class="acronym"><abbr title="Secure Sockets Layer">SSL</abbr></span><!-- /generated by Acronym --> website you
are trying to connect to. They need to be imported into <span class="file">cacerts.</span>.

u: (sun cert path builder exception) You are missing the root or intermediate <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/rootcertificate.html">certificates</a> for the <!-- macro Acronym SSL --><!-- generated --><span class="acronym"><abbr title="Secure Sockets Layer">SSL</abbr></span><!-- /generated by Acronym --> website you
are trying to connect to. They need to be imported into <span class="file">cacerts.</span>.

u: (textnodisplay) Check that you painted the foreground text in a contrasting colour to the background.

u: (text does not display.) Check that you painted the foreground text in a contrasting colour to the background.

u: (trustproxy) Applets behind a firewall may not have access to <!-- macro Acronym DNS --><!-- generated --><span class="acronym"><abbr title="Domain Name Service">DNS</abbr></span><!-- /generated by Acronym -->. You must encode your CODEBASE as an <!-- macro Acronym IP_address --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/ip.html">IP</a> \(<span class="means"><span class="ac">I</span>nternet <span class="ac">P</span>rotocol</span> \)<!-- /generated by Acronym -->
instead of a <!-- macro Acronym DNS --><!-- generated --><span class="acronym"><abbr title="Domain Name Service">DNS</abbr></span><!-- /generated by Acronym -->
name.

u: (trustproxy) Applets behind a firewall may not have access to <!-- macro Acronym DNS --><!-- generated --><span class="acronym"><abbr title="Domain Name Service">DNS</abbr></span><!-- /generated by Acronym -->. You must encode your CODEBASE as an <!-- macro Acronym IP_address --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/ip.html">IP</a> \(<span class="means"><span class="ac">I</span>nternet <span class="ac">P</span>rotocol</span> \)<!-- /generated by Acronym -->
instead of a <!-- macro Acronym DNS --><!-- generated --><span class="acronym"><abbr title="Domain Name Service">DNS</abbr></span><!-- /generated by Acronym -->
name.

u: (unabletofindpath) You are trying to connect to some site on the web with <!-- macro Acronym SSL --><!-- generated --><span class="acronym"><abbr title="Secure Sockets Layer">SSL</abbr></span><!-- /generated by Acronym -->. You don't have all the
certificates you need in your <span class="file">cacerts.</span> file. Normally, all the certificates you
need are built-in to <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/cacerts.html">cacerts.</a>. Happily, you don't need the site's
certificate, just the intermediate all the ones back to the root. Click details ⇒ view certificate
⇒ Certification Path. Use google or look at the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/rootcertificate.html">certificate roots</a>
page to find out where these root certificates are posted. Then you can download and import them into
<a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/cacerts.html">cacerts.</a> with <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/keytoolexe.html">keytool.exe</a>.

u: (unable to find certification path) You are trying to connect to some site on the web with <!-- macro Acronym SSL --><!-- generated --><span class="acronym"><abbr title="Secure Sockets Layer">SSL</abbr></span><!-- /generated by Acronym -->. You don't have all the
certificates you need in your <span class="file">cacerts.</span> file. Normally, all the certificates you
need are built-in to <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/cacerts.html">cacerts.</a>. Happily, you don't need the site's
certificate, just the intermediate all the ones back to the root. Click details ⇒ view certificate
⇒ Certification Path. Use google or look at the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/rootcertificate.html">certificate roots</a>
page to find out where these root certificates are posted. Then you can download and import them into
<a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/cacerts.html">cacerts.</a> with <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/keytoolexe.html">keytool.exe</a>.

u: (unabletoload) <ul><li>Symantec support suggests copying all the <!-- macro Acronym DLLs --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Libraries">DLLs</abbr></span><!-- /generated by Acronym -->
in <span class="dir">VCP\JAVA\BIN</span> to <span class="dir">VCP\BIN</span> to correct stability
problems. If you do this, all debugging will cease to function. Delete any <!-- macro Acronym DLL --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Library">DLL</abbr></span><!-- /generated by Acronym -->
in <span class="dir">VCP\BIN</span> that also exists is <span class="dir">VCP\JAVA\BIN</span>.</li>
<li>Check that you fully qualified the name of your class with its package name, e.g. <span class="java">com.mindprod.business.TestDate</span> in the Project section of Visual Cafe, no trailing
<span class="quoted">.class</span> and that the upper and lower case is precisely correct. Read the
section in the glossary on <span class="setvar">CLASSPATH</span> and under java.exe on how packages,
classnames, the directory structure and the CLASSPATH all interact. If that does not solve it, I have
bad news.</li>
<li>Windows 95 has the most incredibly inept scheme for dealing with <!-- macro Acronym DLLs --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Libraries">DLLs</abbr></span><!-- /generated by Acronym -->
from different vendors that just happen to have the same 8+3 name, \(even when they are stored in
totally different directories \). Whichever application starts first gets its <!-- macro Acronym DLLs --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Libraries">DLLs</abbr></span><!-- /generated by Acronym -->
installed and every other app that comes afterward has to use them. If you start some app before VC, it
may load incompatible <!-- macro Acronym DLLs --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Libraries">DLLs</abbr></span><!-- /generated by Acronym -->. To avoid this, load VC
first. Then the other apps may stop working. Phttt! Mr. Gates has guaranteed himself a seat in hell for
this \(and for the confounded registry where all configuration information for all applications is
lumped in one unrestorable basket \). There should be separate system <!-- macro Acronym DLLs --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Libraries">DLLs</abbr></span><!-- /generated by Acronym -->
and application <!-- macro Acronym DLLs --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Libraries">DLLs</abbr></span><!-- /generated by Acronym -->
with no possibility of <!-- macro Acronym DLLs --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Libraries">DLLs</abbr></span><!-- /generated by Acronym -->
provided by one vendor being foisted on some other. Try starting Visual Cafe before any other app and
keep it running. It stands a better chance then of getting its own <!-- macro Acronym DLLs --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Libraries">DLLs</abbr></span><!-- /generated by Acronym -->
loaded.</li></ul>

u: (unable to load for debugging) <ul><li>Symantec support suggests copying all the <!-- macro Acronym DLLs --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Libraries">DLLs</abbr></span><!-- /generated by Acronym -->
in <span class="dir">VCP\JAVA\BIN</span> to <span class="dir">VCP\BIN</span> to correct stability
problems. If you do this, all debugging will cease to function. Delete any <!-- macro Acronym DLL --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Library">DLL</abbr></span><!-- /generated by Acronym -->
in <span class="dir">VCP\BIN</span> that also exists is <span class="dir">VCP\JAVA\BIN</span>.</li>
<li>Check that you fully qualified the name of your class with its package name, e.g. <span class="java">com.mindprod.business.TestDate</span> in the Project section of Visual Cafe, no trailing
<span class="quoted">.class</span> and that the upper and lower case is precisely correct. Read the
section in the glossary on <span class="setvar">CLASSPATH</span> and under java.exe on how packages,
classnames, the directory structure and the CLASSPATH all interact. If that does not solve it, I have
bad news.</li>
<li>Windows 95 has the most incredibly inept scheme for dealing with <!-- macro Acronym DLLs --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Libraries">DLLs</abbr></span><!-- /generated by Acronym -->
from different vendors that just happen to have the same 8+3 name, \(even when they are stored in
totally different directories \). Whichever application starts first gets its <!-- macro Acronym DLLs --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Libraries">DLLs</abbr></span><!-- /generated by Acronym -->
installed and every other app that comes afterward has to use them. If you start some app before VC, it
may load incompatible <!-- macro Acronym DLLs --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Libraries">DLLs</abbr></span><!-- /generated by Acronym -->. To avoid this, load VC
first. Then the other apps may stop working. Phttt! Mr. Gates has guaranteed himself a seat in hell for
this \(and for the confounded registry where all configuration information for all applications is
lumped in one unrestorable basket \). There should be separate system <!-- macro Acronym DLLs --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Libraries">DLLs</abbr></span><!-- /generated by Acronym -->
and application <!-- macro Acronym DLLs --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Libraries">DLLs</abbr></span><!-- /generated by Acronym -->
with no possibility of <!-- macro Acronym DLLs --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Libraries">DLLs</abbr></span><!-- /generated by Acronym -->
provided by one vendor being foisted on some other. Try starting Visual Cafe before any other app and
keep it running. It stands a better chance then of getting its own <!-- macro Acronym DLLs --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Libraries">DLLs</abbr></span><!-- /generated by Acronym -->
loaded.</li></ul>

u: (unabletolocate) It seems to be looking for tools.jar in the <!-- macro Acronym JRE --><!-- generated --><span class="acronym"><abbr title="Java Runtime Environment">JRE</abbr></span><!-- /generated by Acronym -->
instead of the <!-- macro Acronym JDK --><!-- generated --><span class="acronym"><abbr title="Java Development Kit">JDK</abbr></span><!-- /generated by Acronym -->. Make sure all the
<!-- macro Acronym JDK --><!-- generated --><span class="acronym"><abbr title="Java Development Kit">JDK</abbr></span><!-- /generated by Acronym -->
directories contain the expected files, including <span class="file">tools.jar</span>. I found that
uninstalling the <!-- macro Acronym JRE --><!-- generated --><span class="acronym"><abbr title="Java Runtime Environment">JRE</abbr></span><!-- /generated by Acronym -->
and <!-- macro Acronym JDK --><!-- generated --><span class="acronym"><abbr title="Java Development Kit">JDK</abbr></span><!-- /generated by Acronym -->
and reinstalling them cleared this up. Especially for beta software you are safer to uninstall and
reinstall rather than install over top.

u: (unable to locate tools.jar) It seems to be looking for tools.jar in the <!-- macro Acronym JRE --><!-- generated --><span class="acronym"><abbr title="Java Runtime Environment">JRE</abbr></span><!-- /generated by Acronym -->
instead of the <!-- macro Acronym JDK --><!-- generated --><span class="acronym"><abbr title="Java Development Kit">JDK</abbr></span><!-- /generated by Acronym -->. Make sure all the
<!-- macro Acronym JDK --><!-- generated --><span class="acronym"><abbr title="Java Development Kit">JDK</abbr></span><!-- /generated by Acronym -->
directories contain the expected files, including <span class="file">tools.jar</span>. I found that
uninstalling the <!-- macro Acronym JRE --><!-- generated --><span class="acronym"><abbr title="Java Runtime Environment">JRE</abbr></span><!-- /generated by Acronym -->
and <!-- macro Acronym JDK --><!-- generated --><span class="acronym"><abbr title="Java Development Kit">JDK</abbr></span><!-- /generated by Acronym -->
and reinstalling them cleared this up. Especially for beta software you are safer to uninstall and
reinstall rather than install over top.

u: (unabletoopen) In <!-- macro Acronym JET --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/jet.html">JET</a> \(<span class="means"><span class="ac">J</span>ust <span class="ac">E</span>nough <span class="ac">T</span>ime</span> \)<!-- /generated by Acronym -->
when compiling, you forgot to terminate execution of your app before redoing the compile.

u: (unable to open file) In <!-- macro Acronym JET --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/jet.html">JET</a> \(<span class="means"><span class="ac">J</span>ust <span class="ac">E</span>nough <span class="ac">T</span>ime</span> \)<!-- /generated by Acronym -->
when compiling, you forgot to terminate execution of your app before redoing the compile.

u: (unabletorun) Your SlickEdit vep project file is not in the same directory with the <span class="ext">*.java</span> and <span class="ext">*.class</span> files that compose the class containing
<span class="class">Main</span>.

u: (unable to run) Your SlickEdit vep project file is not in the same directory with the <span class="ext">*.java</span> and <span class="ext">*.class</span> files that compose the class containing
<span class="class">Main</span>.

u: (unavailableserviceexception) If you run a Java Web Start apps and try to use the <!-- macro Acronym JWS --><!-- generated --><span class="acronym"><abbr title="Java Web Start">JWS</abbr></span><!-- /generated by Acronym -->
service library, you will get this exception. You can only use that library in the context of Java Web
Start.

u: (unavailable service exception) If you run a Java Web Start apps and try to use the <!-- macro Acronym JWS --><!-- generated --><span class="acronym"><abbr title="Java Web Start">JWS</abbr></span><!-- /generated by Acronym -->
service library, you will get this exception. You can only use that library in the context of Java Web
Start.

u: (unmarshalexception) Some possibilities:
<ul><li>the receiver does not have the needed class file.</li>
<li>the receiver and sender have different versions of the class file.</li>
<li>your stubs are out of date.</li>
<li>you screwed up something doing <!-- macro Acronym RMI --><!-- generated --><span class="acronym"><abbr title="Remote Method Invocation">RMI</abbr></span><!-- /generated by Acronym -->. Try a
very simple case and get that going, then gradually add complexity. When it stops working you have a
much better idea where to look for the problem.</li></ul>

u: (unmarshal exception) Some possibilities:
<ul><li>the receiver does not have the needed class file.</li>
<li>the receiver and sender have different versions of the class file.</li>
<li>your stubs are out of date.</li>
<li>you screwed up something doing <!-- macro Acronym RMI --><!-- generated --><span class="acronym"><abbr title="Remote Method Invocation">RMI</abbr></span><!-- /generated by Acronym -->. Try a
very simple case and get that going, then gradually add complexity. When it stops working you have a
much better idea where to look for the problem.</li></ul>

u: (unrecoverablekeyexception) You gave the wrong password when you accessed the keystore with <span class="interface">KeyStore</span>. <span class="method">getKey</span>.

u: (unrecoverable key exception) You gave the wrong password when you accessed the keystore with <span class="interface">KeyStore</span>. <span class="method">getKey</span>.

u: (unsatisfiedlinkerror) This means you had some trouble loading a library containing native class implementations.
<ul><li>Use <a class="applet" target="_blank" href="http://mindprod.com/applet/wassup.html">Wassup</a> to determine the <span class="property">java.library.path</span> system property. It is restricted, so make sure you flip the
<span class="hybrid">Wassup</span> display from <span class="click">safe</span> to <span class="click">restricted</span>. Your <!-- macro Acronym DLL --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Library">DLL</abbr></span><!-- /generated by Acronym -->
must live either on that path, or in your jar without any package name. In Windows, look under
<span class="click">System Tools ⇒ Event Viewer ⇒ Application</span> to see the event log of
<!-- macro Acronym DLL --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Library">DLL</abbr></span><!-- /generated by Acronym -->
problems for additional clues.</li>
<li>All your <!-- macro Acronym DLLs --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Libraries">DLLs</abbr></span><!-- /generated by Acronym -->
and all the <!-- macro Acronym DLLs --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Libraries">DLLs</abbr></span><!-- /generated by Acronym -->
they indirectly invoke must live on the <span class="property">java.library.path</span>.</li>
<li>You must do a <!-- macro Qualified System.loadLibrary class --><!-- generated --><span class="qualified"><span class="class">System</span>.<span class="method">loadLibrary</span></span><!-- /generated by Qualified -->
\( <span class="string"><span class="quoted">mylib</span></span> \) \[or <span class="class">System</span>. <span class="method">load</span> \( <span class="string"><span class="quoted">C:\\libs\\mylib.dll</span></span> \) for Windows \] \[or
<!-- macro Qualified System.load class --><!-- generated --><span class="qualified"><span class="class">System</span>.<span class="method">load</span></span><!-- /generated by Qualified -->
\( <span class="string"><span class="quoted">lib/mylib.so</span></span> \) for Linux \] before you can use
any native methods of a class.</li>
<li>If you get the error after the class containing the native method is safely loaded, when you invoke
a native method, make sure you generated your <span class="ext">*.h</span> file with the fully
qualified <!-- macro JDisplay errormessages.example204.bat --><!-- generated --><pre class="bat"><span class="batcomment">rem preparing .h file for native methods for class</span>
<span class="batcomment">rem com.mindprod.mouse.Mouse</span>
javah<span class="op">.</span>exe <span class="op">-</span>jni <span class="op">-</span>o mouse<span class="op">.</span>h com<span class="op">.</span>mindprod<span class="op">.</span>mouse<span class="op">.</span>Mouse</pre><!-- /generated by JDisplay -->not simply:
<div class="bad">javah Mouse</div></li>
<li>If you get the error after the class containing the native method is safely loaded, when you invoke
a native method, check that the <span class="ext">*.cpp</span> method signatures exactly match those in
the <span class="ext">*.h</span> file. You should see method names like this: <span class="method">Java_com_mindprod_mouse_Mouse_GetMousePosition</span> that start with the word Java and
contain the package, class and method name all strung together. Make sure you remembered to implement
all the methods.</li>
<li>Put all your classes is a package. Package-less classes are just for tiny toy programs.</li>
<li>If you get the error on your <!-- macro Qualified System.loadLibrary class --><!-- generated --><span class="qualified"><span class="class">System</span>.<span class="method">loadLibrary</span></span><!-- /generated by Qualified -->
\( <span class="string"><span class="quoted">mylib</span></span> \) or <span class="class">System</span>.
<span class="method">loadLibrary</span> \( <span class="string"><span class="quoted">C:\\libs\\mylib.dll</span></span> \) you may be missing the missing native class/dll.</li>
<li>You have given your library the wrong name or specified the wrong name in the <span class="method">System.loadLibrary \( mylib \)</span>. <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jni.html#LOADLIBRARY">Details</a>.</li>
<li>If you are getting the Exception on a <span class="method">System.loadLibrary \( mylib \)</span> try
using <span class="method">System.load \(<span class="quoted">C:\\libs\\mylib.dll</span> \)</span> instead
of the <span class="method">System.loadLibrary \(<span class="quoted">mylib</span> \)</span>.</li>
<li>Class name not properly qualified.</li>
<li>At least for debugging, move your <span class="method">loadLibrary</span> call out of <span class="k">static</span> init so you can catch the <span class="class">Exception</span> and see the stack
trace more easily and debug trace more easily.</li>
<li>You need to regenerate the <span class="ext">*.h</span> and recompile the <span class="ext">*.c</span> file if you change the package name.</li>
<li>In order to execute <!-- macro Acronym JNI --><!-- generated --><span class="acronym"><abbr title="Java Native Interface">JNI</abbr></span><!-- /generated by Acronym -->
methods from a Netscape Applet, the class containing the native methods must be in the client's
system class path for Netscape \(
<!-- macro Path \{%X64\Netscape\Communicator\program\java\classes\ \} --><!-- generated --><span class="path"><span class="drive">X:</span>\<span class="dir">Program Files</span>\<span class="dir">Netscape</span>\<span class="dir">Communicator</span>\<span class="dir">program</span>\<span class="dir">java</span>\<span class="dir">classes</span>\</span><!-- /generated by Path --> \). The <!-- macro Acronym DLL --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Library">DLL</abbr></span><!-- /generated by Acronym -->
must be in the client's <!-- macro Acronym DLL --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Library">DLL</abbr></span><!-- /generated by Acronym -->
classpath for Netscape \( <!-- macro Path \{%X64\Netscape\Communicator\program\java\bin\ \} --><!-- generated --><span class="path"><span class="drive">X:</span>\<span class="dir">Program Files</span>\<span class="dir">Netscape</span>\<span class="dir">Communicator</span>\<span class="dir">program</span>\<span class="dir">java</span>\<span class="dir">bin</span>\</span><!-- /generated by Path --> \). If this is not done, you will be able to load the library, but not
execute methods on it. I suspect there is something broken in Netscape and System.loadLibrary. I have
fooled around with it for months and still cannot get it to behave reliably. See notes under <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jni.html">JNI</a></li></ul>

u: ( unsatisfied link error) This means you had some trouble loading a library containing native class implementations.
<ul><li>Use <a class="applet" target="_blank" href="http://mindprod.com/applet/wassup.html">Wassup</a> to determine the <span class="property">java.library.path</span> system property. It is restricted, so make sure you flip the
<span class="hybrid">Wassup</span> display from <span class="click">safe</span> to <span class="click">restricted</span>. Your <!-- macro Acronym DLL --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Library">DLL</abbr></span><!-- /generated by Acronym -->
must live either on that path, or in your jar without any package name. In Windows, look under
<span class="click">System Tools ⇒ Event Viewer ⇒ Application</span> to see the event log of
<!-- macro Acronym DLL --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Library">DLL</abbr></span><!-- /generated by Acronym -->
problems for additional clues.</li>
<li>All your <!-- macro Acronym DLLs --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Libraries">DLLs</abbr></span><!-- /generated by Acronym -->
and all the <!-- macro Acronym DLLs --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Libraries">DLLs</abbr></span><!-- /generated by Acronym -->
they indirectly invoke must live on the <span class="property">java.library.path</span>.</li>
<li>You must do a <!-- macro Qualified System.loadLibrary class --><!-- generated --><span class="qualified"><span class="class">System</span>.<span class="method">loadLibrary</span></span><!-- /generated by Qualified -->
\( <span class="string"><span class="quoted">mylib</span></span> \) \[or <span class="class">System</span>. <span class="method">load</span> \( <span class="string"><span class="quoted">C:\\libs\\mylib.dll</span></span> \) for Windows \] \[or
<!-- macro Qualified System.load class --><!-- generated --><span class="qualified"><span class="class">System</span>.<span class="method">load</span></span><!-- /generated by Qualified -->
\( <span class="string"><span class="quoted">lib/mylib.so</span></span> \) for Linux \] before you can use
any native methods of a class.</li>
<li>If you get the error after the class containing the native method is safely loaded, when you invoke
a native method, make sure you generated your <span class="ext">*.h</span> file with the fully
qualified <!-- macro JDisplay errormessages.example204.bat --><!-- generated --><pre class="bat"><span class="batcomment">rem preparing .h file for native methods for class</span>
<span class="batcomment">rem com.mindprod.mouse.Mouse</span>
javah<span class="op">.</span>exe <span class="op">-</span>jni <span class="op">-</span>o mouse<span class="op">.</span>h com<span class="op">.</span>mindprod<span class="op">.</span>mouse<span class="op">.</span>Mouse</pre><!-- /generated by JDisplay -->not simply:
<div class="bad">javah Mouse</div></li>
<li>If you get the error after the class containing the native method is safely loaded, when you invoke
a native method, check that the <span class="ext">*.cpp</span> method signatures exactly match those in
the <span class="ext">*.h</span> file. You should see method names like this: <span class="method">Java_com_mindprod_mouse_Mouse_GetMousePosition</span> that start with the word Java and
contain the package, class and method name all strung together. Make sure you remembered to implement
all the methods.</li>
<li>Put all your classes is a package. Package-less classes are just for tiny toy programs.</li>
<li>If you get the error on your <!-- macro Qualified System.loadLibrary class --><!-- generated --><span class="qualified"><span class="class">System</span>.<span class="method">loadLibrary</span></span><!-- /generated by Qualified -->
\( <span class="string"><span class="quoted">mylib</span></span> \) or <span class="class">System</span>.
<span class="method">loadLibrary</span> \( <span class="string"><span class="quoted">C:\\libs\\mylib.dll</span></span> \) you may be missing the missing native class/dll.</li>
<li>You have given your library the wrong name or specified the wrong name in the <span class="method">System.loadLibrary \( mylib \)</span>. <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jni.html#LOADLIBRARY">Details</a>.</li>
<li>If you are getting the Exception on a <span class="method">System.loadLibrary \( mylib \)</span> try
using <span class="method">System.load \(<span class="quoted">C:\\libs\\mylib.dll</span> \)</span> instead
of the <span class="method">System.loadLibrary \(<span class="quoted">mylib</span> \)</span>.</li>
<li>Class name not properly qualified.</li>
<li>At least for debugging, move your <span class="method">loadLibrary</span> call out of <span class="k">static</span> init so you can catch the <span class="class">Exception</span> and see the stack
trace more easily and debug trace more easily.</li>
<li>You need to regenerate the <span class="ext">*.h</span> and recompile the <span class="ext">*.c</span> file if you change the package name.</li>
<li>In order to execute <!-- macro Acronym JNI --><!-- generated --><span class="acronym"><abbr title="Java Native Interface">JNI</abbr></span><!-- /generated by Acronym -->
methods from a Netscape Applet, the class containing the native methods must be in the client's
system class path for Netscape \(
<!-- macro Path \{%X64\Netscape\Communicator\program\java\classes\ \} --><!-- generated --><span class="path"><span class="drive">X:</span>\<span class="dir">Program Files</span>\<span class="dir">Netscape</span>\<span class="dir">Communicator</span>\<span class="dir">program</span>\<span class="dir">java</span>\<span class="dir">classes</span>\</span><!-- /generated by Path --> \). The <!-- macro Acronym DLL --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Library">DLL</abbr></span><!-- /generated by Acronym -->
must be in the client's <!-- macro Acronym DLL --><!-- generated --><span class="acronym"><abbr title="Dynamic Link Library">DLL</abbr></span><!-- /generated by Acronym -->
classpath for Netscape \( <!-- macro Path \{%X64\Netscape\Communicator\program\java\bin\ \} --><!-- generated --><span class="path"><span class="drive">X:</span>\<span class="dir">Program Files</span>\<span class="dir">Netscape</span>\<span class="dir">Communicator</span>\<span class="dir">program</span>\<span class="dir">java</span>\<span class="dir">bin</span>\</span><!-- /generated by Path --> \). If this is not done, you will be able to load the library, but not
execute methods on it. I suspect there is something broken in Netscape and System.loadLibrary. I have
fooled around with it for months and still cannot get it to behave reliably. See notes under <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jni.html">JNI</a></li></ul>

u: (unsupportedclassversionerror) You used a method that your <!-- macro Acronym JVM --><!-- generated --><span class="acronym"><abbr title="Java Virtual Machine">JVM</abbr></span><!-- /generated by Acronym -->
does not support. This most commonly happens when you target for <!-- macro Java 1.6 --><!-- generated -->Java version <span class="version">1.6</span><!-- /generated by Java -->
but inadvertently use a <!-- macro Java 1.7 --><!-- generated -->Java version <span class="version">1.7</span><!-- /generated by Java -->
method. The compiler will not warn you at compile time. I run into it most commonly when I run jet whose
run time is <!-- macro Java 1.6 --><!-- generated -->Java version <span class="version">1.6</span><!-- /generated by Java -->. The problem goes away when I use a <!-- macro Java 1.7 --><!-- generated -->Java version <span class="version">1.7</span><!-- /generated by Java -->
<!-- macro Acronym JVM --><!-- generated --><span class="acronym"><abbr title="Java Virtual Machine">JVM</abbr></span><!-- /generated by Acronym -->. Look at the since comments in the
Javadoc to make sure you are not using any too new methods. If you use the <span class="parm">-bootpath</span> option to provide <!-- macro Java 1.6 --><!-- generated -->Java version <span class="version">1.6</span><!-- /generated by Java -->
jars, then the compiler can warn you about using a <!-- macro Java 1.7 --><!-- generated -->Java version <span class="version">1.7</span><!-- /generated by Java -->
method. Try upgrading or reverting your <!-- macro Acronym JVM --><!-- generated --><span class="acronym"><abbr title="Java Virtual Machine">JVM</abbr></span><!-- /generated by Acronym -->. This is
likely a bug - some native method not prepared to function under the current version. Try
uninstalling all your java, purging the files, then reinstall your <!-- macro Acronym JDKs --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/jdk.html">JDKs</a> \(<span class="means"><span class="ac">J</span>ava <span class="ac">D</span>evelopment <span class="ac">K</span>its</span> \)<!-- /generated by Acronym -->
and <!-- macro Acronym JRE --><!-- generated --><span class="acronym"><abbr title="Java Runtime Environment">JRE</abbr></span><!-- /generated by Acronym -->
s, working from oldest to newest. The problem is caused by some sort of clash with code from one version
interacting with code from another. Watch your classpath. You could have no classes on it for a more
advanced <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jvm.html">JVM</a> than you are using. Check which version you are using
with:
<div class="bat"><span class="exe">java.exe</span> -version</div>or use <a class="download" target="_blank" href="http://mindprod.com/products1.html#WASSUP">Wassup</a> for more detail.

u: (unsupported class version error) You used a method that your <!-- macro Acronym JVM --><!-- generated --><span class="acronym"><abbr title="Java Virtual Machine">JVM</abbr></span><!-- /generated by Acronym -->
does not support. This most commonly happens when you target for <!-- macro Java 1.6 --><!-- generated -->Java version <span class="version">1.6</span><!-- /generated by Java -->
but inadvertently use a <!-- macro Java 1.7 --><!-- generated -->Java version <span class="version">1.7</span><!-- /generated by Java -->
method. The compiler will not warn you at compile time. I run into it most commonly when I run jet whose
run time is <!-- macro Java 1.6 --><!-- generated -->Java version <span class="version">1.6</span><!-- /generated by Java -->. The problem goes away when I use a <!-- macro Java 1.7 --><!-- generated -->Java version <span class="version">1.7</span><!-- /generated by Java -->
<!-- macro Acronym JVM --><!-- generated --><span class="acronym"><abbr title="Java Virtual Machine">JVM</abbr></span><!-- /generated by Acronym -->. Look at the since comments in the
Javadoc to make sure you are not using any too new methods. If you use the <span class="parm">-bootpath</span> option to provide <!-- macro Java 1.6 --><!-- generated -->Java version <span class="version">1.6</span><!-- /generated by Java -->
jars, then the compiler can warn you about using a <!-- macro Java 1.7 --><!-- generated -->Java version <span class="version">1.7</span><!-- /generated by Java -->
method. Try upgrading or reverting your <!-- macro Acronym JVM --><!-- generated --><span class="acronym"><abbr title="Java Virtual Machine">JVM</abbr></span><!-- /generated by Acronym -->. This is
likely a bug - some native method not prepared to function under the current version. Try
uninstalling all your java, purging the files, then reinstall your <!-- macro Acronym JDKs --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/jdk.html">JDKs</a> \(<span class="means"><span class="ac">J</span>ava <span class="ac">D</span>evelopment <span class="ac">K</span>its</span> \)<!-- /generated by Acronym -->
and <!-- macro Acronym JRE --><!-- generated --><span class="acronym"><abbr title="Java Runtime Environment">JRE</abbr></span><!-- /generated by Acronym -->
s, working from oldest to newest. The problem is caused by some sort of clash with code from one version
interacting with code from another. Watch your classpath. You could have no classes on it for a more
advanced <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jvm.html">JVM</a> than you are using. Check which version you are using
with:
<div class="bat"><span class="exe">java.exe</span> -version</div>or use <a class="download" target="_blank" href="http://mindprod.com/products1.html#WASSUP">Wassup</a> for more detail.

u: (unsupporteddatatypeexception) You have an obsolete <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/javamail.html">JavaMail</a> or <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jaf.html">Java Activation Framework</a> jar.

u: (unsupported datatype exception) You have an obsolete <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/javamail.html">JavaMail</a> or <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/jaf.html">Java Activation Framework</a> jar.

u: (verifyerror) This was a compiler
bug. It comes from redefining a local variable. Just use two different names. Could come from other
compiler bugs. Try using a the current <!-- macro Acronym JDK --><!-- generated --><span class="acronym"><abbr title="Java Development Kit">JDK</abbr></span><!-- /generated by Acronym -->
compiler. It can also come from using <span class="java">Outer.this</span> from a non-inner class. In
<!-- macro Acronym JDK --><!-- generated --><span class="acronym"><abbr title="Java Development Kit">JDK</abbr></span><!-- /generated by Acronym -->
<span class="version">1.4.2+</span>, the compiler should detect the problem rather than runtime.

u: (verify error) This was a compiler
bug. It comes from redefining a local variable. Just use two different names. Could come from other
compiler bugs. Try using a the current <!-- macro Acronym JDK --><!-- generated --><span class="acronym"><abbr title="Java Development Kit">JDK</abbr></span><!-- /generated by Acronym -->
compiler. It can also come from using <span class="java">Outer.this</span> from a non-inner class. In
<!-- macro Acronym JDK --><!-- generated --><span class="acronym"><abbr title="Java Development Kit">JDK</abbr></span><!-- /generated by Acronym -->
<span class="version">1.4.2+</span>, the compiler should detect the problem rather than runtime.

u: (wrongversion) You have partly a <!-- macro Java 1.4 --><!-- generated -->Java version <span class="version">1.4</span><!-- /generated by Java -->
and partly an earlier version of Java installed. Check out each copy of <span class="java">java.exe</span>
and with the <span class="parm">-version</span> option. If necessary uninstall all
<!-- macro Acronym JDKs --><!-- generated --><span class="acronym"><abbr title="Java Development Kits">JDKs</abbr></span><!-- /generated by Acronym -->
and <!-- macro Acronym JRE --><!-- generated --><span class="acronym"><abbr title="Java Runtime Environment">JRE</abbr></span><!-- /generated by Acronym -->
s, prune the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/registry.html">registry</a> of references to Java, prune the hard disk
of java directories and reinstall from scratch. Watch out for any <!-- macro Acronym JDKs --><!-- generated --><span class="acronym"><abbr title="Java Development Kits">JDKs</abbr></span><!-- /generated by Acronym -->
that came embedded with an <!-- macro Acronym IDE --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/ide.html">IDE</a> \(<span class="means"><span class="ac">I</span>ntegrated <span class="ac">D</span>evelopment <span class="ac">E</span>nvironment</span> \)<!-- /generated by Acronym -->. Watch
out specially for the <span class="java">C:\WINNT\system32\java.exe</span>. It too should be 1.4. You may
have the <span class="file">rt.jar</span> file from a different version.

u: (wrong version) You have partly a <!-- macro Java 1.4 --><!-- generated -->Java version <span class="version">1.4</span><!-- /generated by Java -->
and partly an earlier version of Java installed. Check out each copy of <span class="java">java.exe</span>
and with the <span class="parm">-version</span> option. If necessary uninstall all
<!-- macro Acronym JDKs --><!-- generated --><span class="acronym"><abbr title="Java Development Kits">JDKs</abbr></span><!-- /generated by Acronym -->
and <!-- macro Acronym JRE --><!-- generated --><span class="acronym"><abbr title="Java Runtime Environment">JRE</abbr></span><!-- /generated by Acronym -->
s, prune the <a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/registry.html">registry</a> of references to Java, prune the hard disk
of java directories and reinstall from scratch. Watch out for any <!-- macro Acronym JDKs --><!-- generated --><span class="acronym"><abbr title="Java Development Kits">JDKs</abbr></span><!-- /generated by Acronym -->
that came embedded with an <!-- macro Acronym IDE --><!-- generated --><a class="acronymdef" target="_blank" href="http://mindprod.com/jgloss/ide.html">IDE</a> \(<span class="means"><span class="ac">I</span>ntegrated <span class="ac">D</span>evelopment <span class="ac">E</span>nvironment</span> \)<!-- /generated by Acronym -->. Watch
out specially for the <span class="java">C:\WINNT\system32\java.exe</span>. It too should be 1.4. You may
have the <span class="file">rt.jar</span> file from a different version.

u: (zipexception) Usually the zip file in question is the distribution jar containing your class files and resources. For
some reason it can't be found. You may have misspelled it or used the wrong syntax to specify it.
<div class="see"><a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/applet.html#APPLETTAGS">Applet Tags</a><br/>
<a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/javaexe.html">java.exe</a></div>

u: (zip exception) Usually the zip file in question is the distribution jar containing your class files and resources. For
some reason it can't be found. You may have misspelled it or used the wrong syntax to specify it.
<div class="see"><a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/applet.html#APPLETTAGS">Applet Tags</a><br/>
<a class="jgloss" target="_blank" href="http://mindprod.com/jgloss/javaexe.html">java.exe</a></div>
